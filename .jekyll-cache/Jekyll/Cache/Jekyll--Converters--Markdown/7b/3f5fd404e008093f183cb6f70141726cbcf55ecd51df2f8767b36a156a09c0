I"(<p>First of all, a big thanks to Kilo Loco’s <a href="https://www.youtube.com/watch?v=vuygdr0EcGM">tutorial</a>. Check it out. Not only is this feature available for iOS 13 up, it’s also available for Mac OS 10.15.</p>

<p>This is my favorite feature in iOS 13. Being able to sign in with the option of privacy. Why is that? Well if you use this feature in your app, your user will be able to use a dummy name and a garbage email address. The garbage email address generated by Apple will forward emails to the email associated with the user’s Apple ID. It’s not necessarily the user’s @icloud.com email. It could be his gmail. And of course, the user doesn’t have to change his name to something else and he can opt to use the Apple associated email. As of now, the only information this feature can use are full name and email.</p>

<p>All the user really has to do, if privacy isn’t the top concern, is click continue with password and then enter the password for your Apple ID. Once the user is done, click <code class="highlighter-rouge">continue</code> and voila!</p>

<p>So here’s how to do that with UIKit in Swift:</p>

<p>Go to signing and capabilities -&gt; add Capability -&gt; Sign In with Apple</p>

<p>import AuthenticationServices in two files, in the model and view controller.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// User.swift // Model
struct User {
    let id: String
    let firstName: String
    let lastName: String
    let email: String

    init(credentials: ASAuthorizationAppleIDCredential) {
        self.id = credentials.user
        self.firstName = credentials.fullName?.givenName ?? ""
        self.lastName = credentials.fullName?.familyName ?? ""
        self.email = credentials.email ?? ""
    }
}
</code></pre></div></div>

<p>Notice that only credentials.user is non-optional, and that’s because it is the only guaranteed thing to come out of this. At this point, we don’t know yet what is defined in the scope of what we want to get from our User.</p>

<p>Now let’s add the sign in button, though Apple has already got us covered on this. It already has its own height. You can’t manually add this on your storyboard, so you’ll have to programmatically code it and programmatically key in the constraints as well. But basically, this is what you’ll need to create the sign in button:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>let appleButton = ASAuthorizationAppleIDButton()
appleButton.translatesAutoresizingMaskingIntoConstraints = false
appleButton.addTarget(self, action: #selector(didTapAppleButton), for: .touchUpInside)
view.addSubview(appleButton)
</code></pre></div></div>

<p>That’s basically what you’ll need to make the button appear. Now let’s make it functional</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>@objc func didTapAppleButton() {
    let provider = ASAuthorizationAppleIDProvider()
    let request = provider.createRequest()
    request.requestScopes = [.fulName, .email]
		
    let controller = ASAuthorizationController(authorizationRequests: [request])
    controller.delegate = self
    controller.presentationContextProvider = self
    controller.performRequest()
}
</code></pre></div></div>

<p>The next thing to do is to extend from two delegates: <code class="highlighter-rouge">ASAuthorizationControllerDelegate</code> and <code class="highlighter-rouge">ASAuthorizationControllerPresentationContextProviding</code>.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>extension ViewController: ASAuthorizationControllerPresentationContextProviding {
    func presentationAnchor(for controller: ASAuthorizationController) -&gt; ASPresentationAnchor {
        return view.window!
    }
}

extension ViewController: ASAuthorizationControllerDelegate, didCompleteWithAuthorization authorization: ASAuthorization) {
    switch authorization.credential {
    case let credentials as ASAuthorizationAppleIDCredential:
        let user = User(credentials: credentials)
        performSegue(withIdentifier: "goToHome", sender: user)
    default: break
    }
}
</code></pre></div></div>

<p>That’s pretty much all you have to do to get <code class="highlighter-rouge">Sign In with Apple</code> working, basically.</p>

<p>Now, you may have heard, if you watched Kilo Loco’s tutorial, about an autologin which I haven’t seen him done a tutorial on it. It would be just like checking if the credential exists or not. I looked it up and here it goes:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>let appleIDProvider = ASAuthorizationAppleIDProvider()
appleIDProvider.getCredentialState(forUserID: userIdentifier) { (credentialState, error) in
    switch credentialState {
    case .authorized:
        // The Apple ID credential is valid. Show Home UI Here
        break
    case .revoked:
        // The Apple ID credential is revoked. Show SignIn UI Here.
        break
    case .notFound:
        // No credential was found. Show SignIn UI Here.
        break
    default:
        break
    }
}
</code></pre></div></div>

<p>If you want to go over sending your users some email, then you’ll have to configure it further inside your <a href="https://developer.apple.com/account/resources/services/configure">Apple Developer Account</a>.</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/vuygdr0EcGM" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>

:ET