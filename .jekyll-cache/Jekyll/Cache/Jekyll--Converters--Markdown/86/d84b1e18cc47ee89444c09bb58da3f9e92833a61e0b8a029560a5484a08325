I"Á<p>Static is like creating a global variable. Youâ€™ll see what I mean when youâ€™ve watched Sean Allenâ€™s video tutorial.</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/s2E5hVxQAZQ" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>

<p>Thereâ€™s just one hiccup here that might confuse the newbies. Sean used the term <code class="highlighter-rouge">Type</code> and the structâ€™s name interchangeably.</p>

<p>Letâ€™s have at it one more time:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>struct Video {
    static let creator = "iOS Junkie"
    
    var title: String
    var viewCount: Int
}

let tutorial = Video(title: "Static", viewCount: 1000)
</code></pre></div></div>

<p>The <code class="highlighter-rouge">Type</code> mentioned by Sean is the <code class="highlighter-rouge">Video</code> struct, which owns the creator. Say you access the creator via <code class="highlighter-rouge">Video.creator</code> without creating a <code class="highlighter-rouge">Video()</code> object, then it is a <code class="highlighter-rouge">type</code> and not an <code class="highlighter-rouge">instance</code> like tutorial. <code class="highlighter-rouge">tutorial</code> is assigned an instance of <code class="highlighter-rouge">Video()</code> object.</p>

<p>If youâ€™re curious whether <code class="highlighter-rouge">title</code> can be accessed this like this <code class="highlighter-rouge">Video.title</code>, then no. Even if it is pre-initialized a value, it will give out an error saying: <code class="highlighter-rouge">Instance member 'title' cannot be used on type 'Helper'</code>.</p>

<p>Youâ€™ll want to use static for a reason like you might not want to create an object to access its properies or methods making it possible to directly access the struct <code class="highlighter-rouge">Vlog</code>â€™s properties without creating an object. Static can also be applied to a method, which allows you to do something like <code class="highlighter-rouge">Video.play()</code>.</p>

<p>Itâ€™s also important to note that you can replace the creatorâ€™s value just by assigning it a new value this way:</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Video.creator = "Sean Allen"
</code></pre></div></div>

<p>The next time you access <code class="highlighter-rouge">Video.creator</code> or create an object with <code class="highlighter-rouge">Video()</code>, the creator will be <code class="highlighter-rouge">Sean Allen</code> by then.</p>

<p>Now that weâ€™re talking about static, thereâ€™s another way to access computed properties and methods of a construct without making an object. This is from Kilo Loco:</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/CV0czLueGeI" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>class Helper {
    // Static - allowed in structs and classes
    static var staticStoredProperty = "Static Stored Property"
    static var staticComputedProperty: String {
        return "Static computed property"
    }
    
    static func staticMethod() {
        print("Static Method")
    }
    
    // Class - only allows within classes, not structs
    class var classComputedProperty: String {
        return "Class computed property"
    }
    
    class func classMethod() {
        print("class method")
    }
}

class SubHelper : Helper {
    override class var classComputedProperty: String {
        return "subClassed computed property"
    }
    
    override class func classMethod() {
        print("subclassed method")
    }
}
</code></pre></div></div>

<p>Aside from <code class="highlighter-rouge">static</code>, you can use <code class="highlighter-rouge">class</code> in exchange. No! Not the class construct. Iâ€™m talking about class type. It works almost similarly to static. However, you cannot store a property like you would with <code class="highlighter-rouge">static</code>. With <code class="highlighter-rouge">class</code>, you can do something that <code class="highlighter-rouge">static</code> too canâ€™t do. You can override computed properties and methods as you can see inside the the <code class="highlighter-rouge">SubHelper</code> class.</p>

<p>It is important to note that you cannot use the <code class="highlighter-rouge">class</code> type inside a <code class="highlighter-rouge">struct</code>, only inside classes.</p>

<p>These are all valid ways to access properties and methods given the code above:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Helper.staticStoredProperty
Helper.staticComputedProperty
Helper.staticMethod()

Helper.classComputedProperty
Helper.classMethod()

SubHelper.classComputedProperty
SubHelper.classMethod()
</code></pre></div></div>
:ET