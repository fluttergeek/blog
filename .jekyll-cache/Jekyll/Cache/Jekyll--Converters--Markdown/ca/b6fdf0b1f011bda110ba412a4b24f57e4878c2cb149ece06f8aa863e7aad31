I"é<p>First of all, thanks to Scott Smith for helping me understand this. I know it can be another learning curve to start learning SwiftUI if youâ€™ve only begun diving into becoming an iOS developer. Itâ€™s daunting at first, but I hope it can be simple too for many newbies. Now, I havenâ€™t gotten my hands on Mac OS Catalina yet, so I canâ€™t actually demonstrate my own version of this tutorial properly if I canâ€™t show you the canvas, which isnâ€™t available in Mojave yet, myself.</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/7sxdhunvSCg" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>

<p>To make a table, add the <code class="highlighter-rouge">List()</code>  in your ContentView</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>struct ContentView : View {

	@State var data = ["Stevens", "Chloe", "Frank"]
	
	var body: some View {
		List(data, id: \.self) { item in
			CustomRow(name: item)
		}
	}
}
</code></pre></div></div>

<p>The id here is what confused me as a beginner. How Scott wrote and explained it is that <code class="highlighter-rouge">\.self</code> is meant to give identification automatically to each string from <code class="highlighter-rouge">data</code> itself. If you created a more comlex data structure, then youâ€™ll probably just have to specify the <code class="highlighter-rouge">id</code> in that structure and assign it a value of <code class="highlighter-rouge">UUID()</code>, which returns  unique id number.  <code class="highlighter-rouge">@State</code> on the other hand is something that will notify if there are any changes in the <code class="highlighter-rouge">data</code> array and update whichever component is using that variable. The <code class="highlighter-rouge">item</code> represents each item in the <code class="highlighter-rouge">data</code> array and it is being passed as an argument to another struct, <code class="highlighter-rouge">CustomRow</code>. Itâ€™s pretty self explainable what can be done next to create the table cell here. We only have to put in the components we need to complete a single cell in this struct.</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>struct CustomRow : View {
	var name: String
	
	var body: some View {
		Text(name)
	}
}
</code></pre></div></div>

<p>If we didnâ€™t need to create a custom table cell, we need not create the <code class="highlighter-rouge">CustomRow</code> struct and just use <code class="highlighter-rouge">Text(item)</code> instead. In the body of our <code class="highlighter-rouge">CustomRow</code> is where you can throw in all the components youâ€™re going to need.</p>

<p>So, I thought to myself. That wasnâ€™t daunting at all. You no longer have to specify how many sections and rows, no need to get the cell identifier off from the storyboard, which reduces a hell lot of code to write. Itâ€™s just that all UI designs you might have in mind will now have to be written in code which sucks.</p>

<p>If you went on with the video tutorial, you might want some answers regarding @ObjectBinding and how it works. Hereâ€™s my <a href="/blog/state-to-objectbinding-modifier/">explanation</a>.</p>

:ET