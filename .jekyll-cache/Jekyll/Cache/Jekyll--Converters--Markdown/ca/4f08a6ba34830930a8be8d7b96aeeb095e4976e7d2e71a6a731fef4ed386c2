I"|<p>This is just a brief insight on why I prefer using Firestore. At first, I was hesitant to dive into Firestore, because I thought there wasn’t really much difference. I saw videos and tutorials of Firestore and it baffled me even more. So, I stayed with Firebase Realtime Database for a little long while, until I started with another Xcode project. I delved into why Firestore might be a better fit.</p>

<p>Initially, all I understood was Firebase RD will charge you depending on bandwidth usage, while Firestore will charge on writes and reads. I was intimidated by that. The key is to make the writes and reads as minimal as possible to lessen the cost.</p>

<p>In my previous personal project, I used Firebase RD. I have a web app for it and iOS app. Both coded by me. I was wondering why it always took so long to read from Firebase. Then I realized, I created a tree structure and whenever I tried to access the root’s value, it grabs all the branches along with it making my succeeding read queries redundant. It loads a very heavy amount of information as my database grew. That’s how I came to a decision to start using Firestore.</p>

<p>Collections. Documents. You must’ve read those before. It’s confusing, I know. That’s how Firestore works. Think of it this way. <code class="highlighter-rouge">Collections</code> are Folders, and <code class="highlighter-rouge">Documents</code> are files that can contain a pointer to a sub Collection. Documents contain the attributes and its values. Collections only contain Documents.</p>

<p>For example:</p>

<ul>
  <li>Customer (<code class="highlighter-rouge">Collection</code>)
    <ul>
      <li>Jane (<code class="highlighter-rouge">Document</code>)
        <ul>
          <li>address: “In the woods”</li>
          <li>
            <p>age: 16</p>
          </li>
          <li>Orders (sub <code class="highlighter-rouge">Collection</code>)
            <ul>
              <li>2019-1-19 (<code class="highlighter-rouge">Document</code>)
                <ul>
                  <li>item: “Pizza”</li>
                </ul>
              </li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<p>I hope you see the pattern now. <code class="highlighter-rouge">Collections</code> always contain <code class="highlighter-rouge">Documents</code>, and <code class="highlighter-rouge">Documents</code> can contain <code class="highlighter-rouge">Collections</code>.</p>

<p>What makes it better than Firebase DB?</p>

<p>Well, whenever you reference to collection(“<code class="highlighter-rouge">Customer</code>”).document(“<code class="highlighter-rouge">Jane</code>”), you won’t be including <code class="highlighter-rouge">Orders</code> in your read. Thereby, reducing the load. I guess you can say it’s faster this way. You only get to access the <code class="highlighter-rouge">address</code> and <code class="highlighter-rouge">age</code> of Jane. If you want to get her orders as well, then reference to collection(“<code class="highlighter-rouge">Customer</code>”).document(“<code class="highlighter-rouge">Jane</code>”).collection(“<code class="highlighter-rouge">Orders</code>”). You can loop through all her orders thereafter.</p>

<p>No matter how deep your tree becomes with Firestore, you won’t be able to directly access its sub collections and that cuts down a lot of loading time and heaviness.</p>
:ET