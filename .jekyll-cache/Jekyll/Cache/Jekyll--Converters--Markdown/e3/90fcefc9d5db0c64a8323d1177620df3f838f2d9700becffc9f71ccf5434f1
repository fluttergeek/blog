I"2<p>You donâ€™t want to use MapBox or GoogleMap? Me too. I donâ€™t want to pay for something that isnâ€™t going to be much different. For now, I donâ€™t see myself using their extra features, whatever those might be.</p>

<p>Iâ€™ve been looking for a workaround for this for a few months now. I must have overlooked this <a href="https://medium.com/@ortizfernandomartin/customize-mapkits-mkmapview-with-google-maps-styling-wizard-a5dcc095e19f">post</a> on Medium. Itâ€™s now an outdated solution, but I found a way for it to work. Thanks to Fernando MartÃ­n Ortiz for that <a href="https://medium.com/@ortizfernandomartin/customize-mapkits-mkmapview-with-google-maps-styling-wizard-a5dcc095e19f">post</a>.</p>

<p>Thereâ€™s this pod, made by Fernando himself, that you need to install.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pod "MapKitGoogleStyler"
</code></pre></div></div>

<p>Wherever youâ€™re using the map view, you need to import this library: <code class="highlighter-rouge">import MapKitGoogleStyler</code>. And this is the sample code that contains a single change from Fernandoâ€™s view controller that shows the map view.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import UIKit
import MapKit
import MapKitGoogleStyler

class ViewController: UIViewController {

    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view.
        
        guard let overlayFileURLString = Bundle.main.path(forResource: "overlay", ofType: "json") else {
                return
        }
        let overlayFileURL = URL(fileURLWithPath: overlayFileURLString)
        
        // After that, you can create the tile overlay using MapKitGoogleStyler
        guard let tileOverlay = try? MapKitGoogleStyler.buildOverlay(with: overlayFileURL) else {
            return
        }
        
        // And finally add it to your MKMapView
        mapView.addOverlay(tileOverlay)
    }

    func mapView(_ mapView: MKMapView, rendererFor overlay: MKOverlay) -&gt; MKOverlayRenderer {
            // This is the final step. This code can be copied and pasted into your project
            // without thinking on it so much. It simply instantiates a MKTileOverlayRenderer
            // for displaying the tile overlay.
            if let tileOverlay = overlay as? MKTileOverlay {
                return MKTileOverlayRenderer(tileOverlay: tileOverlay)
            } else {
                return MKOverlayRenderer(overlay: overlay)
            }
    }
}
</code></pre></div></div>

<p>You might run into an error because the pod is a bit outdated, but no worries. All you have to do is find that GoogleStyle.swift and replace it with <a href="https://github.com/iosjunkie/StyleMapKit/blob/master/StyleMapKit/GoogleStyle.swift">this</a>.</p>

<p>Notice that we need a json file named <code class="highlighter-rouge">overlay</code>. Itâ€™s where our themeâ€™s color scheme lies, but make sure youâ€™ve configured the <code class="highlighter-rouge">json</code> file this way. Otherwise, your json will not be found by <code class="highlighter-rouge">Bundle.main.path(forResource: "overlay", ofType: "json") </code>.</p>

<p><img src="/blog/assets/images/Screen%20Shot%202019-10-04%20at%209.22.14%20PM.png" alt="json" /></p>

<p>You may be wondering, where do I get such theme? Did I make those myself?</p>

<p>No, silly! I copied that JSON file. Thereâ€™s actually tons of those themes out there. I just got mine from <a href="https://snazzymaps.com/style/282895/xemeneies-pou">Snazzy Maps</a>.</p>

:ET