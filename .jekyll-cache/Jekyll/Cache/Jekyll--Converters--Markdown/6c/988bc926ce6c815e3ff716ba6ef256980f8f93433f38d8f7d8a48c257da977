I"…<p>This topic is not about Local Notifications or Push Notifications. It is about creating triggers. This is a straightforward snippet of how you call a trigger or the one-liner that notifies the observer:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// Trigger/Notifier
NotificationCenter.default.post(name: NSNotification.Name.init("done"), object: nil)
</code></pre></div></div>

<p>This will look for an observer that will allow you to send this trigger an action. It is looking for an observer named <code class="highlighter-rouge">done</code>. Letâ€™s create that too:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// Observer
NotificationCenter.default.addObserver(self, selector: #selector(sortAndStopLoading(n:)), name: NSNotification.Name.init("done"), object: nil)
</code></pre></div></div>

<p>Now this is something youâ€™d probably find in the <code class="highlighter-rouge">viewDidLoad</code> of your ViewCotroller. Just to create an observation to catch the trigger with the name <code class="highlighter-rouge">done</code> and provides an action when the trigger has been called. Letâ€™s create that action too:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// Action
@objc func sortAndStopLoading(n: NSNotification) {
        done += 1
        
        if done == 2 {
            print("reached")
            self.sales = self.sales.sorted(by: {($0["number"] as! Int) &gt; ($1["number"] as! Int)})
            self.stopLoading()
        }
    }
</code></pre></div></div>

<p>Never mind the content of my function. What is important here is you know how the selectorâ€™s given function will actually look like. If you were wondering what is inside my function, it is simply just waiting for the trigger to call this function two times from maybe two different sources of thread that call the same trigger. When both threads are <code class="highlighter-rouge">done</code>, then we can sort the arrayâ€™s contents and tuck away the loader image.</p>

<p>If your ViewController is done <code class="highlighter-rouge">observing</code>, and we disappear from this view or something, we should remove this observer like so:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>deinit {
    NotificationCenter.default.removeObserver(self, name: NSNotification.Name.init("done"), object: nil)
}
</code></pre></div></div>

<p>or like this</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>override func viewDidDisappear(_ animated: Bool) {
    NotificationCenter.default.removeObserver(self, name: NSNotification.Name.init("done"), object: nil)
}
</code></pre></div></div>

<p>Donâ€™t you know? Thereâ€™s another way to make an observer that does not involve calling another function to make an action <code class="highlighter-rouge">action</code>. It calls the action inside its closure:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>NotificationCenter.default.addObserver(forName: NSNotification.Name(rawValue: "done"), object: nil, queue: .main) { [weak self] (notification) in
     done += 1
        
     if done == 2 {
        print("reached")
        self.sales = self.sales.sorted(by: {($0["number"] as! Int) &gt; ($1["number"] as! Int)})
        self.stopLoading()
     }
}
</code></pre></div></div>
:ET