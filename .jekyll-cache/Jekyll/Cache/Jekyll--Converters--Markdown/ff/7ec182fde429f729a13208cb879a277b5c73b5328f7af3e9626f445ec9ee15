I"9<p>This is a brief explanation for newbies. It’s because when I was still a newbie, I didn’t really understand how or when to use either of these two. I never touched them at all. If you want a more thorough explanation on this, check out the <a href="https://docs.swift.org/swift-book/LanguageGuide/OptionalChaining.html">Swift Language Guide</a>.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>if john.residence?.printNumberOfRooms() != nil {
    print("good")
} else {
    print("bad")
}
</code></pre></div></div>

<p>Both if and guard checks whether the value of a variable could be nil. They are interchangeable depending on the implementation. Let’s start with the code above. This is a primitive way of checking whether a variable/method is or returns <code class="highlighter-rouge">nil</code>. It is closer to how <code class="highlighter-rouge">guard</code> works than <code class="highlighter-rouge">if let</code>.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>if let firstRoomName = john.residence?[0].name {
    print(firstRoomName)
} else {
    print("bad.")
}
</code></pre></div></div>

<p>It is important to note here that <code class="highlighter-rouge">if let</code> only allows you to acces the new variable <code class="highlighter-rouge">firstRoomName</code> inside the first bracket. That is if  john.residence?[0].name <code class="highlighter-rouge">optional</code> assigns a non-nil value in our new variable.</p>

<p>Outside this <code class="highlighter-rouge">if let</code> conditional, <code class="highlighter-rouge">firstRoomName</code> cannot be accessed.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>guard let firstRoomName = john.residence?[0].name else {
    print("bad.")
    return
}

print(firstRoomName)
</code></pre></div></div>

<p><code class="highlighter-rouge">guard let</code> is just a smart way of making sure a new variable, <code class="highlighter-rouge">firstRoomName</code>, will not be accessible anywhere if it is <code class="highlighter-rouge">nil</code>. If <code class="highlighter-rouge">firstRoomName</code> happens to be assigned a <code class="highlighter-rouge">nil</code> value, then “bad” will print and will escape the function where this piece of conditional is located, never allowing to pass <code class="highlighter-rouge">firstRoomName</code> to anyone who wants to access its value. The code will not be able to reach the <code class="highlighter-rouge">print</code> line anymore.</p>

<p>However, if <code class="highlighter-rouge">john.residence?[0].name</code> hold say a string value, then all is good. <code class="highlighter-rouge">firstRoomName</code> will now have an unwrapped value of <code class="highlighter-rouge">john.residence?[0].name</code>.</p>

:ET