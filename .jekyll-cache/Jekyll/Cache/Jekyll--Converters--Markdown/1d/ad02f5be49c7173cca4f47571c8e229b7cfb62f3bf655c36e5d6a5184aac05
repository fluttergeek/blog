I"ñ<p>Letâ€™s get one thing straight now baby. Local notifications is not the same as <code class="highlighter-rouge">Push</code>/<code class="highlighter-rouge">Remote</code> notifications. It is also not the same as the Notification-Observer relationship which I will discuss <a href="/blog/notification-and-observer-the-basics/">next</a>. They differ because local notifications donâ€™t need triggers coming from outside the app. Either way, youâ€™ll still need the <code class="highlighter-rouge">UNUserNotificationCenter</code>, and for that, you need to import <code class="highlighter-rouge">UserNotifications</code>. This is usually used in scheduling apps like alarm and todo-list.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// AppDelegate.swift
import UserNotifications

@UIApplicationMain
class AppDelegate: UIResponder, UIApplicationDelegate {

    var window: UIWindow?

    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -&gt; Bool {
        // Override point for customization after application launch.
        
        if #available(iOS 10.0, *) {
          // For iOS 10 display notification (sent via APNS)
          UNUserNotificationCenter.current().delegate = self

          let authOptions: UNAuthorizationOptions = [.alert, .badge, .sound]
          UNUserNotificationCenter.current().requestAuthorization(
            options: authOptions,
            completionHandler: {_, _ in })
        } else {
          let settings: UIUserNotificationSettings =
          UIUserNotificationSettings(types: [.alert, .badge, .sound], categories: nil)
          application.registerUserNotificationSettings(settings)
        }
				
        return ApplicationDelegate.shared.application(application, didFinishLaunchingWithOptions: launchOptions)
    }
}
</code></pre></div></div>

<p>We must have this in our AppDelegate.swift first. It asks permission from the user if he is okay yo receiving notifications from your app. That request will allow <code class="highlighter-rouge">alert, badge, and sound</code>. Depending on how much you want the user to experience the notification. You can omit sound or the other types for example: <code class="highlighter-rouge">[.alert, .badge]</code>. Next is the fun part, and you can choose to put it wherever your app needs it.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// 1. Preparing our notification content
let content = UNMutableNotificationContent()
content.title = "Hey kid"
content.body = "Where's your parents?"
content.sound = UNNotificationSound.default()
content.badge = 1

// 2. Preparing when our notification would fire
let date = Date().addingTimeInterval(5)
let dateComponents = Calendar.current.dateComponents([.year, .month, .day, .hour, .minute, .second], from: date)

// 3. Preparing what argument will trigger the notification to come up
let trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents, repeats: false)

// 4. Combining all the preparations into one request
let uuidString = UUID().uuidString
let request = UNNotificationRequest(identifier: uuidString, content: content, trigger: trigger)

// 5. Finally, execute the request
let center = UNUserNotificationCenter.current()
center.add(request) { (err) in
    guard err == nil else { return }
    // Whatever you want to do after firing that badass notification
}
</code></pre></div></div>

<h2 id="this-algorithm-is-broken-down-into-five-parts">This algorithm is broken down into five parts.</h2>
<ol>
  <li>Create the content. Thatâ€™s what the user can see in your notification.
    <ol>
      <li>The badge is the red circular thing on the top right corner of your appâ€™s icon with the number of how many notifications were fired up.</li>
    </ol>
  </li>
  <li>Setting when to fire up the notification. If you print them out, this is how theyâ€™ll look like:
    <ol>
      <li><code class="highlighter-rouge">"8 Oct 2019 at 2:53 AM"</code> // darw</li>
      <li><code class="highlighter-rouge">year: 2019 month: 10 day: 8 hour: 2 minute: 53 second: 26 isLeapMonth: false </code> // dateComponents</li>
      <li>You can create your date component this way to be more specific about the date: <code class="highlighter-rouge">DateComponents(year: year, month: month, day: day)</code></li>
    </ol>
  </li>
  <li>Create a trigger and add the <code class="highlighter-rouge">when</code> to it. You can make it repeat its time interval by setting <code class="highlighter-rouge">repeat</code> to true.</li>
  <li>Itâ€™s possible that there may be many requests of triggers, hence we needed that <code class="highlighter-rouge">id</code>. UUID() is one hell of a one liner that can give you a random string. You can use it anywhere actually. It gives off something like this: <code class="highlighter-rouge">"31A7BADF-93F8-40A0-B642-DEDE7BD6179B\n"</code> if you print it.</li>
  <li>Finally we may now make the request appear more tangible and we need the current instance of our notification center to allow such a thing to happen.</li>
</ol>

<h2 id="to-add-buttons-on-your-notification">To add buttons on your notification</h2>
<p><img src="https://www.appboy.com/blog/wp-content/uploads/2017/05/Push-Action-Buttons-Example-4-300x169.png" alt="buttons" /></p>

<ol>
  <li>Add something like this to step 1: <code class="highlighter-rouge">content.categoryIdentifier = "alarm"</code></li>
  <li>Add something like this before step 5:
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>let show = UNNotificationAction(identifier: "show", title: "Tell me moreâ€¦", options: .foreground)
let category = UNNotificationCategory(identifier: "alarm", actions: [show], intentIdentifiers: [])
center.setNotificationCategories([category])
</code></pre></div>    </div>
  </li>
</ol>

<p>And make sure your ViewController conforms to <code class="highlighter-rouge">UNUserNotificationCenterDelegate</code> to catch the response coming off from the userâ€™s chosen action on the button.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>func userNotificationCenter(_ center: UNUserNotificationCenter, didReceive response: UNNotificationResponse, withCompletionHandler completionHandler: @escaping () -&gt; Void) {
    // pull out the buried userInfo dictionary
    let userInfo = response.notification.request.content.userInfo

    if let customData = userInfo["customData"] as? String {
        print("Custom data received: \(customData)")

        switch response.actionIdentifier {
        case UNNotificationDefaultActionIdentifier:
            // the user swiped to unlock
            print("Default identifier")

        case "show":
            // the user tapped our "show more infoâ€¦" button
            print("Show more informationâ€¦")
            break

        default:
            break
        }
    }

    // you must call the completion handler when you're done
    completionHandler()
}
</code></pre></div></div>

<p>Thanks to <a href="https://www.youtube.com/watch?v=JuqQUP0pnZY">CodeWithChris</a> and <a href="https://www.hackingwithswift.com/example-code/system/how-to-set-local-alerts-using-unnotificationcenter">Paul Hudson @twostraws</a> for making me understand how to actually do this.</p>

:ET