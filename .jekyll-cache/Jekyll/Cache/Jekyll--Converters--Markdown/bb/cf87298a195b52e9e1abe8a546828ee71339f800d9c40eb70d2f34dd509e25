I"4<p>Enums can be confusing for everybody, especially the newbies. I mean, why use those when you can just create variables and constructs. It does the same right? Some claim that they use enum to make their code type-safe, error free and easy to use. I guess that would be true if an app is becoming perplexingly complex.</p>

<p>In basic form, it can look like this:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>enum Directions {
    case north
    case south
    case east
    case west
}
 
 
// Defining multiple cases on a single line
 
enum Directions { 
    case north, south, east, west 
}
</code></pre></div></div>

<p>Cool, so what then? How and why would you want to use those? After calling forth <code class="highlighter-rouge">Directions.north</code> with a <code class="highlighter-rouge">print</code>, youâ€™ll just see this in the console <code class="highlighter-rouge">"north\n"</code>. You might wonder why is this even useful? Itâ€™s like calling a variable inside of a struct type.</p>

<p>Letâ€™s move on to Raw Values. We now know that cases will return a string. Aside from it, it can also return a <code class="highlighter-rouge">rawValue</code>. Just how do we do that? Itâ€™s easy, just inherit from a type by doing something like this: <code class="highlighter-rouge">enum Directions: Int</code>. Now when you print(<code class="highlighter-rouge">Directions.north.rawValue</code>), youâ€™ll get <code class="highlighter-rouge">0</code>. Itâ€™s just like Directions became some sort of array and north is indexed at <code class="highlighter-rouge">0</code>.  Hereâ€™s another example for that:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>enum AnimationCurve: Int {
    case easeInOut, easeIn, easeOut, linear
}

print(AnimationCurve.easeIn.rawValue)
// "1\n"
</code></pre></div></div>

<p>The next example will not be able to inherit from types to call <code class="highlighter-rouge">rawValues</code> from cases.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>enum Directions {
    case north(String)
    case south(latitude: Double, longitude: Double)
    case east(String)
    case west(String)
}
 
var digitalCompass = Directions.south(latitude: -120.83, longitude: 37.0)
print(digitalCompass)
</code></pre></div></div>

<p>When printed, this will give a value of <code class="highlighter-rouge">"south(latitude: -120.83, longitude: 37.0)\n"</code>. Neat huh? So, basically itâ€™s a string. Cases are a f***ing string with like no spaces because they are also variable names at the same time! Genius!</p>

<p>How do we get the values inside of the parenthesis? Is there some kind of rawValue mechanism we can use for this? As a matter of fact, there is! We can print a form of string from the values inside of these parentheses. If you trust me on this, we can print out <code class="highlighter-rouge">Latitude is 0.5, while longitude is 0.6</code> just by printing <code class="highlighter-rouge">print(Directions.south(latitude: 0.5, longitude: 0.6).description)</code>. We just have to extend this enum like itâ€™s some kind of construct and create a computed property, we chose to use the word <code class="highlighter-rouge">description</code> as you can see. It can be anything actually.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>extension Directions {
    var description: String {
        switch self {
        case .sorth(let direction):
            return direction
        case .south(let latitude, let longitude):
            return "Latitude is \(latitude), while longitude is \(longitude)"
        case .east(let isItReally):
            return "The direction is \(isItReally)"
        case .west(let westeros):
            return "King's landing is in \(westeros)"
        }
    }
}

print(Directions.south(latitude: 0.5, longitude: 0.6).description)
</code></pre></div></div>

<p>Thereâ€™s another way to simply do this without having to call the computed property <code class="highlighter-rouge">description</code> directly. We can inherit this extension from CustomStringConvertible, like this:</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>extension Directions: CustomStringConvertible {
    var description: String {
</code></pre></div></div>

<p>, but the computed property should be <code class="highlighter-rouge">description</code>. If you use another variable name instead of it, then you will not be able to use <code class="highlighter-rouge">CustomStringConvertible</code>â€™s feature.</p>

<p>Now all you have to do to get the same result is print out <code class="highlighter-rouge">Directions.south(latitude: 0.5, longitude: 0.6)</code> without the <code class="highlighter-rouge">description</code> after it.</p>

<p>Thatâ€™s the idea of how to return strings out of enums with parentheses. The <code class="highlighter-rouge">let latitude, let longitude</code> are just parameter names. If youâ€™ve noticed, it can actually be named anything too.</p>

<p>Now that we know how to work with enums. There are other things you can do with it too, like comparing complex enumâ€™s value to a similar type of enum. This is a tutorial by <code class="highlighter-rouge">KÃ¡roly Nyisztor</code> and it teaches just that.</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/XsXE3SlzpM4" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>

<p>Thanks to <a href="https://becodable.com/swift-enum/">BeCodable</a>, <a href="https://www.youtube.com/watch?v=XsXE3SlzpM4">KÃ¡roly Nyisztor</a> and <a href="https://www.avanderlee.com/swift/enumerations/">Antoine v.d. SwiftLee ðŸš€</a>. The examples come from their posts. Take your enums knowledge to the next level by clicking on their names, it links to their post about enums. Since my intention about this post is to just bridge the gap between beginners to learning the essence of enums, these guys will do you better with more examples and applications on how it really works.</p>

:ET