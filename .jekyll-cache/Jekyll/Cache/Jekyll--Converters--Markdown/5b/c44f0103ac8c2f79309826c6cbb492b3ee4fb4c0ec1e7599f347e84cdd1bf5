I"(<p>This is tested using Firebase Realtime Database, not with Firestore. Before all of these, I assume you have already been using the realtime database. More importantly, you already have the GoogleService-Info.plist in your Xcode project. It is important because it contains your bundle identifier. Without Firebase knowing your bundle identifier, you can’t proceed to enable Cloud messaging.</p>

<p>Let’s get this one thing straight. Push notification a.ka. Remote notification. We want to have a Push Notification on our device as a response to a change in the firebase database, and in order to do that, I’m using cloud functions. Cloud functions is a feature of Firebase that allows you to listen to change/s in the firebase database and trigger a response. The response we want is to send a notification. In Firebase’s term, cloud messaging. That’s a confusing term to interchange with <code class="highlighter-rouge">remote notification</code>. I know.</p>

<p>Install this pod libraries first in addition to your preinstalled libraries with Firebase.</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pod 'Firebase/Analytics'
pod 'Firebase/Core'
pod 'Firebase/Messaging'
</code></pre></div></div>

<p>In your Xcode project’s signing and capabilities, enable or add capabilities:</p>
<ol>
  <li>Background Modes -&gt; Remote Notifications</li>
  <li>Push Notifications</li>
</ol>

<p>Let’s create a certificate signing request by going to Keychain Access.</p>

<ol>
  <li>On the toolbar, click <code class="highlighter-rouge">Keychain Access</code> beside <code class="highlighter-rouge">File</code></li>
  <li>In this dropdown menu, Certificate Assistant -&gt; <code class="highlighter-rouge">Request a Certificate From a Certificate Authority</code></li>
  <li>Enter your credentials into the text fields and choose <code class="highlighter-rouge">Save to disk</code>.</li>
</ol>

<p>Then go to Apple Developer. For this, you need a paid developer account which costs $99.</p>

<ol>
  <li>Open <code class="highlighter-rouge">Certificates, Identifiers &amp; Profiles</code></li>
  <li>Navigate to <code class="highlighter-rouge">Identifiers</code></li>
  <li>Click on the current project you are working on.</li>
  <li>Beside the Push Notifications, click <code class="highlighter-rouge">Configure</code>.</li>
  <li>Depending on which environment you are, click <code class="highlighter-rouge">Create Certificate</code></li>
  <li><code class="highlighter-rouge">Choose a file</code> -&gt; Upload the CertificateSigningRequest.certSigningRequest you just created.</li>
  <li>Continue and download aps_development.cer.</li>
</ol>

<p>Once that is done, you will have a .cert file on your desktop. Now let’s convert that to .p12. Still, using the Keychain Access.</p>

<ol>
  <li>File -&gt; Import Items -&gt; Select your .cert file</li>
  <li>Drag that file to <code class="highlighter-rouge">System</code>, assuming you are in <code class="highlighter-rouge">login</code> in the <code class="highlighter-rouge">Keychains</code> sidebar.</li>
  <li>Drag it back from <code class="highlighter-rouge">System</code> to <code class="highlighter-rouge">login</code>. You now have a duplicate, but you’ll only need the most recent.</li>
  <li>Select <code class="highlighter-rouge">My Certificates</code> in the Category.</li>
  <li>Select the most recent certificate pertaining to your project, and right-click.</li>
  <li>Click Export “Apple Development IOS Push Services: your.project…”</li>
  <li>Make sure to export it in .p12 format.</li>
  <li>It will then ask you to create a password to protect this certficate. Give it one and click <code class="highlighter-rouge">ok</code>.</li>
</ol>

<p>In order to test this while under development, you need a Provisioning Profile for development to authorize your devices to run an app that is not yet published on the App Store.</p>
<ol>
  <li>Open <code class="highlighter-rouge">Certificates, Identifiers &amp; Profiles</code></li>
  <li>Select <code class="highlighter-rouge">Profiles</code></li>
  <li>Generate a Profile</li>
  <li>Select iOS App Development and continue</li>
  <li>Select your App ID and continue</li>
  <li>Select the iOS Development certificate of the App ID you have chosen in the previous step, then click Continue.</li>
  <li>Select the iOS devices that you want to include in the Provisioning Profile, then click Continue. Make sure to select all the devices you want to use for your testing.</li>
  <li>Name the provisioning profile whatever you want and generate.</li>
  <li>Download the provisioning profile and open it to install.</li>
  <li>If it crashes your Xcode, just go to your Xcode project settings -&gt; Signing &amp; Capabilities -&gt; Disable Automatically Manage Signing -&gt; Import the provisioning profile.</li>
</ol>

<p>To enable the cloud messaging feature, go to https://console.cloud.google.com/ -&gt; Search for your Firebase project and select it -&gt; <code class="highlighter-rouge">APIs and Services</code> -&gt; <code class="highlighter-rouge">+ ENABLE APIS AND SERVICES</code>-&gt; Search for <code class="highlighter-rouge">Firebase Cloud Messaging API</code> -&gt; click Enable.</p>

<p>In your Firebase console, navigate to <code class="highlighter-rouge">Project Settings</code> -&gt; <code class="highlighter-rouge">Cloud Messaging</code> -&gt; <code class="highlighter-rouge">iOS app configuration</code> -&gt; <code class="highlighter-rouge">APNs Certificates</code> -&gt; Upload the <code class="highlighter-rouge">.p12 file</code> here, then enter the password for this certificate.</p>

<p>That’s all you need for now to allow <code class="highlighter-rouge">Cloud Messaging</code> on your iOS device. It’s like a term for Remote Push Notifications. I was baffled at that at first.</p>

<p>Now this is the part where we detect changes in the firebase database. If you haven’t installed the <a href="https://firebase.google.com/docs/cli">firebase CLI</a> yet, please do so.</p>
<ol>
  <li>Create a directory where you want to put the cloud functions code. In my case, I created <code class="highlighter-rouge">triggers</code> directory under my Xcode project directory. <code class="highlighter-rouge">Laundry City/triggers</code></li>
  <li>‘cd triggers`</li>
  <li>In the terminal, type <code class="highlighter-rouge">firebase init functions</code>, but make sure you’re logged in with firebase cli.</li>
  <li>Choose javascript and type <code class="highlighter-rouge">y</code> as in yes to any remaining questions from the cli.</li>
  <li>Open index.js and create your function such as below:</li>
</ol>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// index.js
const functions = require('firebase-functions');
const admin = require('firebase-admin');

admin.initializeApp();

exports.sendNewChangesNotification = functions.database.ref('houses/{house}/items/{item}/').onWrite((change, context) =&gt; {

    var topic = "Serenity";
		
    // A message that contains the notification that devices will receive	
    var message = {
      notification: {
        title: 'New Quantity',
        body: change.after.val().product + ' now has ' + change.after.val().tentative + ' new items.'
      }
    };

    // Using Cloud Messaging to create notification
    return admin.messaging().sendToTopic(topic, message).then(function (response) {
        console.log('Successfully sent message:', response);
        return null;
    }).catch(function (error) {
        throw new Error("Error sending message:", error);
    });
})
</code></pre></div></div>

<p>First thing to note here is, you won’t start your <code class="highlighter-rouge">ref</code> with the Project ID.. Instead, the branch below it. The ones in the brackets are <code class="highlighter-rouge">ids</code>, which varies. This will detect any write or changes happening in that reference. It will catch the changes in the <code class="highlighter-rouge">change</code> parameter. Thereby, allowing access to the new tentative value in <code class="highlighter-rouge">change.after.val().tentative</code> from the reference <code class="highlighter-rouge">houses/1/items/2/tentative</code>. 1 and 2 here are just examples of IDs. <code class="highlighter-rouge">sendNewChangesNotification</code> is just a variable. You can change it however you like.</p>

<p>When everything is in place, go back to terminal and deploy it with <code class="highlighter-rouge">firebase deploy</code>. Now, you have a listener or a trigger whenever your items have been changed or added.</p>

<p>Your AppDelegate.swift should look like <a href="https://github.com/firebase/quickstart-ios/blob/master/messaging/MessagingExampleSwift/AppDelegate.swift">this</a>. This firebase sample is as instructed in the <a href="https://firebase.google.com/docs/cloud-messaging/ios/client">documentation</a>.</p>

<p>To send a notification, <code class="highlighter-rouge">admin.messaging.send</code> will do the trick. But you have to provide a <code class="highlighter-rouge">token</code>, <code class="highlighter-rouge">topic</code>, or a <code class="highlighter-rouge">condition</code>. <code class="highlighter-rouge">Token</code> is generated by the AppDelegate and is uploaded to Firebase automatically. If you specify a specific token, then only the device with that token will receive the notification. <code class="highlighter-rouge">Topic</code> is what its name suggests. To subscribe to a topic, add this to wherever you need to put in your Xcode project:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Messaging.messaging().subscribe(toTopic: "Serenity") { error in
          print("Subscribed to weather topic")
        }
</code></pre></div></div>

<p><code class="highlighter-rouge">Condition</code> can be something like you want to send this to notification to subscribers of more than one topic. For example: <code class="highlighter-rouge">"'Serenity' in topics || 'Manor' in topics"</code>. Further <a href="https://firebase.google.com/docs/cloud-messaging/ios/topic-messaging">documentation</a> about this.</p>

:ET