<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="http://iosjunkie.com/blog/feed.xml" rel="self" type="application/atom+xml" /><link href="http://iosjunkie.com/blog/" rel="alternate" type="text/html" /><updated>2020-02-17T05:06:51-08:00</updated><id>http://iosjunkie.com/blog/feed.xml</id><title type="html">Blog</title><subtitle>Demystifying complex instructions, tutorials, and a little bit more geared toward Flutter and iOS development or Swift stuff. Technical yet simple tips on how Flutter and iOS components work.</subtitle><entry><title type="html">Detect Image File Change | Crop It Then Replace Image To .png Using Javascript Node</title><link href="http://iosjunkie.com/blog/detect-image-file-change-crop-it-then-replace-image-to-png-using-javascript-node/" rel="alternate" type="text/html" title="Detect Image File Change | Crop It Then Replace Image To .png Using Javascript Node" /><published>2020-01-29T05:47:29-08:00</published><updated>2020-01-29T05:47:29-08:00</updated><id>http://iosjunkie.com/blog/detect-image-file-change-crop-it-then-replace-image-to-png-using-javascript-node</id><content type="html" xml:base="http://iosjunkie.com/blog/detect-image-file-change-crop-it-then-replace-image-to-png-using-javascript-node/">&lt;p&gt;The objective here is to grab an image that is recently been added to a particular folder. Give the user the ability to crop it with their own dimensions of choosing, then save that cropped image as a png. Lastly and optionally, delete the old image file from the system.&lt;/p&gt;

&lt;p&gt;To give some context, I’m using Vue, but obviously, you could do this on react as well.&lt;/p&gt;

&lt;p&gt;There are two libraries needed for this task:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://fengyuanchen.github.io/cropperjs/&quot; title=&quot;Cropperjs&quot;&gt;Cropperjs&lt;/a&gt; - as the name suggests&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/paulmillr/chokidar&quot; title=&quot;Chokidar&quot;&gt;Chokidar&lt;/a&gt; - use this to detect changes in the folder&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;First, we want to watch the &lt;code&gt;folder path&lt;/code&gt; where our image belongs. In this case, I’m checking when an image is added to that folder. Only the image that is to be added to that folder, and not the existing contents that are already in the folder.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;this.watcher = chokidar.watch(folderPath.replace(/\\/g, '/'), {
  ignored: /(^|[\/\\])\../, // ignore dotfiles
  persistent: true,
  ignoreInitial: true
}).on('add', (event, path) =&amp;gt; {
  if (event.match(/\.(jpeg|jpg|gif|png)$/) != null) {
    this.imageUrl = &quot;file://&quot; + event
    this.imageUrlPath = event
    this.imageHTML = `
        &amp;lt;img id=&quot;image&quot; src=&quot;${this.imageUrl}&quot; style=&quot;display: block;max-width: 100%;height: 600px;&quot;&amp;gt;
  }
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To show the image to the DOM, we must stipulate that this image does not come from our app’s static files folder by adding &lt;code&gt;file://&lt;/code&gt; before the path of the image’s location, which is the &lt;code&gt;event&lt;/code&gt;. But we don’t need that when we’re saving or deleting the image file, hence a different variable was created for those purposes.&lt;/p&gt;

&lt;p&gt;For some reason, we have to delay the cropper functionality from appearing, because inserting the img to our DOM probably took some time. But before all that, we must first have the cropper.min.js and cropper.min.css, which you’ll find &lt;a href=&quot;https://cdnjs.com/libraries/cropperjs&quot; title=&quot;Cropper CDN&quot;&gt;here&lt;/a&gt;, added to your HTML.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;setTimeout(() =&amp;gt; {
  const image = document.getElementById('image');
  image.addEventListener('cropend', () =&amp;gt; {
    var croppedImage = cropper.getCroppedCanvas().toDataURL()
    var base64Data = croppedImage.replace(/^data:image\/png;base64,/`, &quot;&quot;);

    if (!!this.watcher) this.watcher.close().then(() =&amp;gt; this.watcher = null )
    fs.writeFile(this.imageUrlPath.replace(/\.jpg$/i, &quot;.png&quot;), base64Data, 'base64', function (err) {
      if (err) {
        console.error(err)
      } else {
        console.log(&quot;Image has been saved&quot;)
      }
    });
  })
  const cropper = new Cropper(image);
}, 100)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So this whole thing here becomes active when I show a view allowing the user to crop the image. I grab the image by its ID, and added a listener to it every time a crop has happened, otherwise, it will detect every event that manifests when you’re still dragging the corners of the cropper. Get that base46 value of that image and assign it to &lt;code&gt;croppedImage&lt;/code&gt;. To save it as a picture, you must first remove &lt;code&gt;data:image/png;base64,&lt;/code&gt; string that is contained within the base64 string.&lt;/p&gt;

&lt;p&gt;Notice that &lt;code&gt;cropper&lt;/code&gt; is initialized after the event listener, but somehow it just works inside the &lt;code&gt;addEventListener&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Before saving it, we must first close the watcher to prevent it from detecting an image that we are about to add or save to that particular folder. Then we replace that image’s extension to png, if it’s a jpg, with our cropped image.&lt;/p&gt;

&lt;h4 id=&quot;optional&quot;&gt;OPTIONAL&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;fs.unlink(this.imageUrlPath, (err) =&amp;gt; {
  if (err) {
    this.imageUrl = this.imageUrl.replace(/\.jpg$/i, &quot;.png&quot;)
    console.error(err)
  } else {
    console.log(&quot;Image has been removed&quot;)
  }
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we want to delete the old .jpg file, then we simply call this &lt;code&gt;unlink&lt;/code&gt;. In my case, this is called when the view of where the cropping happens is put away.&lt;/p&gt;

&lt;p&gt;Oh and don’t forget to &lt;code&gt;const fs&lt;/code&gt;&lt;strong&gt;&lt;code&gt;=&lt;/code&gt;&lt;/strong&gt;&lt;code&gt;require('fs')&lt;/code&gt; before maneuvering files.&lt;/p&gt;</content><author><name>jules</name></author><category term="jpg" /><category term="png" /><category term="image" /><category term="node" /><category term="javascript" /><summary type="html">The objective here is to grab an image that is recently been added to a particular folder. Give the user the ability to crop it with their own dimensions of choosing, then save that cropped image as a png. Lastly and optionally, delete the old image file from the system.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://iosjunkie.com/blog/assets/images/Screen%20Shot%202020-01-28%20at%209.40.54%20AM.png" /></entry><entry><title type="html">FriendFace: Saving Nested Object In CoreData With SwiftUI</title><link href="http://iosjunkie.com/blog/friendface-saving-nested-object-in-coredata-with-swiftui/" rel="alternate" type="text/html" title="FriendFace: Saving Nested Object In CoreData With SwiftUI" /><published>2020-01-11T23:47:51-08:00</published><updated>2020-01-11T23:47:51-08:00</updated><id>http://iosjunkie.com/blog/friendface-saving-nested-object-in-coredata-with-swiftui</id><content type="html" xml:base="http://iosjunkie.com/blog/friendface-saving-nested-object-in-coredata-with-swiftui/">&lt;p&gt;There’s no &lt;code&gt;face&lt;/code&gt; image in this challenge, from 100 days of SwiftUI. I will only be discussing my codes. Thanks to Peter Barclay for his &lt;a href=&quot;https://github.com/websurgeon-hws/hws-FriendFace/tree/Day-61-End&quot; title=&quot;Github&quot;&gt;repo&lt;/a&gt;. I assure you I didn’t follow through his logic, but it helped me construct my own logic. Let me start by first showing you the &lt;code&gt;User&lt;/code&gt; model and the &lt;code&gt;Friend&lt;/code&gt; model.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;struct User: Codable, Identifiable {
    var id: UUID
    var name: String
    var age: Int16
    var company: String
    var friends: [Friend]
 }

struct Friend: Codable, Identifiable {
    var id: UUID
    var name: String
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The code below was placed inside my User struct:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;static func fetch() -&amp;gt; [User] {
        
        let cdUsers = User.fetchCoreData()
        
        var users: [User] = [User]() {
            didSet {
                if cdUsers.count == 0 {
                	// It is important to put this in the main thread,
                    // because I had an error without it.
                    DispatchQueue.main.async {
                        User.saveToCoreData(users: users)
                    }
                }
            }
        }
        
        if cdUsers.count &amp;gt; 0 {
        	// Users fetched from CoreData
            users = cdUsers
        } else {
        	// Fetching users from a JSON
            let url = URL(string: &quot;https://www.hackingwithswift.com/samples/friendface.json&quot;)
            let request = URLRequest(url: url!)
            
            let semaphore = DispatchSemaphore(value: 0)
            
            URLSession.shared.dataTask(with: request) { data, response, error in
                if let error = error {
                    fatalError(&quot;Network error: &quot; + error.localizedDescription)
                }
                guard let response = response as? HTTPURLResponse else {
                    fatalError(&quot;Not a HTTP response&quot;)
                }
                guard response.statusCode &amp;gt;= 200, response.statusCode &amp;lt; 300 else {
                    fatalError(&quot;Invalid HTTP status code&quot;)
                }
                guard let data = data else {
                    fatalError(&quot;No HTTP data&quot;)
                }
                
                if let decodedUsers = try? JSONDecoder().decode([User].self, from: data) {
                    users = decodedUsers
                    semaphore.signal()
                }
            }.resume()
            
            _ = semaphore.wait(wallTimeout: .distantFuture)
        }
        
        return users
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;While Peter’s solution was to show a List directly from a FetchedResults, I wanted to have one array of users to pull from both JSON and CoreData. This is how I fetched from CoreData without the property wrapper which is normally seen in the tutorials:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;static func fetchCoreData() -&amp;gt; [User] {
        let moc = (UIApplication.shared.delegate as! AppDelegate).persistentContainer.viewContext
        let request = NSFetchRequest&amp;lt;CDUser&amp;gt;(entityName: &quot;CDUser&quot;)
        request.returnsObjectsAsFaults = false
        var users = [User]()
        
        moc.performAndWait {
            let results: [CDUser] = try! request.execute()
            for user in results {
                var friends = [Friend]()
                for friend in user.friends!.allObjects as! [CDFriend] {
                    friends.append(Friend(id: friend.id!, name: friend.name!))
                }
                
                users.append(User(id: user.id!, name: user.name!, age: user.age, company: user.company!, friends: friends))
            }
        }
        return users
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is the most crucial part of my code because it took me two days to finally arrive at an answer on how to save a relative of an object:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;static func saveToCoreData(users: [User]) {
        let moc = (UIApplication.shared.delegate as! AppDelegate).persistentContainer.viewContext
        moc.performAndWait {
            users.forEach { user in
                let cdUser = CDUser(context: moc)
                cdUser.id = user.id
                cdUser.name = user.name
                cdUser.age = Int16(user.age)
                cdUser.company = user.company
                
                user.friends.forEach { friend in
                    let cdFriend = CDFriend(context: moc)
                    cdFriend.id = friend.id
                    cdFriend.name = friend.name
                    // This line saved me in this challenge
                    cdFriend.user = cdUser
                }
            }
        }
        
        if moc.hasChanges {
            try? moc.save()
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The problem was that I couldn’t see the friends of &lt;code&gt;cdUser&lt;/code&gt; if I did it this way for each iteration:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cdUser.friends.adding(cdFriend)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cdUser.friends = friends // an array of CDFriend
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I looked into many Stackoverflow inquiries regarding this, but I don’t think there’s a specific question about how to go about it or maybe that I didn’t type the correct keyword, but then I did find one and it happens to be the solution I just showed you right now.&lt;/p&gt;</content><author><name>jules</name></author><category term="save" /><category term="storing" /><category term="object" /><category term="nested" /><category term="coredata" /><category term="swiftui" /><summary type="html">There’s no face image in this challenge, from 100 days of SwiftUI. I will only be discussing my codes. Thanks to Peter Barclay for his repo. I assure you I didn’t follow through his logic, but it helped me construct my own logic. Let me start by first showing you the User model and the Friend model.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://iosjunkie.com/blog/assets/images/codable-json-swift-how-to-770x400-1.jpg" /></entry><entry><title type="html">How’s 100 Days of SwiftUI</title><link href="http://iosjunkie.com/blog/how-s-100-days-of-swiftui/" rel="alternate" type="text/html" title="How's 100 Days of SwiftUI" /><published>2019-12-29T05:39:54-08:00</published><updated>2019-12-29T05:39:54-08:00</updated><id>http://iosjunkie.com/blog/how-s-100-days-of-swiftui</id><content type="html" xml:base="http://iosjunkie.com/blog/how-s-100-days-of-swiftui/">&lt;p&gt;Like most Udemy courses, this course also begins by introducing Swift. Hence, Swift UI begins at a later part like Day 16. So that makes it 84 days haha.&lt;/p&gt;

&lt;h4 id=&quot;what-encouraged-me-to-take-on-this-course&quot;&gt;What encouraged me to take on this course?&lt;/h4&gt;

&lt;p&gt;Well, I’ve tried Udemy a couple of times already. Believe me, I also thought of going there again, so then, I looked at the available SwiftUI courses. I was looking for a course that also teaches maps because it has been difficult to find a standard way of building an app with mapkit. Though, there’s a separate course on Udemy for that but in UIKit. I found none. Probably not worth spending a dime on a course that doesn’t involve an essential feature that is commonly used by apps like Uber and Facebook.&lt;/p&gt;

&lt;p&gt;I’ve been hearing about this course on YouTube. Saw it on Reddit as well. I initially thought that it’s time-consuming maybe. Building an app every day for 100 days, maybe?&lt;/p&gt;

&lt;p&gt;It turns out to be like Udemy without having to sign up, but also without a certificate of completion. I guess all you can do is post your projects on Github when you’re done making adjustments that are suggested at the end of every project. It’s not like you have to make a project too, you can simply just watch the video tutorials or read the transcript below it that reads just like a blog article. So you can either watch or read this course, up to you. The advantage is, you can copy-paste whatever is on the video as well.&lt;/p&gt;

&lt;p&gt;Last but not least, you can pace really fast if you’re just reading at the codes and you already understand just by looking at it, so you can move on to a different level of difficulty.&lt;/p&gt;

&lt;h4 id=&quot;how-fast-could-you-do-it&quot;&gt;How fast could you do it?&lt;/h4&gt;

&lt;p&gt;It’s only been the 2nd day of my journey, and I’ve already done Day 16 - Day 26. Uploaded 2 challenges to Github. I don’t necessarily do the little projects, because it seemed too simple, but I did upload 1 project, for now. I’ve been slacking mostly, so imagine what you can do. I have no fixed time allotment in this course. I don’t have a job. I sleep during the daytime and maybe go someplace else. I do this all at night until dawn, but with distractions like YouTube and playing MU Origin 2.&lt;/p&gt;

&lt;h4 id=&quot;would-i-recommend-you-to-do-the-same&quot;&gt;Would I recommend you to do the same?&lt;/h4&gt;

&lt;p&gt;I have just begun taking it, but as far as I’ve been now, I think I do recommend it. Just build a project on your own after finishing the course and publish it on Github to compensate for not having a certificate of completion.&lt;/p&gt;

&lt;p&gt;There’s also no way you can prove you’ve taken the course, even when you’re done answering the quizzes, which I did:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/Screen Shot 2019-12-29 at 9.37.18 PM.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;do-i-think-swiftui-is-better-than-uikit&quot;&gt;Do I think SwiftUI is better than UIKit?&lt;/h4&gt;

&lt;p&gt;The experience of SwiftUI and Flutter turns out to be really different. I thought it was similar, but now, I’m so much at ease with SwiftUI. It makes a lot of things in UIKit simpler.&lt;/p&gt;

&lt;p&gt;At first, I was clinging on to the idea that codes are longer when written in SwiftUI because you have to write every bit of modifier (attributes as we know it) from the top of our heads, while we have the attributes inspector in Swift only. If you’ve tried HTML or CSS, then it kinda feels just like that in the end. The modifiers you write will be like writing from your heart as you get accustomed to it. The memorizing part is not that steep even. You’ll soon notice how fast it all came together. So, don’t you fear the learning curve.&lt;/p&gt;

&lt;p&gt;Also, it is significantly less code writing compared to Swift only with or without a storyboard.&lt;/p&gt;</content><author><name>jules</name></author><category term="review" /><category term="100 days" /><category term="paul hudson" /><category term="swiftui" /><summary type="html">Like most Udemy courses, this course also begins by introducing Swift. Hence, Swift UI begins at a later part like Day 16. So that makes it 84 days haha.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://iosjunkie.com/blog/assets/images/Screen%20Shot%202019-12-29%20at%209.41.44%20PM.png" /></entry><entry><title type="html">Constraints, Dimensions and Font Sizes</title><link href="http://iosjunkie.com/blog/constraints-dimensions-and-font-sizes/" rel="alternate" type="text/html" title="Constraints, Dimensions and Font Sizes" /><published>2019-12-26T05:51:02-08:00</published><updated>2019-12-26T05:51:02-08:00</updated><id>http://iosjunkie.com/blog/constraints-dimensions-and-font-sizes</id><content type="html" xml:base="http://iosjunkie.com/blog/constraints-dimensions-and-font-sizes/">&lt;p&gt;Aside from the dimensions from the image above, I’m sure you are also concerned with dimensions of inner components of the storyboard. I would like to share more of these dimensions. I also admit that I didn’t make the header image, but I did make the images down below, myself. Most of these are inspired by a course by &lt;a href=&quot;https://www.udemy.com/user/gwinyai-nyatsoka/&quot;&gt;&lt;strong&gt;Gwinyai Nyatsoka&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;featured-collection-view-cell&quot;&gt;Featured Collection View Cell&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/Screen Shot 2019-12-26 at 10.46.37 PM-1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s say we want to achieve the collection cell inside the red annotation, these are its dimensions:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/Top Location Collection View Cell-1.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The attributes for the cell’s shadow are as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mainView.layer.shadowOpacity = 0.7
mainView.layer.shadowColor = UIColor(red: 0, green: 0, blue: 0, alpha: 0.25).cgColor
mainView.layer.shadowRadius = 5
&lt;/code&gt;&lt;/pre&gt;</content><author><name>jules</name></author><category term="storyboard" /><category term="xcode" /><category term="swift" /><summary type="html">Aside from the dimensions from the image above, I’m sure you are also concerned with dimensions of inner components of the storyboard. I would like to share more of these dimensions. I also admit that I didn’t make the header image, but I did make the images down below, myself. Most of these are inspired by a course by Gwinyai Nyatsoka.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://iosjunkie.com/blog/assets/images/20eeb9d43e06b120b50b494a2052f803.jpg" /></entry><entry><title type="html">Cannot Delete or Merge Old Volume In Partition In Catalina</title><link href="http://iosjunkie.com/blog/cannot-delete-or-merge-old-volume-in-partition-in-catalina/" rel="alternate" type="text/html" title="Cannot Delete or Merge Old Volume In Partition In Catalina" /><published>2019-12-24T02:11:17-08:00</published><updated>2019-12-24T02:11:17-08:00</updated><id>http://iosjunkie.com/blog/cannot-delete-or-merge-old-volume-in-partition-in-catalina</id><content type="html" xml:base="http://iosjunkie.com/blog/cannot-delete-or-merge-old-volume-in-partition-in-catalina/">&lt;p&gt;This post is from StackExchange, coming from a user named &lt;a href=&quot;https://apple.stackexchange.com/questions/235080/cannot-delete-or-merge-old-boot-camp-partition-in-el-capitan/255088#255088&quot; title=&quot;StackExchange&quot;&gt;Charles&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The answer is so simple. Forget terminals and internet recovery. Here’s what you gotta do:&lt;/p&gt;

  &lt;ol&gt;
    &lt;li&gt;Format the BOOTCAMP-partition through disk utility to MS-DOS (FAT)&lt;/li&gt;
    &lt;li&gt;Press cmd + space and write bootcamp-assistant, open bootcamp&lt;/li&gt;
    &lt;li&gt;Erase windows and merge the partitions as one mac HD-partition.&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;I’m only sharing this because I’ve seen so many other ways people have gone through to merge their volumes, and it doesn’t look as simple as the way Charles did. The &lt;code&gt;diskutil&lt;/code&gt; command was daunting and it is more prone to mistakes. You could be typing the wrong volume ID.&lt;/p&gt;

&lt;p&gt;Allow me to rephrase the instructions above:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Format the volume you want to delete through disk utility to MS-DOS (FAT). You must be here because it can’t be deleted because it is the original/first volume in the partition.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Press cmd + space to open Boot Camp Assistant app. You will then see what seems like very odd suggestions and has to do with the Windows OS. Just play along and you’ll see something like this:&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/blog/assets/images/Screen Shot 2019-12-24 at 6.14.59 PM.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Check the &lt;code&gt;Install or remove Windows 10 or later version&lt;/code&gt;. Continue.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/blog/assets/images/Screen Shot 2019-12-24 at 6.15.29 PM.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Check the &lt;code&gt;Restore disk to a single macOS partition&lt;/code&gt;. Continue. And it is done.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I was confused with the words used by Charles, but then I got to thinking. Windows didn’t mean the actual OS here. It is referring to the type of volume that Windows can be installed in, which is MS-DOS (FAT).&lt;/p&gt;

&lt;p&gt;To be detected having the Windows in the partition, we needed to change the volume that we want to delete into MS-DOS.&lt;/p&gt;</content><author><name>jules</name></author><category term="partition" /><category term="volume" /><category term="catalina" /><category term="bootcamp" /><category term="terminal" /><category term="mac" /><category term="diskutil" /><summary type="html">This post is from StackExchange, coming from a user named Charles.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://iosjunkie.com/blog/assets/images/Screen%20Shot%202016-04-30%20at%2011.55.05%20AM-1.png" /></entry><entry><title type="html">From Swift UIKit to Dart Flutter Review</title><link href="http://iosjunkie.com/blog/from-swift-uikit-to-dart-flutter-review/" rel="alternate" type="text/html" title="From Swift UIKit to Dart Flutter Review" /><published>2019-11-06T21:23:44-08:00</published><updated>2019-11-06T21:23:44-08:00</updated><id>http://iosjunkie.com/blog/from-swift-uikit-to-dart-flutter-review</id><content type="html" xml:base="http://iosjunkie.com/blog/from-swift-uikit-to-dart-flutter-review/">&lt;p&gt;I’ve given this some thought for maybe a month or two now. To switch from iOS developer to Flutter developer, even though I’m not employed or something. Now, why would I do that? Xcode is the best IDE out there, why switch to a newbie framework that only has VSCode as an IDE?&lt;/p&gt;

&lt;p&gt;Well, since I’m unemployed that means I’m a bit closer to the broke spectrum. I was thinking about what if Apple keeps upgrading its hardware requirements and I’m no longer able to keep up with it. I realized that when I had to run a Catalina on this Hackintosh device I’m using. It didn’t go so well. I couldn’t use SwiftUI’s canvass feature. I assume that I’m never going to be able to try it anymore. So what’s next if they upgraded even further? And even with UIKit, as my project gets bigger and bigger, the lag on Xcode becomes more and more unbearable.&lt;/p&gt;

&lt;p&gt;So I thought, I’d have to just deal with a lightweight IDE to get by. Since I still want to develop on a mobile platform, Flutter has to be the best thing out there. Its community is growing fast, and therefore it is easier for newbies like me to find solutions.&lt;/p&gt;

&lt;p&gt;I have tried coding in SwiftUI a bit, but never built a fully functional app with it. I guess I can compare learning Flutter and SwiftUI since they are both declarative. Both can get painfully spaghetti as the project grows. It’s totally the least I like about using either. If you’ve been a web developer, it’s also comparable to that. Flutter in dart is like having HTML, javascript, and CSS all combined to become a programming language that is object-oriented. So you see, the pain in having to code every bit of structure is there. It’s not the drag and drop that I see in Xcode anymore or the utility area which makes my code a lot slimmer.&lt;/p&gt;

&lt;p&gt;Flutter feels like coding a javascript framework, but you can do it in one file if you feel like it. That file would be main.dart. It should always be under the &lt;code&gt;/lib&lt;/code&gt; folder and not in the subfolders that you might make. The Gemfile I used to work with is now called pubspec.yaml. Once edited, it updates the packages automatically without having to run a command on your terminal. I guess it works that way because of the extensions I installed in VSCode that makes Flutter a lot less tedious to work with. Here’s the list of extensions that I have installed:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Auto-save on Window Change&lt;/li&gt;
  &lt;li&gt;Awesome Flutter Snippets&lt;/li&gt;
  &lt;li&gt;Beautify&lt;/li&gt;
  &lt;li&gt;Better Align&lt;/li&gt;
  &lt;li&gt;Better Comments&lt;/li&gt;
  &lt;li&gt;bloc&lt;/li&gt;
  &lt;li&gt;Bookmarks&lt;/li&gt;
  &lt;li&gt;Bracket Pair Colorizer 2&lt;/li&gt;
  &lt;li&gt;Color Highlight&lt;/li&gt;
  &lt;li&gt;Dart&lt;/li&gt;
  &lt;li&gt;Flutter&lt;/li&gt;
  &lt;li&gt;Guides&lt;/li&gt;
  &lt;li&gt;Image Preview&lt;/li&gt;
  &lt;li&gt;Material Icon Theme&lt;/li&gt;
  &lt;li&gt;Project Manager&lt;/li&gt;
  &lt;li&gt;Pubspec Assist&lt;/li&gt;
  &lt;li&gt;TabOut&lt;/li&gt;
  &lt;li&gt;Todo Tree&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Some of these might not even be specifically for Flutter. It’s also good to know that these extensions are easily found on like some kind of AppStore inside the VSCode.&lt;/p&gt;

&lt;h2 id=&quot;learning-curve&quot;&gt;Learning Curve&lt;/h2&gt;

&lt;p&gt;A week ago, I could hardly make an idea come to life with Flutter because it looks very limiting to use. I attribute it mostly to my poor knowledge-base of the kinds of widgets there are. The first things I had to understand were Stateful and Stateless. I’m not going to dive deeply into it but I’ll try to explain it briefly.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Stateless&lt;/strong&gt; are widgets that will have its contents reloaded, like all of it in that widget. If you want to change any data on this type of widget, it would be like creating an object again in place of the previous one because widgets are objects made up of a &lt;code&gt;class&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Stateful&lt;/strong&gt; is particularly going to reload only the data and not the entire build of that widget. This involves creating two classes, which sounds tedious already, I know. But with the autocomplete feature in one of those extensions above, you only need one word to make all that appear. The same goes for the stateless. Apparently, since some widgets have so more than one required property, you can choose to autocomplete those property by typing &lt;code&gt;alt + space&lt;/code&gt;. So if you know what you’re doing, it’s not exactly that cumbersome.&lt;/p&gt;

&lt;p&gt;Take the &lt;code&gt;import&lt;/code&gt; line for example, you mostly need to import material.dart, foundation.dart, intl.dart, if you’re working on an android project and depending on what you need. There’s also autocomplete on those imports even if it comes from the dependencies you installed on your project, as well as the importing files you have made yourself, so you don’t have to worry much about making typos.&lt;/p&gt;

&lt;p&gt;Unfortunately, you have to import every bit of widget you need that is in a separate file. Unlike in Xcode, you can’t access classes without importing them. The cool thing about the autocomplete feature in one of those extensions is that if you use a class/widget, and let the autocomplete do the work for you, it will automatically import that class/widget.&lt;/p&gt;

&lt;p&gt;One line function. I think this also exists in Swift, but you might be curious to know if you see one of these &lt;code&gt;() =&amp;gt; print('hi');&lt;/code&gt;. It is simply like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;() {
	print('hi');
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For a previous Swift programmer, the transition will probably be a breeze. There are so many similar concepts even if words don’t look the same. But the commas and semicolons are unforgiving. You also wouldn’t like the way you need to import every image and font you need in your app in your pubspec.yaml file. &lt;strong&gt;Update&lt;/strong&gt;: I have decided to come back to being an iOS developer because the syntax of Dart and the way things are handled in Flutter are just way too much. I don’t like handling states with Flutter which is a very complicated process. And having to implement state management every time the UI needs changing is a really dreadful task. But that’s not all, it’s painfully repetitive to declare your assets in the pubspec.yaml.&lt;/p&gt;

&lt;p&gt;For a previous Android developer, which I also used to be, well, Flutter is a way much easier way to develop apps. Though, coding with Flutter feels so much closer to Android development than UIKit. A huge reason why I find UIKit easier. But if you’ve never tried Xcode at all, you’ll still feel at home with Flutter, and the best part is it’s lightweight.&lt;/p&gt;

&lt;p&gt;I have said so many bad things about Flutter now that I realized, but it simply isn’t that hard to learn. Sure, there are so many new things that even I only just learned, but since most of the code I wrote is repetitive, it makes more and more sense as I go through with the Udemy course about Flutter. With the way things are, it is no doubt Flutter could be adapted by many developers in the future. Its lightweight-ness to develop is just something most mobile developers could wish for, but I wish it was more similar to Swift and UIKit.&lt;/p&gt;</content><author><name>jules</name></author><category term="experience" /><category term="review" /><category term="flutter" /><category term="swiftui" /><category term="dart" /><category term="uikit" /><category term="swift" /><summary type="html">I’ve given this some thought for maybe a month or two now. To switch from iOS developer to Flutter developer, even though I’m not employed or something. Now, why would I do that? Xcode is the best IDE out there, why switch to a newbie framework that only has VSCode as an IDE?</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://iosjunkie.com/blog/assets/images/flutter_banner.jpg" /></entry><entry><title type="html">Is Catalina Sluggish? (Hackintosh)</title><link href="http://iosjunkie.com/blog/is-catalina-sluggish-hackintosh/" rel="alternate" type="text/html" title="Is Catalina Sluggish? (Hackintosh)" /><published>2019-10-30T04:32:56-08:00</published><updated>2019-10-30T04:32:56-08:00</updated><id>http://iosjunkie.com/blog/is-catalina-sluggish-hackintosh</id><content type="html" xml:base="http://iosjunkie.com/blog/is-catalina-sluggish-hackintosh/">&lt;p&gt;As a developer, technically, not yet, but I’m trying to become an iOS developer. I have been giving SwiftUI some thought. I want to try it because the declarative way of developing apps is trending and the canvas besides the code is tantalizing. Maybe it’ll be a lot faster than using a storyboard.&lt;/p&gt;

&lt;p&gt;Let me give you an idea about my specs:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Dell Optiplex 9020 micro&lt;/li&gt;
  &lt;li&gt;2 GHz Intel Core i5&lt;/li&gt;
  &lt;li&gt;Ram: 12 GB 1600 MHz DDR3&lt;/li&gt;
  &lt;li&gt;Quadcore&lt;/li&gt;
  &lt;li&gt;WiFi Dongle: DWA-123 11n Adapter&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’m running a Mojave on this Hackintosh, and I have split my partition into two to try out Catalina. I used dosdude1’s patcher to install Catalina because it failed when I try to update using App Store or the connection gets interrupted when downloading. So far installation went fine. It took some time and I thought I was stuck in a loop of spinning wheel. Glad it went on after a while.&lt;/p&gt;

&lt;p&gt;After importing all files and settings from Mojave, it said something like it can’t copy Realtek driver or something. Too bad I didn’t take a photo of it so I could search for whatever was happening. I just skipped it and my desktop was then shown.&lt;/p&gt;

&lt;p&gt;To my disappointment, I couldn’t get the internet to work. I tried installing the driver from &lt;a href=&quot;https://www.dlink.com.ph/dwa-123-d1/&quot; title=&quot;DWA-123&quot;&gt;https://www.dlink.com.ph/dwa-123-d1/&lt;/a&gt;, and I also tried installing IO80211Family.kext. All with no luck. I’m giving up at this point because somehow my audio output doesn’t work anymore as well. Although Initially, right after installation, I can listen to songs with iTunes.&lt;/p&gt;

&lt;h3 id=&quot;what-you-came-here-for&quot;&gt;What You Came Here For&lt;/h3&gt;

&lt;p&gt;No, it isn’t sluggish as I’ve read randomly from YouTube commenters on reviews regarding Mac OS Catalina. Or maybe it is, but it was negligible. I tried using Xcode 11.1 to test if it were to slow down. It didn’t really slow down. I can still use it with ease the way it is in Mojave.&lt;/p&gt;

&lt;h3 id=&quot;2nd-attempt&quot;&gt;2nd Attempt&lt;/h3&gt;

&lt;p&gt;I just bought a Samsung EVO SSD to replace my external hard drive where my Mac was booted from. So, I created 2 partitions because apparently Catalina requires an APFS volume. I used Carbon Copy Cloner to clone my Mojave into the APFS volume. Since I still have the Catalina installer, I gave it another shot.&lt;/p&gt;

&lt;p&gt;Everything works like before but with all my files from Mojave intact. The audio works as well. The only thing that doesn’t work was my WiFi USB dongle. It seems that my PC can’t detect it.&lt;/p&gt;

&lt;p&gt;I don’t know why I haven’t seen this before, but the solution is readily available on the internet. I only had to download &lt;a href=&quot;https://github.com/chris1111/Wireless-USB-Adapter-Clover/releases/tag/V10&quot;&gt;Wireless USB Adapter Clover-V10&lt;/a&gt; and install it. Good lord, my WiFi works now.&lt;/p&gt;

&lt;h5 id=&quot;what-doesnt-work-well&quot;&gt;What doesn’t work well?&lt;/h5&gt;

&lt;p&gt;My keyboard is so slow when typing. It takes a while to see the letters, numbers or symbols. Considering that I’m using a wireless keyboard, maybe it really does make a difference if I had used a wired keyboard.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/Screen Shot 2019-11-27 at 12.33.16 PM.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After some time being of being back in Mojave, I installed Bluestacks to play MU Origins 2. Eventually, when there is not enough free RAM, my keyboard also went slow like it did in Catalina.&lt;/p&gt;

&lt;p&gt;So, it’s definitely not an OS problem, but a RAM problem. However, if it’s a RAM problem, then Catalina must have occupied a lot of RAM.&lt;/p&gt;

&lt;h3 id=&quot;3rd-attempt&quot;&gt;3rd Attempt&lt;/h3&gt;

&lt;p&gt;I’m not sure what it was last time about the RAM, but hey, it’s almost Christmas and I just had to give it a try again.&lt;/p&gt;

&lt;p&gt;Why is there even a third attempt? It so happens that my keyboard lagged in Mojave, and then I checked my RAM to see if it’s the culprit. Well, no it’s not.&lt;/p&gt;

&lt;p&gt;Now that I’m trying it again, I’m actually using Catalina to type this blog post. It is now working well. And I can now venture into SwiftUI. As to why my keyboard went haywire the last time, I’m not sure about it but I know for a fact that something is throttling.&lt;/p&gt;

&lt;p&gt;Another thing I like about Catalina is that my default audio output in Mojave is always my headphones, even though it’s not connected. Now, even though headphone is still on top of the list in my audio output list, the default is now my DP monitor, where I prefer my audio to come from.&lt;/p&gt;</content><author><name>jules</name></author><category term="SwiftUI" /><category term="DWA-123 11n " /><category term="IO80211Family.kext" /><category term="kext" /><category term="wifi" /><category term="realtek" /><category term="sluggish" /><category term="os" /><category term="mac" /><category term="catalina" /><category term="hackintosh" /><summary type="html">As a developer, technically, not yet, but I’m trying to become an iOS developer. I have been giving SwiftUI some thought. I want to try it because the declarative way of developing apps is trending and the canvas besides the code is tantalizing. Maybe it’ll be a lot faster than using a storyboard.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://iosjunkie.com/blog/assets/images/macos-catalina-1.jpg" /></entry><entry><title type="html">Delux M618 USB Wired Ergonomic Vertical Optical Mouse Review</title><link href="http://iosjunkie.com/blog/delux-m618-usb-wired-ergonomic-vertical-optical-mouse-review/" rel="alternate" type="text/html" title="Delux M618 USB Wired Ergonomic Vertical Optical Mouse Review" /><published>2019-10-28T22:34:18-08:00</published><updated>2019-10-28T22:34:18-08:00</updated><id>http://iosjunkie.com/blog/delux-m618-usb-wired-ergonomic-vertical-optical-mouse-review</id><content type="html" xml:base="http://iosjunkie.com/blog/delux-m618-usb-wired-ergonomic-vertical-optical-mouse-review/">&lt;p&gt;My new vertical mouse just arrived as we speak. This is a little different from the &lt;a href=&quot;http://iosjunkie.com/blog/using-vertical-mouse-my-take/&quot; title=&quot;Vertical Mouse&quot;&gt;previous&lt;/a&gt; one; It has a wire instead of it being wireless and it feels funny around my hands.&lt;/p&gt;

&lt;p&gt;I have now been accustomed to using my previous vertical mouse. It felt rather more comfortable when I wrap my hand around it, but I don’t feel the same comfort with this new one.&lt;/p&gt;

&lt;p&gt;However, the purpose of this as a mouse is on point. It doesn’t lag like the previous vertical mouse. No lags in scrolling too. But it has friction on my mousepad. So, I removed the mousepad and now I’m using it on top of a wood. It feels much smoother this way.&lt;/p&gt;

&lt;p&gt;The color I got is black, though I would’ve liked it to be the color I’ve used in the image above which is matte white. Mine has three glossy buttons, not including the left and right-click buttons. Like the image above, it has some kind of tail but it feels like it’s in the wrong place.&lt;/p&gt;

&lt;h2 id=&quot;update&quot;&gt;Update&lt;/h2&gt;

&lt;p&gt;I’ve gotten used to this mouse. It’s unfortunate that I ordered another vertical mouse that looks similar to my old mouse. The key to using this mouse is holding the upper part of it.&lt;/p&gt;

&lt;p&gt;Another important thing not to do is to rest your hand on it if you aren’t using it. I don’t know why but there is pressure on my pinky when I rest it there for too long. It gets sore after a while.&lt;/p&gt;

&lt;p&gt;I don’t remember the comfort of using my previous mouse, but this just works. Although, the left-click button is kind not working at times or if I don’t use enough force to press it. Most of the time it works though. I’m just not sure if I’m pressing it too softly.&lt;/p&gt;</content><author><name>jules</name></author><category term="mouse" /><category term="vertical" /><category term="cts" /><category term="carpal tunnel syndrome" /><category term="hardware" /><category term="review" /><summary type="html">My new vertical mouse just arrived as we speak. This is a little different from the previous one; It has a wire instead of it being wireless and it feels funny around my hands.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://iosjunkie.com/blog/assets/images/Delux-M618-2-4G-Wireless-Vertical-Mouse-Inalambrico-Ergonomic-1600-DPI-USB-Wired-Optical-Mouse-with.jpg" /></entry><entry><title type="html">Using Touch ID and Face ID In Your App (Swift 5)</title><link href="http://iosjunkie.com/blog/using-touch-id-and-face-id-in-your-app-swift-5/" rel="alternate" type="text/html" title="Using Touch ID and Face ID In Your App (Swift 5)" /><published>2019-10-28T12:00:00-08:00</published><updated>2019-10-28T12:00:00-08:00</updated><id>http://iosjunkie.com/blog/using-touch-id-and-face-id-in-your-app-swift-5</id><content type="html" xml:base="http://iosjunkie.com/blog/using-touch-id-and-face-id-in-your-app-swift-5/">&lt;p&gt;To use Face ID, or even Touch ID, we need to import &lt;code&gt;LocalAuthentication&lt;/code&gt;. The code below works for both Face and Touch ID. Whichever is enabled in the user’s settings.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let context = LAContext()
var error: NSError?

if context.canEvaluatePolicy(.deviceOwnerAuthenticationWithBiometrics, error: &amp;amp;error) {
	// This reason is only for Touch ID, not Face ID
    // The reason for accessing Face ID, is found in Info.plist
    let reason: String = &quot;Please use Touch ID to unlock&quot;
    
    context.evaluatePolicy(.deviceOwnerAuthenticationWithBiometrics, localizedReason: reason) { [weak self] success, authenticationError in
    	Dispatch.main.async {
        	if success {
            	// do some unlocking of data or
                // present new view
            } else {
            	// Face wasn't detected
                // Maybe user was wearing sunglasses
                if error = error {
                  let ac = UIAlertController(title: &quot;Authetication Failed!&quot;),
                              message: self.reportTouchIDError(error: error),
                              preferredStyle: .alert)
                  ac.addAction(UIAlertAction(title: &quot;OK&quot;, style: .default))
                  self?.present(ac, animated: true)
                }
            }
        }
    }
} else {
	// Biometric is not supported by your iOS device
    let ac = UIAlertController(title: &quot;Biometric Authentication Unavailable&quot;),
                  message: &quot;Your device is not configured for biometric authentication.&quot;,
                  preferredStyle: .alert)
    ac.addAction(UIAlertAction(title: &quot;OK&quot;, style: .default))
    self?.present(ac, animated: true)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Before this can work, we must add a key value in our Info.plist to alert the user that we are going to be using this biometric feature.&lt;/p&gt;

&lt;p&gt;Key: Privacy - Face ID Usage Description&lt;/p&gt;

&lt;p&gt;Type: String&lt;/p&gt;

&lt;p&gt;Value: This app uses Face ID to confirm your identity&lt;/p&gt;

&lt;p&gt;There’s a more specific way of producing an error. This example was explained by &lt;code&gt;David Tran&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func reportTouchIDError(error: NSError) -&amp;gt; String {
	switch error.code {
    case LAError.AuthenticationFailed.rawValue:
    	return &quot;Authentication Failed!&quot;
    case LAError.PasscodeNotSet.rawValue:
    	return &quot;Passcode not set!&quot;
    case LAError.SystemCancel.rawValue:
    	return &quot;Authentication was cancelled by the system!&quot;
    case LAError.UserCancel.rawValue:
    	return &quot;User cancel auth&quot;
    case LAError.TouchIDNotEnrolled.rawValue:
    	return &quot;User has not enrolled any finger with touch ID&quot;
    case LAError.TouchIDNotAvailable.rawValue:
    	return &quot;Touch ID is not available&quot;
    case LAError.UserFallBack.rawValue:
    	return &quot;User tapped enter password&quot;
    default:
    	return error.localizedDescription
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/vf7JyFFSNDU&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;</content><author><name>jules</name></author><category term="biometric" /><category term="touch id" /><category term="face id" /><category term="swift" /><summary type="html">To use Face ID, or even Touch ID, we need to import LocalAuthentication. The code below works for both Face and Touch ID. Whichever is enabled in the user’s settings.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://iosjunkie.com/blog/assets/images/iphone-x-faceid-670x335.jpg" /></entry><entry><title type="html">Using Netlify As A CMS For Your Jekyll Blog</title><link href="http://iosjunkie.com/blog/using-netlify-as-a-cms-for-your-jekyll-blog/" rel="alternate" type="text/html" title="Using Netlify As A CMS For Your Jekyll Blog" /><published>2019-10-27T08:00:00-08:00</published><updated>2019-10-27T08:00:00-08:00</updated><id>http://iosjunkie.com/blog/using-netlify-as-a-cms-for-your-jekyll-blog</id><content type="html" xml:base="http://iosjunkie.com/blog/using-netlify-as-a-cms-for-your-jekyll-blog/">&lt;p&gt;I was actually intimidated by the idea of trying out &lt;code&gt;Netlify&lt;/code&gt; for my blog but not so much anymore. It turned out pretty easy to do.&lt;/p&gt;

&lt;p&gt;First thing’s first, &lt;code&gt;Netlify&lt;/code&gt; is some kind of web hosting. Although you can opt to just run a local server from your computer by just running &lt;code&gt;bundle exec jekyll serve&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let’s create our &lt;code&gt;Netlify&lt;/code&gt; account and follow this guide by Thomas Bradley:&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/eEjdJY_Ak8U&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;This is actually a part of his Jekyll + NetlifyCMS hosting setup playlist. I didn’t find the rest to be that useful, so I’ve written down below the next steps you should take.&lt;/p&gt;

&lt;p&gt;To create the &lt;code&gt;Netlify Dashboard&lt;/code&gt;, you need to create a folder. This folder is a subdirectory of your &lt;code&gt;blog&lt;/code&gt;. So, if you set your baseurl from your &lt;code&gt;_config.yml&lt;/code&gt; to &lt;code&gt;\blog&lt;/code&gt;, then this folder, let’s say, &lt;code&gt;admin&lt;/code&gt; can be accessed through &lt;code&gt;\blog\admin&lt;/code&gt;. This folder has to be created at the root of your Jekyll project folder. Then there are only two files you need to create under the admin folder. &lt;code&gt;index.html&lt;/code&gt; and &lt;code&gt;config.yml&lt;/code&gt;. This is another config.yml different from the root’s _config.yml.&lt;/p&gt;

&lt;p&gt;I copied the contents of &lt;code&gt;index.html&lt;/code&gt; from &lt;a href=&quot;https://www.netlifycms.org/docs/add-to-your-site/#app-file-structure&quot; title=&quot;Add to Your Site&quot;&gt;Add to Your Site&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!doctype html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;meta charset=&quot;utf-8&quot; /&amp;gt;
  &amp;lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&amp;gt;
  &amp;lt;title&amp;gt;Content Manager&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;!-- Include the script that builds the page and powers Netlify CMS --&amp;gt;
  &amp;lt;script src=&quot;https://unpkg.com/netlify-cms@^2.0.0/dist/netlify-cms.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now comes the tricky part, which is setting up the look of our admin dashboard in &lt;code&gt;config.yml&lt;/code&gt;. If you reverse engineer it, it’s easier than reading through html.&lt;/p&gt;

&lt;p&gt;There are ways to login to your dashboard, but I chose to login with &lt;code&gt;Github&lt;/code&gt;. To do that, here’s what you’ll have to put in &lt;code&gt;admin/config.yml&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;backend:
  name: github
  branch: gh-pages # Branch to update (optional; defaults to master)
  repo: iosjunkie/blog # Repository of your blog in Github

publish_mode: editorial_workflow
media_folder: &quot;assets/images&quot;

collections:
  - name: &quot;posts&quot;
    label: &quot;Posts&quot;
    folder: &quot;_posts&quot;
    create: true
    slug: &quot;---&quot;
    fields:
      - { label: &quot;Layout&quot;, name: &quot;layout&quot;, widget: &quot;hidden&quot;, default: &quot;post&quot; }
      - { label: &quot;Title&quot;, name: &quot;title&quot;, widget: &quot;string&quot; }
      - label: &quot;Featured Image&quot;
        name: &quot;image&quot;
        widget: &quot;image&quot;
        required: false
        media_library:
          config:
            multiple: false
      - { label: &quot;Tags&quot;, name: &quot;tags&quot;, widget: &quot;list&quot;, required: false }
      - { label: &quot;Categories&quot;, name: &quot;categories&quot;, widget: &quot;string&quot;, required: true }
      - { label: &quot;Draft&quot;, name: &quot;draft&quot;, widget: &quot;boolean&quot;, default: true }
      - label: &quot;Body&quot;
        name: &quot;body&quot;
        widget: &quot;markdown&quot;
  - name: &quot;website-settings&quot;
    label: &quot;Settings&quot;
    files:
      - label: &quot;Settings&quot;
        name: &quot;site&quot;
        file: &quot;_config.yml&quot;
        fields:
          - label: &quot;Name&quot;
            name: &quot;name&quot;
            widget: &quot;string&quot;
          - label: &quot;Description&quot;
            name: &quot;description&quot;
            widget: &quot;markdown&quot; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I just came up with this from the tutorials I watched. The images below are the results of what we just typed in our &lt;code&gt;config.yml&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is what it looks like when I go to &lt;code&gt;http://localhost:4000/blog/admin/#/collections/website-settings&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/Screen Shot 2019-10-28 at 11.11.40 AM.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/blog/assets/images/Screen Shot 2019-10-28 at 11.11.59 AM.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
And this is what it looks like in &lt;code&gt;http://localhost:4000/blog/admin/#/collections/posts:&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/Screen Shot 2019-10-28 at 11.12.13 AM.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/Screen Shot 2019-10-28 at 11.12.35 AM.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once done, commit and push it to your Github. Go back to &lt;code&gt;https://app.netlify.com/sites/your-blog/deploys&lt;/code&gt; and make sure it is deployed. After deploying, you will be able to access Netlify admin dashboard thru &lt;code&gt;https://your-blog.netlify.com/admin&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;take&quot;&gt;Take&lt;/h2&gt;

&lt;p&gt;I like the UI of Netlify CMS. Reminds me of Netflix all the time and as I’m typing this article, I often get a typo of &lt;code&gt;Netflix&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Would I use it?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;No!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The list of posts is not sorted by date. I’m used to having it sorted by date. The images in the &lt;code&gt;/assets/images/&lt;/code&gt; folder are also not sorted and there’s no way of sorting any collection in this CMS. Sad, but true.&lt;/p&gt;

&lt;p&gt;That’s my only problem with it, but if that’s not a problem for you, then give it a go.&lt;/p&gt;</content><author><name>jules</name></author><category term="cms" /><category term="netlify" /><category term="jekyll" /><summary type="html">I was actually intimidated by the idea of trying out Netlify for my blog but not so much anymore. It turned out pretty easy to do.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://iosjunkie.com/blog/assets/images/Screen%20Shot%202019-10-28%20at%2011.12.35%20AM.png" /></entry></feed>