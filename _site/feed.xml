<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://iosjunkie.com/blog/feed.xml" rel="self" type="application/atom+xml" /><link href="http://iosjunkie.com/blog/" rel="alternate" type="text/html" /><updated>2019-10-07T02:46:41+08:00</updated><id>http://iosjunkie.com/blog/feed.xml</id><title type="html">iOS Junkie</title><subtitle>Demystifying complex instructions, tutorials, and a little bit more on the iOS Swift stuff.</subtitle><entry><title type="html">Sophisticated Way To Use LocationManager Swift 5</title><link href="http://iosjunkie.com/blog/sophisticated-way-to-use-locationmanager-swift-5/" rel="alternate" type="text/html" title="Sophisticated Way To Use LocationManager Swift 5" /><published>2019-10-07T00:00:00+08:00</published><updated>2019-10-07T00:00:00+08:00</updated><id>http://iosjunkie.com/blog/sophisticated-way-to-use-locationmanager-swift-5</id><content type="html" xml:base="http://iosjunkie.com/blog/sophisticated-way-to-use-locationmanager-swift-5/">&lt;p&gt;This is the most elegant solution I found on how to retrieve location with CoreLocation.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import CoreLocation
class ViewController: UIViewController {
    
    private let locationManager = CLLocationManager()
    private let operationQueue = OperationQueue()

    override func viewDidLoad() {
		super.viewDidLoad()
	
		operationQueue.isSuspended = true
		runLocationBlock {
			if let location = self.locationManager.location {
			}
		}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ol&gt;
  &lt;li&gt;We must create a Location Manager first and foremost.&lt;/li&gt;
  &lt;li&gt;We created an OperationQueue even though we only have one operation to execute, which is &lt;code class=&quot;highlighter-rouge&quot;&gt;runLocationBlock&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Suspend the operation or pause first to check if we are allowed to request location data.&lt;/li&gt;
  &lt;li&gt;Whatever is in the &lt;code class=&quot;highlighter-rouge&quot;&gt;runLocationBlock&lt;/code&gt; will only run if &lt;code class=&quot;highlighter-rouge&quot;&gt;operationQueue&lt;/code&gt; is unsuspended but rest assured this function is already running.&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;extension ViewController: CLLocationManagerDelegate {
    private func configureLocationManager() {
        locationManager.desiredAccuracy = kCLLocationAccuracyBest
        locationManager.delegate = self
				
        // requestLocation will take 10 seconds to run, but only requests location just once
        locationManager.requestLocation()
				
        // startUpdatingLocation will fire up immediately
        // locationManager.startUpdatingLocation()
    }
		
    func locationManager(_ manager: CLLocationManager, didFailWithError error: Error) {
        print(&quot;error&quot;)
    }
    
    func locationManager(_ manager: CLLocationManager, didChangeAuthorization status: CLAuthorizationStatus) {
        
        //If we're authorized to use location services, run all operations in the queue
        // otherwise if we were denied access or restricted or location is not determined, cancel the operations
				
        if(status == .authorizedWhenInUse || status == .authorizedAlways) {
            self.operationQueue.isSuspended = false
        }else if(status == .denied || status == .restricted || status == .notDetermined){
            self.operationQueue.cancelAllOperations()
        }
    }
    
    func runLocationBlock(callback: @escaping () -&amp;gt; ()) {
        
        //Get the current authorization status
        let authState = CLLocationManager.authorizationStatus()
        
        //If we have permissions, start executing the commands immediately
        // otherwise request permission
        DispatchQueue.main.async {
            if(authState == .authorizedAlways || authState == .authorizedWhenInUse) {
                self.configureLocationManager()
                self.operationQueue.isSuspended = false
            }else{
                //Request permission
                self.locationManager.requestWhenInUseAuthorization()
            }
        }
        
        //Create a closure with the callback function so we can add it to the operationQueue
        let block = {
            DispatchQueue.main.async {
                callback()
            }
        }
        
        //Add block to the queue to be executed asynchronously
        self.operationQueue.addOperation(block)
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;runlocationblock&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;RunLocationBlock&lt;/code&gt;&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;We know for one thing that &lt;code class=&quot;highlighter-rouge&quot;&gt;runLocationBlock&lt;/code&gt;’s operations is/are set suspended in the &lt;code class=&quot;highlighter-rouge&quot;&gt;ViewController&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;We want to know the authorization status first.&lt;/li&gt;
  &lt;li&gt;If we are authorized, then let’s configure the &lt;code class=&quot;highlighter-rouge&quot;&gt;locationManager&lt;/code&gt; second then unsuspend, next, to allow our operationQueue to run all the blocks of operations it cointains.&lt;/li&gt;
  &lt;li&gt;If we are not authorized, a request will be shown to the user using the app.&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;block&lt;/code&gt; will contain the callback, which is whatever you put inside the &lt;code class=&quot;highlighter-rouge&quot;&gt;runLocationBlock { }&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;didchangeauthorization&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DidChangeAuthorization&lt;/code&gt;&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;This is just like what we’ve seen inside &lt;code class=&quot;highlighter-rouge&quot;&gt;runLocationBlock&lt;/code&gt;, but we don’t request for authorization again. Instead, when denied/restricted or if the location was not determined, then the &lt;code class=&quot;highlighter-rouge&quot;&gt;operationQueue&lt;/code&gt; will not run operations that were added to it.&lt;/li&gt;
  &lt;li&gt;This is only triggered after &lt;code class=&quot;highlighter-rouge&quot;&gt;self.locationManager.requestWhenInUseAuthorization()&lt;/code&gt; that you have seen inside the &lt;code class=&quot;highlighter-rouge&quot;&gt;RunLocationBlock&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;configurelocationmanager&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ConfigureLocationManager&lt;/code&gt;&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;locationManager.delegate = self&lt;/code&gt; this is the most essential part of setting up our locationManager. This allows our &lt;code class=&quot;highlighter-rouge&quot;&gt;ViewController&lt;/code&gt; to access protocol methods from &lt;code class=&quot;highlighter-rouge&quot;&gt;CLLocationManagerDelegate&lt;/code&gt; like &lt;code class=&quot;highlighter-rouge&quot;&gt;didChangeAuthorization&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;If the desiredAccuracy is not set, its default is &lt;code class=&quot;highlighter-rouge&quot;&gt;kCLLocationAccuracyBest&lt;/code&gt; for iOS/Mac OS. For watchOS, &lt;code class=&quot;highlighter-rouge&quot;&gt;kCLLocationAccuracyHundredMeters&lt;/code&gt;. This is how you want the location data to be as accurate. It is important to note that higher accuracy will require longer time to retrieve location data.
    &lt;ol&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;kCLLocationAccuracyKilometer &lt;/code&gt; - within a kilometer&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;kCLLocationAccuracyThreeKilometers&lt;/code&gt; -within 3 kilometers. The higher, the better conservation of energy.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;kCLLocationAccuracyBestForNavigation&lt;/code&gt;- usually used in navigation apps. Least energy efficient.
        &lt;ol&gt;
          &lt;li&gt;locationManager.activityType = .automotiveNavigation&lt;/li&gt;
          &lt;li&gt;locationManager.distanceFilter = 0&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;kCLLocationAccuracyNearestTenMeters&lt;/code&gt; - less energy efficient.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;If you use &lt;code class=&quot;highlighter-rouge&quot;&gt;requestLocation()&lt;/code&gt;, it will only gather location data once. However, this takes 10 seconds as opposed to &lt;code class=&quot;highlighter-rouge&quot;&gt;startUpdatingLocation()&lt;/code&gt;, which fires immediately.&lt;/li&gt;
&lt;/ol&gt;</content><author><name>jules</name></author><category term="" /><category term="location" /><category term="manager" /><category term="swift" /><category term="data" /><category term="corelocation" /><category term="operation" /><category term="queue" /><summary type="html">This is the most elegant solution I found on how to retrieve location with CoreLocation.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://i.stack.imgur.com/hDiMB.png" /></entry><entry><title type="html">Grand Central Dispatch (GCD): Where To Start Learning</title><link href="http://iosjunkie.com/blog/grand-central-dispatch-gcd-where-to-start-learning/" rel="alternate" type="text/html" title="Grand Central Dispatch (GCD): Where To Start Learning" /><published>2019-10-07T00:00:00+08:00</published><updated>2019-10-07T00:00:00+08:00</updated><id>http://iosjunkie.com/blog/grand-central-dispatch-gcd-where-to-start-learning</id><content type="html" xml:base="http://iosjunkie.com/blog/grand-central-dispatch-gcd-where-to-start-learning/">&lt;p&gt;I’ve been hearing and reading GCD for quite a while now. Grand Central Dispatch. Whoa! Big word! It’s really just a concept of using threads. It’s not a railway system, no.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;GCD is an API provided by apple to allow you to manage concurrent operations in a smooth way, in order to avoid freezing of your application and keep it always responsive for users. - Jaafar Barek&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://hackernoon.com/swift-multi-threading-using-gcd-for-beginners-2581b7aa21cb&quot;&gt;Swift Multi-Threading using GCD For Beginners&lt;/a&gt;. This is just a brief article with great visual aids to simply start off learning DispatchQueue.&lt;/p&gt;

&lt;p&gt;When you’re done with that, hold your breath and dive in two of these lakes. &lt;a href=&quot;https://dev.to/leogdion/asynchronous-multi-threaded-parallel-world-of-swift-4gjh&quot;&gt;Asynchronous Multi-Threaded Parallel World of Swift&lt;/a&gt; and &lt;a href=&quot;https://theswiftdev.com/2018/07/10/ultimate-grand-central-dispatch-tutorial-in-swift/&quot;&gt;Ultimate Grand Central Dispatch tutorial in Swift&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The former will first walk you through processing concepts and many visuals on how to use DispatchQueue, Semaphores, and SwiftUI’s combine in relation to asynchronous operations.&lt;/p&gt;

&lt;p&gt;The latter is almost the same but with less visuals and no &lt;code class=&quot;highlighter-rouge&quot;&gt;combine&lt;/code&gt;. DispatchWorkItem and deadlocks is discussed which isn’t found in the former.&lt;/p&gt;

&lt;p&gt;Both are really valuable resources for learning &lt;code class=&quot;highlighter-rouge&quot;&gt;GCD&lt;/code&gt;. It takes quite a while to grasp this simple concept but with broad applications, so I recommend reading on both to consolidate that chunk of knowledge. It is really intimidating to learn, since most of the time, programmers only usually use &lt;code class=&quot;highlighter-rouge&quot;&gt;background&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;main&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I bet these resources are good for interviews too.&lt;/p&gt;</content><author><name>jules</name></author><category term="" /><category term="grand" /><category term="central" /><category term="dispatch" /><category term="dispatchqueue" /><category term="barrier" /><category term="ultimate" /><category term="guide" /><category term="asynchronous" /><category term="operation" /><category term="swiftui" /><category term="combine" /><category term="framework" /><summary type="html">I’ve been hearing and reading GCD for quite a while now. Grand Central Dispatch. Whoa! Big word! It’s really just a concept of using threads. It’s not a railway system, no. GCD is an API provided by apple to allow you to manage concurrent operations in a smooth way, in order to avoid freezing of your application and keep it always responsive for users. - Jaafar Barek</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://res.cloudinary.com/practicaldev/image/fetch/s--orob56V4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://learningswift.brightdigit.com/wp-content/uploads/sites/2/2019/09/ParallelConcurrency.001-1024x768.jpeg" /></entry><entry><title type="html">How Static Is Used</title><link href="http://iosjunkie.com/blog/how-static-is-used/" rel="alternate" type="text/html" title="How Static Is Used" /><published>2019-10-06T00:00:00+08:00</published><updated>2019-10-06T00:00:00+08:00</updated><id>http://iosjunkie.com/blog/how-static-is-used</id><content type="html" xml:base="http://iosjunkie.com/blog/how-static-is-used/">&lt;p&gt;Static is like creating a global variable. You’ll see what I mean when you’ve watched Sean Allen’s video tutorial.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/s2E5hVxQAZQ&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;There’s just one hiccup here that might confuse the newbies. Sean used the term &lt;code class=&quot;highlighter-rouge&quot;&gt;Type&lt;/code&gt; and the struct’s name interchangeably.&lt;/p&gt;

&lt;p&gt;Let’s have at it one more time:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;struct Video {
    static let creator = &quot;iOS Junkie&quot;
    
    var title: String
    var viewCount: Int
}

let tutorial = Video(title: &quot;Static&quot;, viewCount: 1000)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;Type&lt;/code&gt; mentioned by Sean is the &lt;code class=&quot;highlighter-rouge&quot;&gt;Video&lt;/code&gt; struct, which owns the creator. Say you access the creator via &lt;code class=&quot;highlighter-rouge&quot;&gt;Video.creator&lt;/code&gt; without creating a &lt;code class=&quot;highlighter-rouge&quot;&gt;Video()&lt;/code&gt; object, then it is a &lt;code class=&quot;highlighter-rouge&quot;&gt;type&lt;/code&gt; and not an &lt;code class=&quot;highlighter-rouge&quot;&gt;instance&lt;/code&gt; like tutorial. &lt;code class=&quot;highlighter-rouge&quot;&gt;tutorial&lt;/code&gt; is assigned an instance of &lt;code class=&quot;highlighter-rouge&quot;&gt;Video()&lt;/code&gt; object.&lt;/p&gt;

&lt;p&gt;If you’re curious whether &lt;code class=&quot;highlighter-rouge&quot;&gt;title&lt;/code&gt; can be accessed this like this &lt;code class=&quot;highlighter-rouge&quot;&gt;Video.title&lt;/code&gt;, then no. Even if it is pre-initialized a value, it will give out an error saying: &lt;code class=&quot;highlighter-rouge&quot;&gt;Instance member 'title' cannot be used on type 'Helper'&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You’ll want to use static for a reason like you might not want to create an object to access its properies or methods making it possible to directly access the struct &lt;code class=&quot;highlighter-rouge&quot;&gt;Vlog&lt;/code&gt;’s properties without creating an object. Static can also be applied to a method, which allows you to do something like &lt;code class=&quot;highlighter-rouge&quot;&gt;Video.play()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It’s also important to note that you can replace the creator’s value just by assigning it a new value this way:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Video.creator = &quot;Sean Allen&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The next time you access &lt;code class=&quot;highlighter-rouge&quot;&gt;Video.creator&lt;/code&gt; or create an object with &lt;code class=&quot;highlighter-rouge&quot;&gt;Video()&lt;/code&gt;, the creator will be &lt;code class=&quot;highlighter-rouge&quot;&gt;Sean Allen&lt;/code&gt; by then.&lt;/p&gt;

&lt;p&gt;Now that we’re talking about static, there’s another way to access computed properties and methods of a construct without making an object. This is from Kilo Loco:&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/CV0czLueGeI&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class Helper {
    // Static - allowed in structs and classes
    static var staticStoredProperty = &quot;Static Stored Property&quot;
    static var staticComputedProperty: String {
        return &quot;Static computed property&quot;
    }
    
    static func staticMethod() {
        print(&quot;Static Method&quot;)
    }
    
    // Class - only allows within classes, not structs
    class var classComputedProperty: String {
        return &quot;Class computed property&quot;
    }
    
    class func classMethod() {
        print(&quot;class method&quot;)
    }
}

class SubHelper : Helper {
    override class var classComputedProperty: String {
        return &quot;subClassed computed property&quot;
    }
    
    override class func classMethod() {
        print(&quot;subclassed method&quot;)
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Aside from &lt;code class=&quot;highlighter-rouge&quot;&gt;static&lt;/code&gt;, you can use &lt;code class=&quot;highlighter-rouge&quot;&gt;class&lt;/code&gt; in exchange. No! Not the class construct. I’m talking about class type. It works almost similarly to static. However, you cannot store a property like you would with &lt;code class=&quot;highlighter-rouge&quot;&gt;static&lt;/code&gt;. With &lt;code class=&quot;highlighter-rouge&quot;&gt;class&lt;/code&gt;, you can do something that &lt;code class=&quot;highlighter-rouge&quot;&gt;static&lt;/code&gt; too can’t do. You can override computed properties and methods as you can see inside the the &lt;code class=&quot;highlighter-rouge&quot;&gt;SubHelper&lt;/code&gt; class.&lt;/p&gt;

&lt;p&gt;It is important to note that you cannot use the &lt;code class=&quot;highlighter-rouge&quot;&gt;class&lt;/code&gt; type inside a &lt;code class=&quot;highlighter-rouge&quot;&gt;struct&lt;/code&gt;, only inside classes.&lt;/p&gt;

&lt;p&gt;These are all valid ways to access properties and methods given the code above:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Helper.staticStoredProperty
Helper.staticComputedProperty
Helper.staticMethod()

Helper.classComputedProperty
Helper.classMethod()

SubHelper.classComputedProperty
SubHelper.classMethod()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>jules</name></author><category term="" /><category term="featured" /><category term="swift" /><category term="data" /><category term="structure" /><category term="static" /><category term="struct" /><category term="class" /><category term="construct" /><category term="type" /><summary type="html">Static is like creating a global variable. You’ll see what I mean when you’ve watched Sean Allen’s video tutorial.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://i.ytimg.com/vi/s2E5hVxQAZQ/hqdefault.jpg" /></entry><entry><title type="html">Take Your Swift Data Structures Knowledge To The Next Level</title><link href="http://iosjunkie.com/blog/take-your-swift-data-structures-knowledge-to-the-next-level/" rel="alternate" type="text/html" title="Take Your Swift Data Structures Knowledge To The Next Level" /><published>2019-10-05T00:00:00+08:00</published><updated>2019-10-05T00:00:00+08:00</updated><id>http://iosjunkie.com/blog/take-your-swift-data-structures-knowledge-to-the-next-level</id><content type="html" xml:base="http://iosjunkie.com/blog/take-your-swift-data-structures-knowledge-to-the-next-level/">&lt;p&gt;I just found one of the best guides to prepare for your interview. I found out about this in Sean Allen’s Swift News. Though I wouldn’t recommended relying on this alone, in case you need to prepare for an interview, because there are other aspects of iOS development that needs perusing.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/blog/assets/images/Screen%20Shot%202019-10-05%20at%209.26.13%20PM.png&quot; alt=&quot;ray wenderlich&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I don’t always find Ray Wenderlich’s site a great place to look for tutorials. Some of the contents do baffle me sometimes. Although, it’s still a good place to start learning programming, Swift especially. This resource, &lt;a href=&quot;https://www.raywenderlich.com/762435-swift-interview-questions-and-answers&quot;&gt;Swift Interview Questions and Answers&lt;/a&gt;, is a good find for me though. It’s a good place to start learning or refreshing your knowledge on the most utilized methods of using the Swift language. It’s kind of like a flashcard wherein answers are hidden, then you press the reveal button to get an explanation.&lt;/p&gt;

&lt;p&gt;The explanations are superb! It’s not always just a bunch of paragraphs, some have a bunch of examples every step of the way and explained in the simplest-to-understand manner. I mean who needs more explaining when there’s the easy to understand examples. I wish there is a similar resource for &lt;code class=&quot;highlighter-rouge&quot;&gt;GCD&lt;/code&gt; because it is tough for newbies.&lt;/p&gt;</content><author><name>jules</name></author><category term="" /><category term="swift" /><category term="interview" /><category term="questions" /><category term="reference" /><category term="knowledge" /><category term="Xcode" /><category term="iOS" /><summary type="html">I just found one of the best guides to prepare for your interview. I found out about this in Sean Allen’s Swift News. Though I wouldn’t recommended relying on this alone, in case you need to prepare for an interview, because there are other aspects of iOS development that needs perusing.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRX8GiuB-Wn_sJ6WubFAJbuOx_ArtUmQgrbCqpIj6rl9GFHJZ0m" /></entry><entry><title type="html">Swift: If Let vs. Guard Let</title><link href="http://iosjunkie.com/blog/swift-if-let-vs-guard-let/" rel="alternate" type="text/html" title="Swift: If Let vs. Guard Let" /><published>2019-10-04T00:00:00+08:00</published><updated>2019-10-04T00:00:00+08:00</updated><id>http://iosjunkie.com/blog/swift-if-let-vs-guard-let</id><content type="html" xml:base="http://iosjunkie.com/blog/swift-if-let-vs-guard-let/">&lt;p&gt;This is a brief explanation for newbies. It’s because when I was still a newbie, I didn’t really understand how or when to use either of these two. I never touched them at all. If you want a more thorough explanation on this, check out the &lt;a href=&quot;https://docs.swift.org/swift-book/LanguageGuide/OptionalChaining.html&quot;&gt;Swift Language Guide&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if john.residence?.printNumberOfRooms() != nil {
    print(&quot;good&quot;)
} else {
    print(&quot;bad&quot;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Both if and guard checks whether the value of a variable could be nil. They are interchangeable depending on the implementation. Let’s start with the code above. This is a primitive way of checking whether a variable/method is or returns &lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt;. It is closer to how &lt;code class=&quot;highlighter-rouge&quot;&gt;guard&lt;/code&gt; works than &lt;code class=&quot;highlighter-rouge&quot;&gt;if let&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if let firstRoomName = john.residence?[0].name {
    print(firstRoomName)
} else {
    print(&quot;bad.&quot;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It is important to note here that &lt;code class=&quot;highlighter-rouge&quot;&gt;if let&lt;/code&gt; only allows you to acces the new variable &lt;code class=&quot;highlighter-rouge&quot;&gt;firstRoomName&lt;/code&gt; inside the first bracket. That is if  john.residence?[0].name &lt;code class=&quot;highlighter-rouge&quot;&gt;optional&lt;/code&gt; assigns a non-nil value in our new variable.&lt;/p&gt;

&lt;p&gt;Outside this &lt;code class=&quot;highlighter-rouge&quot;&gt;if let&lt;/code&gt; conditional, &lt;code class=&quot;highlighter-rouge&quot;&gt;firstRoomName&lt;/code&gt; cannot be accessed.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;guard let firstRoomName = john.residence?[0].name else {
    print(&quot;bad.&quot;)
    return
}

print(firstRoomName)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;guard let&lt;/code&gt; is just a smart way of making sure a new variable, &lt;code class=&quot;highlighter-rouge&quot;&gt;firstRoomName&lt;/code&gt;, will not be accessible anywhere if it is &lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt;. If &lt;code class=&quot;highlighter-rouge&quot;&gt;firstRoomName&lt;/code&gt; happens to be assigned a &lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt; value, then “bad” will print and will escape the function where this piece of conditional is located, never allowing to pass &lt;code class=&quot;highlighter-rouge&quot;&gt;firstRoomName&lt;/code&gt; to anyone who wants to access its value. The code will not be able to reach the &lt;code class=&quot;highlighter-rouge&quot;&gt;print&lt;/code&gt; line anymore.&lt;/p&gt;

&lt;p&gt;However, if &lt;code class=&quot;highlighter-rouge&quot;&gt;john.residence?[0].name&lt;/code&gt; hold say a string value, then all is good. &lt;code class=&quot;highlighter-rouge&quot;&gt;firstRoomName&lt;/code&gt; will now have an unwrapped value of &lt;code class=&quot;highlighter-rouge&quot;&gt;john.residence?[0].name&lt;/code&gt;.&lt;/p&gt;</content><author><name>jules</name></author><category term="" /><category term="swift" /><category term="language" /><summary type="html">This is a brief explanation for newbies. It’s because when I was still a newbie, I didn’t really understand how or when to use either of these two. I never touched them at all. If you want a more thorough explanation on this, check out the Swift Language Guide.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://i.ytimg.com/vi/P2YZu9MwLaM/maxresdefault.jpg" /></entry><entry><title type="html">MapKit Theme Style Overlay Swift 5</title><link href="http://iosjunkie.com/blog/mapkit-theme-overlay-swift-5/" rel="alternate" type="text/html" title="MapKit Theme Style Overlay Swift 5" /><published>2019-10-04T00:00:00+08:00</published><updated>2019-10-04T00:00:00+08:00</updated><id>http://iosjunkie.com/blog/mapkit-theme-overlay-swift-5</id><content type="html" xml:base="http://iosjunkie.com/blog/mapkit-theme-overlay-swift-5/">&lt;p&gt;You don’t want to use MapBox or GoogleMap? Me too. I don’t want to pay for something that isn’t going to be much different. For now, I don’t see myself using their extra features, whatever those might be.&lt;/p&gt;

&lt;p&gt;I’ve been looking for a workaround for this for a few months now. I must have overlooked this &lt;a href=&quot;https://medium.com/@ortizfernandomartin/customize-mapkits-mkmapview-with-google-maps-styling-wizard-a5dcc095e19f&quot;&gt;post&lt;/a&gt; on Medium. It’s now an outdated solution, but I found a way for it to work. Thanks to Fernando Martín Ortiz for that &lt;a href=&quot;https://medium.com/@ortizfernandomartin/customize-mapkits-mkmapview-with-google-maps-styling-wizard-a5dcc095e19f&quot;&gt;post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There’s this pod, made by Fernando himself, that you need to install.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pod &quot;MapKitGoogleStyler&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Wherever you’re using the map view, you need to import this library: &lt;code class=&quot;highlighter-rouge&quot;&gt;import MapKitGoogleStyler&lt;/code&gt;. And this is the sample code that contains a single change from Fernando’s view controller that shows the map view.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import UIKit
import MapKit
import MapKitGoogleStyler

class ViewController: UIViewController {

    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view.
        
        guard let overlayFileURLString = Bundle.main.path(forResource: &quot;overlay&quot;, ofType: &quot;json&quot;) else {
                return
        }
        let overlayFileURL = URL(fileURLWithPath: overlayFileURLString)
        
        // After that, you can create the tile overlay using MapKitGoogleStyler
        guard let tileOverlay = try? MapKitGoogleStyler.buildOverlay(with: overlayFileURL) else {
            return
        }
        
        // And finally add it to your MKMapView
        mapView.addOverlay(tileOverlay)
    }

    func mapView(_ mapView: MKMapView, rendererFor overlay: MKOverlay) -&amp;gt; MKOverlayRenderer {
            // This is the final step. This code can be copied and pasted into your project
            // without thinking on it so much. It simply instantiates a MKTileOverlayRenderer
            // for displaying the tile overlay.
            if let tileOverlay = overlay as? MKTileOverlay {
                return MKTileOverlayRenderer(tileOverlay: tileOverlay)
            } else {
                return MKOverlayRenderer(overlay: overlay)
            }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You might run into an error because the pod is a bit outdated, but no worries. All you have to do is find that GoogleStyle.swift and replace it with &lt;a href=&quot;https://github.com/iosjunkie/StyleMapKit/blob/master/StyleMapKit/GoogleStyle.swift&quot;&gt;this&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Notice that we need a json file named &lt;code class=&quot;highlighter-rouge&quot;&gt;overlay&lt;/code&gt;. It’s where our theme’s color scheme lies, but make sure you’ve configured the &lt;code class=&quot;highlighter-rouge&quot;&gt;json&lt;/code&gt; file this way. Otherwise, your json will not be found by &lt;code class=&quot;highlighter-rouge&quot;&gt;Bundle.main.path(forResource: &quot;overlay&quot;, ofType: &quot;json&quot;) &lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/Screen%20Shot%202019-10-04%20at%209.22.14%20PM.png&quot; alt=&quot;json&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You may be wondering, where do I get such theme? Did I make those myself?&lt;/p&gt;

&lt;p&gt;No, silly! I copied that JSON file. There’s actually tons of those themes out there. I just got mine from &lt;a href=&quot;https://snazzymaps.com/style/282895/xemeneies-pou&quot;&gt;Snazzy Maps&lt;/a&gt;.&lt;/p&gt;</content><author><name>jules</name></author><category term="" /><category term="featured" /><category term="swift" /><category term="mapkit" /><category term="UIKit" /><category term="mapbox" /><category term="googlemap" /><summary type="html">You don’t want to use MapBox or GoogleMap? Me too. I don’t want to pay for something that isn’t going to be much different. For now, I don’t see myself using their extra features, whatever those might be.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://iosjunkie.com/blog/assets/images/Simulator%20Screen%20Shot%20-%20iPhone%208%20Plus%20-%202019-10-04%20at%2020.23.31.png" /></entry><entry><title type="html">Faster Build Time Xcode From HDD</title><link href="http://iosjunkie.com/blog/faster-build-time-xcode-from-hdd/" rel="alternate" type="text/html" title="Faster Build Time Xcode From HDD" /><published>2019-10-04T00:00:00+08:00</published><updated>2019-10-04T00:00:00+08:00</updated><id>http://iosjunkie.com/blog/faster-build-time-xcode-from-hdd</id><content type="html" xml:base="http://iosjunkie.com/blog/faster-build-time-xcode-from-hdd/">&lt;p&gt;I’ve had my Xcode projects in the HDD drive ever since. Today, I transferred them to my SSD thinking it would solve my problem. But yeah, I guess it would load my codes faster since it’s already loading my storyboard faster, but there’s a ton of things that Xcode would launch aside from just your code and whatever you’ve put in your project folder.&lt;/p&gt;

&lt;p&gt;There’s this thing called &lt;code class=&quot;highlighter-rouge&quot;&gt;DerivedData&lt;/code&gt; folder. It is defaultly located in your boot hard drive. It’s the location where Xcode stores all kinds of intermediate build results, generated indexes, etc. DerivedData folder is also infamous for growing up to gargantuan sizes. My latest project alone built up 6.33 GB of derived data after I saw my Xcode index and ran build with this project. Horrible! Because my project folder’s contents is only way less than half of that. 2 GB to be exact.&lt;/p&gt;

&lt;p&gt;Now that we know where all those extra files are being sent to, the only logical solution is to change the &lt;code class=&quot;highlighter-rouge&quot;&gt;DerivedData&lt;/code&gt; folder over to your SSD, may it be internal or external. This will in turn make the reads and writes, or writes mostly, faster.&lt;/p&gt;

&lt;p&gt;For more tips about optimizing compilation time, read &lt;a href=&quot;https://codeburst.io/optimizing-compilation-time-for-swift-code-e692376085a6&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;</content><author><name>jules</name></author><summary type="html">I’ve had my Xcode projects in the HDD drive ever since. Today, I transferred them to my SSD thinking it would solve my problem. But yeah, I guess it would load my codes faster since it’s already loading my storyboard faster, but there’s a ton of things that Xcode would launch aside from just your code and whatever you’ve put in your project folder.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://iosjunkie.com/blog/assets/images/Pv7si.png" /></entry><entry><title type="html">Where To Learn Async Callback and Futures</title><link href="http://iosjunkie.com/blog/where-to-learn-async-callback-and-futures/" rel="alternate" type="text/html" title="Where To Learn Async Callback and Futures" /><published>2019-10-03T00:00:00+08:00</published><updated>2019-10-03T00:00:00+08:00</updated><id>http://iosjunkie.com/blog/where-to-learn-async-callback-and-futures</id><content type="html" xml:base="http://iosjunkie.com/blog/where-to-learn-async-callback-and-futures/">&lt;p&gt;One of my favorite online tutors is Let’s Build That App. He’s really good with his YouTube thing going on. Makes me understand a lot of Swift stuff that I never imagined to be digging into. Most of this article is coming from his tutorial and I’ve also included his video in case anyone’s interested.&lt;/p&gt;

&lt;p&gt;Async is concurrent. It does not wait for something to finish for it to start working. When you hear async, think low priority, background, and fetching data. That much I know.&lt;/p&gt;

&lt;p&gt;Fernando Martín Ortiz is another iOS developer who’s talked about this. The callback hell he says. Callback hell looks exactly like our picture above. We must refrain from using callbacks with our async functions to avoid spaghetti like codes. Instead, like Let’s Build That App, use &lt;code class=&quot;highlighter-rouge&quot;&gt;Futures&lt;/code&gt;. Whatever the hell that means. Kidding aside, it actually means that it has to &lt;code class=&quot;highlighter-rouge&quot;&gt;return&lt;/code&gt; something in the future instead of making a &lt;code class=&quot;highlighter-rouge&quot;&gt;callback&lt;/code&gt;. Read more about his thoughts on that &lt;a href=&quot;https://medium.com/ios-os-x-development/managing-async-code-in-swift-d7be44cae89f#targetText=You%20call%20that%20function%20and,resolved%2C%20is%20commonly%20called%20then.&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now let me dive into Let’s Build That App’s (LBTA) precious little code from his video tutorial. In this video, he shows how to convert a callback async function into a future async function. There’s a lot of code here that’ll overwhelm a newbie.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/JHqxmBFrWl8&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;enum NetworkError: Error {
    case url
    case statusCode
    case standard
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s start with the simplest tiniest detail that we have to wrap our brains with. If you’re a newbie, you might be intimidated from using enums. I know I do. &lt;code class=&quot;highlighter-rouge&quot;&gt;NetworkError&lt;/code&gt; is just a name here and you can change it however you like. It inherits an &lt;code class=&quot;highlighter-rouge&quot;&gt;Error&lt;/code&gt; which has no requirements of its own, you can declare conformance on any custom type you create. Hence, url, statusCode, and standard are just made up by LBTA. You can add more cases of your own words. In the end, these cases will be printed as strings anyway. For example, case url when printed &lt;code class=&quot;highlighter-rouge&quot;&gt;print(NetworkError.url)&lt;/code&gt; will return “url”.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func fetchSomethingAsyncAwait(url: String) throws -&amp;gt; Data? {
    guard let dummyURL = URL(string: url) else {
        throw NetworkError.url
    }
    
    var data: Data?
    var response: URLResponse?
    var error: Error?
    
    // Semaphore
    let semaphore = DispatchSemaphore(value: 0)
		
    URLSession.shared.dataTask(with: dummyURL) { (d, r, e) in
        data = d
        response = r
        error = e
        
        semaphore.signal()
    }.resume()
    
    // this will return a result, doing this will just get rid of the warning
    // but its still functional without assigning it to an underscore
    _ = semaphore.wait(timeout: .distantFuture)
    
    if let httpURLResponse = response as? HTTPURLResponse, httpURLResponse.statusCode &amp;gt; 300 {
        throw NetworkError.statusCode
    }
    
    if error != nil {
        throw NetworkError.standard
    }
    
    return data
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is a &lt;code class=&quot;highlighter-rouge&quot;&gt;Future&lt;/code&gt;. You know when you see one because it needs to return something, &lt;code class=&quot;highlighter-rouge&quot;&gt;Data?&lt;/code&gt;. This is a function that can throw an error. So every time you use this function, you must always put it inside a do &lt;code class=&quot;highlighter-rouge&quot;&gt;try&lt;/code&gt; catch.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;do {
    let data = try fetchSomethingAsyncAwait(url: &quot;http://google.com&quot;)
} catch {
    print(&quot;Failed to Fetch stuff: &quot;, error)
    return
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If this catches an error, it might print something like “Failed to Fetch stuff: statusCode”.&lt;/p&gt;

&lt;p&gt;But the most intriguing part of his code is the semaphore. He scheduled the return to execute after the URLSession has finished its task. If there was no semaphore, then the data? might return nil. That’s because he didn’t initialize data when he first created it and it is an optional. With this semaphore superpower, he was able to ask the main thread to wait until a &lt;code class=&quot;highlighter-rouge&quot;&gt;signal()&lt;/code&gt; has been found in the distant future.&lt;/p&gt;

&lt;p&gt;URLSession is the async here, and it is making another thread in the background. Once URLSession’s task reached til the end of its closure, the &lt;code class=&quot;highlighter-rouge&quot;&gt;semaphore.signal()&lt;/code&gt; will ask the &lt;code class=&quot;highlighter-rouge&quot;&gt;fetchSomethingAsyncAwait()&lt;/code&gt; function to continue where it left off.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;if let httpURLResponse = response as? HTTPURLResponse, httpURLResponse.statusCode &amp;gt; 300&lt;/code&gt; is the next thing after coming back to the main thread, then the &lt;code class=&quot;highlighter-rouge&quot;&gt;if error != nil&lt;/code&gt;. This way, if no error has been thrown, the &lt;code class=&quot;highlighter-rouge&quot;&gt;return data&lt;/code&gt; will surely have a value to return, otherwise, it returns nil.&lt;/p&gt;

&lt;p&gt;To know better about semaphores, check &lt;a href=&quot;/blog/where-better-to-understand-semaphores-swift/&quot;&gt;this&lt;/a&gt; out.&lt;/p&gt;</content><author><name>jules</name></author><category term="" /><category term="async" /><category term="callback" /><category term="hell" /><category term="futures" /><category term="swift" /><category term="algorithm" /><category term="advanced" /><category term="await" /><summary type="html">One of my favorite online tutors is Let’s Build That App. He’s really good with his YouTube thing going on. Makes me understand a lot of Swift stuff that I never imagined to be digging into. Most of this article is coming from his tutorial and I’ve also included his video in case anyone’s interested.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://iosjunkie.com/blog/assets/images/reactivecocoa-functional-reactive-programming-concepts-in-ios-11-638.jpg" /></entry><entry><title type="html">Where Better To Understand Semaphores (Swift)</title><link href="http://iosjunkie.com/blog/where-better-to-understand-semaphores-swift/" rel="alternate" type="text/html" title="Where Better To Understand Semaphores (Swift)" /><published>2019-10-03T00:00:00+08:00</published><updated>2019-10-03T00:00:00+08:00</updated><id>http://iosjunkie.com/blog/where-better-to-understand-semaphores-swift</id><content type="html" xml:base="http://iosjunkie.com/blog/where-better-to-understand-semaphores-swift/">&lt;p&gt;Thanks to Roy Kronenfeld’s &lt;a href=&quot;https://medium.com/@roykronenfeld/semaphores-in-swift-e296ea80f860&quot;&gt;Medium post&lt;/a&gt; for this explanation of how to use a semaphore, specifically, utilizing the counter: &lt;code class=&quot;highlighter-rouge&quot;&gt;let semaphore = DispatchSemaphore(value: 0)&lt;/code&gt;. Another &lt;a href=&quot;https://www.youtube.com/watch?v=6rJN_ECd1XM&quot;&gt;tutorial&lt;/a&gt; was made by &lt;code class=&quot;highlighter-rouge&quot;&gt;Let's Build That App&lt;/code&gt; but semaphore wasn’t covered in great detail, and I think it’s best if all iOS developers dive into the semaphore counters the way Roy did.&lt;/p&gt;

&lt;p&gt;In Roy’s tutorial, it’s more on semaphore counters. But if you want to see semaphore in action, kindly refer to my &lt;a href=&quot;/blog/where-to-learn-async-callback-and-futures/&quot;&gt;previous post&lt;/a&gt; where it is applied on a &lt;code class=&quot;highlighter-rouge&quot;&gt;Futures&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;His sample analogy was most brilliant. If you don’t need to access a shared resource, feel free to use DispatchQueue. If you do, then you should consider &lt;code class=&quot;highlighter-rouge&quot;&gt;Semaphores&lt;/code&gt;. The shared resource here is the &lt;code class=&quot;highlighter-rouge&quot;&gt;iPad&lt;/code&gt; that 3 kids share. To cut the story short, there is only one iPad and our counter needs a value of only &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;.  Only one iPad can be shared among 3 kids at a time.&lt;/p&gt;

&lt;p&gt;Another example of his is downloading songs. He wants 15 songs to be downloaded and he wants  to download 3 songs at a time. Therefore, you’ve guessed it, the counter is set to &lt;code class=&quot;highlighter-rouge&quot;&gt;3&lt;/code&gt;. The shared resource here is the downloading processes or threads, not the song.&lt;/p&gt;

&lt;p&gt;If you want a more elaborate explanation on how this counting algorithm works, head on to his &lt;a href=&quot;https://medium.com/@roykronenfeld/semaphores-in-swift-e296ea80f860&quot;&gt;blog post&lt;/a&gt; for more.&lt;/p&gt;</content><author><name>jules</name></author><category term="" /><category term="featured" /><category term="semaphore" /><category term="swift" /><category term="counter" /><category term="dispatchqueue" /><category term="centreal" /><category term="grand" /><category term="central" /><category term="dispatch" /><summary type="html">Thanks to Roy Kronenfeld’s Medium post for this explanation of how to use a semaphore, specifically, utilizing the counter: let semaphore = DispatchSemaphore(value: 0). Another tutorial was made by Let's Build That App but semaphore wasn’t covered in great detail, and I think it’s best if all iOS developers dive into the semaphore counters the way Roy did.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://iosjunkie.com/blog/assets/images/1_7aP7xcLcB6cJ9wySieNNCA.gif" /></entry><entry><title type="html">Sean Allen Finally Learns SwiftUI</title><link href="http://iosjunkie.com/blog/sean-allen-finally-learns-swiftui/" rel="alternate" type="text/html" title="Sean Allen Finally Learns SwiftUI" /><published>2019-10-03T00:00:00+08:00</published><updated>2019-10-03T00:00:00+08:00</updated><id>http://iosjunkie.com/blog/sean-allen-finally-learns-swiftui</id><content type="html" xml:base="http://iosjunkie.com/blog/sean-allen-finally-learns-swiftui/">&lt;p&gt;I’ve seen him talk about how he was hesitant to dive into learning Swift UI. I took his sentiment as my own because I don’t really see why I needed to.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/i7o76KejmQE&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;Mostly in this video is an ad to &lt;a href=&quot;https://designcode.io/&quot;&gt;designcode.io&lt;/a&gt; which is still really a quality content. I only knew about Ray Wenderlich, Treehouse, Coursera, and Udemy in regards to taking courses in relation to Xcode, but this is another one. I don’t know how long it has existed but Meng To, creator of DesignCode, has been updating his courses profoundly like Sean says.&lt;/p&gt;

&lt;p&gt;I still haven’t seen myself using SwiftUI because I haven’t upgraded to Catalina yet. And without Catalina, my Xcode would not render the canvas beside my code. It would kinda defeat the purpose of me using SwiftUI if I don’t see the changes in my codes. Although that may be the case, I’ve been watching SwiftUI tutorials since because it seems to get a lot better that I initially thought it’d be.&lt;/p&gt;

&lt;p&gt;Considering Sean’s talk about his dealings in the SwiftUI realm with DesignCode, I’m now interested to see what I could learn and do too, myself. It took him about seven days to finish the course.&lt;/p&gt;

&lt;p&gt;DesignCode’s course can be billed annually for $108, which will not renew automatically. But if you choose to subscribe for one month, it would cost you $15, which will renew monthly. So for me, it doesn’t look like I’m ready to make that commitment yet of taking his course. Maybe I’ll just look for free lessons out there and it’d be wise if you too. Unless you really want to learn the designs and animations part, you might find his course worth every penny.&lt;/p&gt;</content><author><name>jules</name></author><category term="" /><category term="featured" /><category term="swiftui" /><category term="swift" /><category term="sean" /><category term="allen" /><category term="youtuber" /><category term="designcode" /><category term="course" /><category term="learn" /><category term="Xcode" /><category term="build" /><category term="bootcamp" /><summary type="html">I’ve seen him talk about how he was hesitant to dive into learning Swift UI. I took his sentiment as my own because I don’t really see why I needed to.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://iosjunkie.com/blog/assets/images/mqdefault.jpg" /></entry></feed>