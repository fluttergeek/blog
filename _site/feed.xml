<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://iosjunkie.com/blog/feed.xml" rel="self" type="application/atom+xml" /><link href="http://iosjunkie.com/blog/" rel="alternate" type="text/html" /><updated>2019-10-14T15:22:54+08:00</updated><id>http://iosjunkie.com/blog/feed.xml</id><title type="html">iOS Junkie</title><subtitle>Demystifying complex instructions, tutorials, and a little bit more geared toward the iOS development or Swift stuff. Technical yet simple tips on how iOS components work.</subtitle><entry><title type="html">Let’s Start Using Swift Package Manager</title><link href="http://iosjunkie.com/blog/lets-start-using-swift-package-manager/" rel="alternate" type="text/html" title="Let's Start Using Swift Package Manager" /><published>2019-10-14T00:00:00+08:00</published><updated>2019-10-14T00:00:00+08:00</updated><id>http://iosjunkie.com/blog/lets-start-using-swift-package-manager</id><content type="html" xml:base="http://iosjunkie.com/blog/lets-start-using-swift-package-manager/">&lt;p&gt;The first time I encountered the word &lt;code class=&quot;highlighter-rouge&quot;&gt;Swift Package Manager&lt;/code&gt; was just a few days ago while searching for alternative ways to install the &lt;code class=&quot;highlighter-rouge&quot;&gt;Firebase&lt;/code&gt; framework in my project. I thought &lt;code class=&quot;highlighter-rouge&quot;&gt;Carthage&lt;/code&gt; was a holy grail. Boy, am I wrong now that I’ve seen how to install frameworks with Swift Package Manager.&lt;/p&gt;

&lt;p&gt;The process of adding a framework to your project with SwiftPM is pretty straightforward. Get the git url from the project’s github that is SwiftPM supported. Then in your Xcode, go to &lt;code class=&quot;highlighter-rouge&quot;&gt;File » Swift Packages » Add Package Dependency&lt;/code&gt;. Enter the git url and click &lt;code class=&quot;highlighter-rouge&quot;&gt;next&lt;/code&gt;. You will be given an option to choose the latest version or from another branch, typical &lt;code class=&quot;highlighter-rouge&quot;&gt;Github&lt;/code&gt; jargon really.&lt;/p&gt;

&lt;p&gt;That wasn’t so hard was it? No more using that freaking terminal or creating a &lt;code class=&quot;highlighter-rouge&quot;&gt;Podfile&lt;/code&gt; or a &lt;code class=&quot;highlighter-rouge&quot;&gt;Cartfile&lt;/code&gt;. Everything is handed to you by Xcode now. And like, basically, everyone can easily create their own packages and push them to github. I never really had any idea how those pods came to be published or approved after being made by their creators, but this time everyone gets to be creator &amp;gt;:)&lt;/p&gt;

&lt;p&gt;And while there’s a &lt;code class=&quot;highlighter-rouge&quot;&gt;cocoapods.org&lt;/code&gt;, there’s also &lt;a href=&quot;https://swiftpack.co/&quot;&gt;swiftpack.co&lt;/a&gt; to look for existing packages. Alamofire and SwiftyJSON are some familiar packages listed in that repository.&lt;/p&gt;

&lt;p&gt;There’s a ridiculously simple explanation on how to create a &lt;code class=&quot;highlighter-rouge&quot;&gt;Swift Package&lt;/code&gt;:&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/xu9oeCAS8aA&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;</content><author><name>jules</name></author><category term="" /><category term="tutorial" /><category term="swift" /><category term="package" /><category term="manager" /><category term="review" /><summary type="html">The first time I encountered the word Swift Package Manager was just a few days ago while searching for alternative ways to install the Firebase framework in my project. I thought Carthage was a holy grail. Boy, am I wrong now that I’ve seen how to install frameworks with Swift Package Manager.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://miro.medium.com/max/1200/1*ooI0KwILz0Yo2cXUaW9gog.png" /></entry><entry><title type="html">Enums For Beginners</title><link href="http://iosjunkie.com/blog/enums/" rel="alternate" type="text/html" title="Enums For Beginners" /><published>2019-10-13T00:00:00+08:00</published><updated>2019-10-13T00:00:00+08:00</updated><id>http://iosjunkie.com/blog/enums</id><content type="html" xml:base="http://iosjunkie.com/blog/enums/">&lt;p&gt;Enums can be confusing for everybody, especially the newbies. I mean, why use those when you can just create variables and constructs. It does the same right? Some claim that they use enum to make their code type-safe, error free and easy to use. I guess that would be true if an app is becoming perplexingly complex.&lt;/p&gt;

&lt;p&gt;In basic form, it can look like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;enum Directions {
    case north
    case south
    case east
    case west
}
 
 
// Defining multiple cases on a single line
 
enum Directions { 
    case north, south, east, west 
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cool, so what then? How and why would you want to use those? After calling forth &lt;code class=&quot;highlighter-rouge&quot;&gt;Directions.north&lt;/code&gt; with a &lt;code class=&quot;highlighter-rouge&quot;&gt;print&lt;/code&gt;, you’ll just see this in the console &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;north\n&quot;&lt;/code&gt;. You might wonder why is this even useful? It’s like calling a variable inside of a struct type.&lt;/p&gt;

&lt;p&gt;Let’s move on to Raw Values. We now know that cases will return a string. Aside from it, it can also return a &lt;code class=&quot;highlighter-rouge&quot;&gt;rawValue&lt;/code&gt;. Just how do we do that? It’s easy, just inherit from a type by doing something like this: &lt;code class=&quot;highlighter-rouge&quot;&gt;enum Directions: Int&lt;/code&gt;. Now when you print(&lt;code class=&quot;highlighter-rouge&quot;&gt;Directions.north.rawValue&lt;/code&gt;), you’ll get &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;. It’s just like Directions became some sort of array and north is indexed at &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;.  Here’s another example for that:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;enum AnimationCurve: Int {
    case easeInOut, easeIn, easeOut, linear
}

print(AnimationCurve.easeIn.rawValue)
// &quot;1\n&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The next example will not be able to inherit from types to call &lt;code class=&quot;highlighter-rouge&quot;&gt;rawValues&lt;/code&gt; from cases.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;enum Directions {
    case north(String)
    case south(latitude: Double, longitude: Double)
    case east(String)
    case west(String)
}
 
var digitalCompass = Directions.south(latitude: -120.83, longitude: 37.0)
print(digitalCompass)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When printed, this will give a value of &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;south(latitude: -120.83, longitude: 37.0)\n&quot;&lt;/code&gt;. Neat huh? So, basically it’s a string. Cases are a f***ing string with like no spaces because they are also variable names at the same time! Genius!&lt;/p&gt;

&lt;p&gt;How do we get the values inside of the parenthesis? Is there some kind of rawValue mechanism we can use for this? As a matter of fact, there is! We can print a form of string from the values inside of these parentheses. If you trust me on this, we can print out &lt;code class=&quot;highlighter-rouge&quot;&gt;Latitude is 0.5, while longitude is 0.6&lt;/code&gt; just by printing &lt;code class=&quot;highlighter-rouge&quot;&gt;print(Directions.south(latitude: 0.5, longitude: 0.6).description)&lt;/code&gt;. We just have to extend this enum like it’s some kind of construct and create a computed property, we chose to use the word &lt;code class=&quot;highlighter-rouge&quot;&gt;description&lt;/code&gt; as you can see. It can be anything actually.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;extension Directions {
    var description: String {
        switch self {
        case .sorth(let direction):
            return direction
        case .south(let latitude, let longitude):
            return &quot;Latitude is \(latitude), while longitude is \(longitude)&quot;
        case .east(let isItReally):
            return &quot;The direction is \(isItReally)&quot;
        case .west(let westeros):
            return &quot;King's landing is in \(westeros)&quot;
        }
    }
}

print(Directions.south(latitude: 0.5, longitude: 0.6).description)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There’s another way to simply do this without having to call the computed property &lt;code class=&quot;highlighter-rouge&quot;&gt;description&lt;/code&gt; directly. We can inherit this extension from CustomStringConvertible, like this:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;extension Directions: CustomStringConvertible {
    var description: String {
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;, but the computed property should be &lt;code class=&quot;highlighter-rouge&quot;&gt;description&lt;/code&gt;. If you use another variable name instead of it, then you will not be able to use &lt;code class=&quot;highlighter-rouge&quot;&gt;CustomStringConvertible&lt;/code&gt;’s feature.&lt;/p&gt;

&lt;p&gt;Now all you have to do to get the same result is print out &lt;code class=&quot;highlighter-rouge&quot;&gt;Directions.south(latitude: 0.5, longitude: 0.6)&lt;/code&gt; without the &lt;code class=&quot;highlighter-rouge&quot;&gt;description&lt;/code&gt; after it.&lt;/p&gt;

&lt;p&gt;That’s the idea of how to return strings out of enums with parentheses. The &lt;code class=&quot;highlighter-rouge&quot;&gt;let latitude, let longitude&lt;/code&gt; are just parameter names. If you’ve noticed, it can actually be named anything too.&lt;/p&gt;

&lt;p&gt;Now that we know how to work with enums. There are other things you can do with it too, like comparing complex enum’s value to a smilar type of enum. This is a tutorial by &lt;code class=&quot;highlighter-rouge&quot;&gt;Károly Nyisztor&lt;/code&gt; and it teaches just that.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/XsXE3SlzpM4&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;Thanks to &lt;a href=&quot;https://becodable.com/swift-enum/&quot;&gt;BeCodable&lt;/a&gt;, &lt;a href=&quot;https://www.youtube.com/watch?v=XsXE3SlzpM4&quot;&gt;Károly Nyisztor&lt;/a&gt; and &lt;a href=&quot;https://www.avanderlee.com/swift/enumerations/&quot;&gt;Antoine v.d. SwiftLee 🚀&lt;/a&gt;. The examples come from their posts.&lt;/p&gt;</content><author><name>jules</name></author><category term="" /><category term="enums" /><category term="swift" /><category term="tutorial" /><summary type="html">Enums can be confusing for everybody, especially the newbies. I mean, why use those when you can just create variables and constructs. It does the same right? Some claim that they use enum to make their code type-safe, error free and easy to use. I guess that would be true if an app is becoming perplexingly complex.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://becodable.com/wp-content/uploads/2018/09/Swift-Enum.jpg" /></entry><entry><title type="html">Sign In With Apple Swift 5 Tutorial</title><link href="http://iosjunkie.com/blog/sign-in-with-apple-swift-5/" rel="alternate" type="text/html" title="Sign In With Apple Swift 5 Tutorial" /><published>2019-10-12T00:00:00+08:00</published><updated>2019-10-12T00:00:00+08:00</updated><id>http://iosjunkie.com/blog/sign-in-with-apple-swift-5</id><content type="html" xml:base="http://iosjunkie.com/blog/sign-in-with-apple-swift-5/">&lt;p&gt;First of all, a big thanks to Kilo Loco’s &lt;a href=&quot;https://www.youtube.com/watch?v=vuygdr0EcGM&quot;&gt;tutorial&lt;/a&gt;. Check it out. Not only is this feature available for iOS 13 up, it’s also available for Mac OS 10.15.&lt;/p&gt;

&lt;p&gt;This is my favorite feature in iOS 13. Being able to sign in with the option of privacy. Why is that? Well if you use this feature in your app, your user will be able to use a dummy name and a garbage email address. The garbage email address generated by Apple will forward emails to the email associated with the user’s Apple ID. It’s not necessarily the user’s @icloud.com email. It could be his gmail. And of course, the user doesn’t have to change his name to something else and he can opt to use the Apple associated email. As of now, the only information this feature can use are full name and email.&lt;/p&gt;

&lt;p&gt;All the user really has to do, if privacy isn’t the top concern, is click continue with password and then enter the password for your Apple ID. Once the user is done, click &lt;code class=&quot;highlighter-rouge&quot;&gt;continue&lt;/code&gt; and voila!&lt;/p&gt;

&lt;p&gt;So here’s how to do that with UIKit in Swift:&lt;/p&gt;

&lt;p&gt;Go to signing and capabilities -&amp;gt; add Capability -&amp;gt; Sign In with Apple&lt;/p&gt;

&lt;p&gt;import AuthenticationServices in two files, in the model and view controller.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// User.swift // Model
struct User {
    let id: String
    let firstName: String
    let lastName: String
    let email: String

    init(credentials: ASAuthorizationAppleIDCredential) {
        self.id = credentials.user
        self.firstName = credentials.fullName?.givenName ?? &quot;&quot;
        self.lastName = credentials.fullName?.familyName ?? &quot;&quot;
        self.email = credentials.email ?? &quot;&quot;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Notice that only credentials.user is non-optional, and that’s because it is the only guaranteed thing to come out of this. At this point, we don’t know yet what is defined in the scope of what we want to get from our User.&lt;/p&gt;

&lt;p&gt;Now let’s add the sign in button, though Apple has already got us covered on this. It already has its own height. You can’t manually add this on your storyboard, so you’ll have to programmatically code it and programmatically key in the constraints as well. But basically, this is what you’ll need to create the sign in button:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let appleButton = ASAuthorizationAppleIDButton()
appleButton.translatesAutoresizingMaskingIntoConstraints = false
appleButton.addTarget(self, action: #selector(didTapAppleButton), for: .touchUpInside)
view.addSubview(appleButton)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That’s basically what you’ll need to make the button appear. Now let’s make it functional&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@objc func didTapAppleButton() {
    let provider = ASAuthorizationAppleIDProvider()
    let request = provider.createRequest()
    request.requestScopes = [.fulName, .email]
		
    let controller = ASAuthorizationController(authorizationRequests: [request])
    controller.delegate = self
    controller.presentationContextProvider = self
    controller.performRequest()
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The next thing to do is to extend from two delegates: &lt;code class=&quot;highlighter-rouge&quot;&gt;ASAuthorizationControllerDelegate&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ASAuthorizationControllerPresentationContextProviding&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;extension ViewController: ASAuthorizationControllerPresentationContextProviding {
    func presentationAnchor(for controller: ASAuthorizationController) -&amp;gt; ASPresentationAnchor {
        return view.window!
    }
}

extension ViewController: ASAuthorizationControllerDelegate, didCompleteWithAuthorization authorization: ASAuthorization) {
    switch authorization.credential {
    case let credentials as ASAuthorizationAppleIDCredential:
        let user = User(credentials: credentials)
        performSegue(withIdentifier: &quot;goToHome&quot;, sender: user)
    default: break
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That’s pretty much all you have to do to get &lt;code class=&quot;highlighter-rouge&quot;&gt;Sign In with Apple&lt;/code&gt; working, basically.&lt;/p&gt;

&lt;p&gt;Now, you may have heard, if you watched Kilo Loco’s tutorial, about an autologin which I haven’t seen him done a tutorial on it. It would be just like checking if the credential exists or not. I looked it up and here it goes:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let appleIDProvider = ASAuthorizationAppleIDProvider()
appleIDProvider.getCredentialState(forUserID: userIdentifier) { (credentialState, error) in
    switch credentialState {
    case .authorized:
        // The Apple ID credential is valid. Show Home UI Here
        break
    case .revoked:
        // The Apple ID credential is revoked. Show SignIn UI Here.
        break
    case .notFound:
        // No credential was found. Show SignIn UI Here.
        break
    default:
        break
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you want to go over sending your users some email, then you’ll have to configure it further inside your &lt;a href=&quot;https://developer.apple.com/account/resources/services/configure&quot;&gt;Apple Developer Account&lt;/a&gt;.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/vuygdr0EcGM&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;</content><author><name>jules</name></author><category term="" /><category term="sign" /><category term="in" /><category term="login" /><category term="apple" /><category term="swift" /><category term="uikit" /><summary type="html">First of all, a big thanks to Kilo Loco’s tutorial. Check it out. Not only is this feature available for iOS 13 up, it’s also available for Mac OS 10.15.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://iosjunkie.com/blog/assets/images/Screen%20Shot%202019-10-12%20at%201.09.03%20PM.png" /></entry><entry><title type="html">Can You Design iOS Apps If You’re Not A Designer?</title><link href="http://iosjunkie.com/blog/can-you-design-ios-apps-if-youre-not-a-designer/" rel="alternate" type="text/html" title="Can You Design iOS Apps If You're Not A Designer?" /><published>2019-10-11T00:00:00+08:00</published><updated>2019-10-11T00:00:00+08:00</updated><id>http://iosjunkie.com/blog/can-you-design-ios-apps-if-youre-not-a-designer</id><content type="html" xml:base="http://iosjunkie.com/blog/can-you-design-ios-apps-if-youre-not-a-designer/">&lt;p&gt;I’m in no position to give any advise on creating designs because I’ve never been a designer. I only code my way through Xcode and I’ve only begun trying to deploy an app on the App Store. I have been, for months, trying to design my app inside the storyboard. It’s pretty difficult, considering that I frequently need to launch the simulator to see the full splendor of my design. It takes painfully long to build, really, but I don’t regret having been able to experience it. I learned so much about how constraints work on the storyboard. But not designing, no. My designing skills did not improve at all.&lt;/p&gt;

&lt;p&gt;I was really skeptic about wireframing and prototyping. Just now, I think I’m doing what designers call prototyping. I’m starting to do it because I’m tired of clicking my way through the storyboard and it lags sometimes.&lt;/p&gt;

&lt;p&gt;Now, I’m exploring the possibility of designing some aspects of my app in &lt;code class=&quot;highlighter-rouge&quot;&gt;Sketch&lt;/code&gt;. It feels lightweight to use, loads up pretty fast and nothing lags. Cool, right? I just create an artboard that would match the screen size of, say, an iPhone SE. The font size I’m using in Xcode is exactly the font size I’m able to use in &lt;code class=&quot;highlighter-rouge&quot;&gt;Sketch&lt;/code&gt;. All the shapes and sizes are portable by setting the artboard’s screen size to an iPhone-like screen. Feels great to be able to explore colors and shapes much faster.&lt;/p&gt;

&lt;p&gt;Since I’m not really a designer, I take most of my design insights from &lt;code class=&quot;highlighter-rouge&quot;&gt;Dribbble&lt;/code&gt;. I don’t copy the exact designs. However, it’s nice to know which colors complement each other and how shapes will mix and match the other shapes around it. That’s what I’ve been up to in &lt;code class=&quot;highlighter-rouge&quot;&gt;Dribbble&lt;/code&gt;. More often than not, I improvise my own design and it turns up like shit. Now that I’m trying it with &lt;code class=&quot;highlighter-rouge&quot;&gt;Sketch&lt;/code&gt;, it seems to be more plausible to make descent outcome out of my improvisations. I can see the results so fast, I don’t need a simulator for it.&lt;/p&gt;

&lt;p&gt;For icons, I prefer using &lt;a href=&quot;https://apps.apple.com/us/app/icons8-lite/id786188363?mt=12&quot;&gt;Icons8&lt;/a&gt;. It’s an app that allows me to easily drag icons directly from the app to my Assets.xcassets or to &lt;code class=&quot;highlighter-rouge&quot;&gt;Sketch&lt;/code&gt;.&lt;/p&gt;</content><author><name>jules</name></author><category term="" /><category term="design" /><category term="ios" /><category term="swift" /><category term="apps" /><category term="app" /><category term="sketch" /><summary type="html">I’m in no position to give any advise on creating designs because I’ve never been a designer. I only code my way through Xcode and I’ve only begun trying to deploy an app on the App Store. I have been, for months, trying to design my app inside the storyboard. It’s pretty difficult, considering that I frequently need to launch the simulator to see the full splendor of my design. It takes painfully long to build, really, but I don’t regret having been able to experience it. I learned so much about how constraints work on the storyboard. But not designing, no. My designing skills did not improve at all.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://iosjunkie.com/blog/assets/images/Screen%20Shot%202019-10-11%20at%202.44.27%20PM.png" /></entry><entry><title type="html">Experience With Carthage As Opposed To Cocoapods</title><link href="http://iosjunkie.com/blog/experience-with-carthage/" rel="alternate" type="text/html" title="Experience With Carthage As Opposed To Cocoapods" /><published>2019-10-11T00:00:00+08:00</published><updated>2019-10-11T00:00:00+08:00</updated><id>http://iosjunkie.com/blog/experience-with-carthage</id><content type="html" xml:base="http://iosjunkie.com/blog/experience-with-carthage/">&lt;p&gt;Cocoapods makes your build times slower and that’s why I’ve taken the liberty of trying Carthage. Well, from the instructions I’ve read in bigger frameworks like &lt;code class=&quot;highlighter-rouge&quot;&gt;Realm&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;FacebookCore/FacebookLogin&lt;/code&gt;, it is a daunting process. Which is why it took me this long to want to even bother with it. But for some smaller frameworks, it is almost similar to Cocoapod’s process, which I like better. Unfortunately, this arduous shift took painfully long to install the frameworks. Every time I add a new framework to my &lt;code class=&quot;highlighter-rouge&quot;&gt;Cartfile&lt;/code&gt; and update carthage, it downloads everything and builds everything over again. My gahd!&lt;/p&gt;

&lt;p&gt;Apart from that, I didn’t know that I had to take this extra step for each of the framework I’m using.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/Screen%20Shot%202019-10-11%20at%2012.38.52%20AM.png&quot; alt=&quot;IMPORTING&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If I didn’t import all of them there, I’d get this error.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/Screen%20Shot%202019-10-11%20at%2012.30.16%20AM.png&quot; alt=&quot;error&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There’s also another step you have to do:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Go to Build Phases&lt;/li&gt;
  &lt;li&gt;Click &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; and add New Run Script Phase&lt;/li&gt;
  &lt;li&gt;Type &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/local/bin/carthage copy-frameworks&lt;/code&gt; in the ginormous textarea under &lt;code class=&quot;highlighter-rouge&quot;&gt;Shell /bin/sh&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We’re not done yet. Phew! For every framework you add, you also need to add their location in the &lt;code class=&quot;highlighter-rouge&quot;&gt;input files&lt;/code&gt;. For this, I used &lt;code class=&quot;highlighter-rouge&quot;&gt;Carting&lt;/code&gt;. It creates a &lt;code class=&quot;highlighter-rouge&quot;&gt;xcfilelist&lt;/code&gt; for input files and output files for all of it. &lt;a href=&quot;https://github.com/artemnovichkov/Carting&quot;&gt;Check it out&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There were a few frameworks that just doesn’t work with Carthage, those being:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;GMStepper - No carthage available&lt;/li&gt;
  &lt;li&gt;BetterSegmentedControl - Error during Carthage installation&lt;/li&gt;
  &lt;li&gt;Firebase - They will not be maintaining their Carthage archives anymore. They’d rather invest it on &lt;code class=&quot;highlighter-rouge&quot;&gt;Swift Package Manager&lt;/code&gt;, though I’d still have to look it up one day.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For these three, I maintained the use of Cocoapods. It can works hand in hand with Carthage.&lt;/p&gt;

&lt;p&gt;I’m not sure I’ve noticed any changes, because Firebase is the heaviest framework I have and it is installed with Cocoapods, thereby still making my build time really slow. Apart from that, I don’t really see the rest of the frameworks build anymore. I guess that’s an improvement.&lt;/p&gt;</content><author><name>jules</name></author><category term="" /><category term="carthage" /><category term="swift" /><category term="cocoapods" /><category term="cocoapod" /><category term="pod" /><category term="import" /><category term="libraries" /><category term="framework" /><category term="bettersegmentedcontrol" /><category term="gmstepper" /><summary type="html">Cocoapods makes your build times slower and that’s why I’ve taken the liberty of trying Carthage. Well, from the instructions I’ve read in bigger frameworks like Realm and FacebookCore/FacebookLogin, it is a daunting process. Which is why it took me this long to want to even bother with it. But for some smaller frameworks, it is almost similar to Cocoapod’s process, which I like better. Unfortunately, this arduous shift took painfully long to install the frameworks. Every time I add a new framework to my Cartfile and update carthage, it downloads everything and builds everything over again. My gahd!</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://koenig-media.raywenderlich.com/uploads/2017/08/Carthage-feature-2.png" /></entry><entry><title type="html">Sign Out Firebase And Remove Access Token</title><link href="http://iosjunkie.com/blog/sign-out-firebase-and-remove-access-token/" rel="alternate" type="text/html" title="Sign Out Firebase And Remove Access Token" /><published>2019-10-09T00:00:00+08:00</published><updated>2019-10-09T00:00:00+08:00</updated><id>http://iosjunkie.com/blog/sign-out-firebase-and-remove-access-token</id><content type="html" xml:base="http://iosjunkie.com/blog/sign-out-firebase-and-remove-access-token/">&lt;p&gt;I call the &lt;code class=&quot;highlighter-rouge&quot;&gt;signOut()&lt;/code&gt; to sign out, but there’s really a lot of things going on inside my call. I’m not sure which is the correct way to do this yet, but what I’m trying to achieve is once I’m signed off, my login view will not automatically sign me back in. My login view checks if the access token contains a token, and if it does, then automatically sign me in and performSegue.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func logOut(completion:@escaping(_ errorOccured: Bool) -&amp;gt; Void)  {
    let firebaseAuth = Auth.auth()
    var err: Bool = true
    defer { completion(err) }
    do {
        try firebaseAuth.signOut()
        err = false
    } catch _ as NSError {
        err = true
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is how my closure function looks like before I try to remove the access token in the next function that you’ll see.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;If it tried to &lt;code class=&quot;highlighter-rouge&quot;&gt;signOut()&lt;/code&gt; successfully,  there will be no error, otherwise there will be.&lt;/li&gt;
  &lt;li&gt;The error’s boolean value will be passed to my completion block which will happen after the function scope will be exited.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func signOut() {
    logOut { (err) in
        guard err == false else {
            self.showError(message: &quot;Unsuccessful logout :(&quot;)
            return
        }
        AccessToken.current = nil
        UserDefaults.standard.removePersistentDomain(forName: Bundle.main.bundleIdentifier!)
        AccessToken.refreshCurrentAccessToken( { (request, any, err) in
            if AccessToken.current != nil {} else {
                self.performSegue(withIdentifier: &quot;goToLogin&quot;, sender: self)
            }
        })
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;When logOut is completed, the closure’s contents will be executed, unless if there was an error, then show an error to the user and skip removing the access token.&lt;/p&gt;

&lt;p&gt;I’m only trying to remove the access token and make sure it is empty before I perform the segue.&lt;/p&gt;

&lt;p&gt;So far this works for me, but then I’ll have to call &lt;code class=&quot;highlighter-rouge&quot;&gt;AccessToken.refreshCurrentAccessToken&lt;/code&gt; again in my login view to make sure access token is nil by the time I’m signed out. If I omitted that, my access token still contains the token. It is redudant to call &lt;code class=&quot;highlighter-rouge&quot;&gt;AccessToken.refreshCurrentAccessToken&lt;/code&gt; again ni both views but so far this is the only thing that works for me now.&lt;/p&gt;</content><author><name>jules</name></author><category term="" /><category term="firebase" /><category term="sign" /><category term="out" /><category term="feature" /><category term="access" /><category term="token" /><category term="defer" /><category term="login" /><summary type="html">I call the signOut() to sign out, but there’s really a lot of things going on inside my call. I’m not sure which is the correct way to do this yet, but what I’m trying to achieve is once I’m signed off, my login view will not automatically sign me back in. My login view checks if the access token contains a token, and if it does, then automatically sign me in and performSegue.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.hasura.io/content/images/2019/03/rawpixel-783430-unsplash-1.jpg" /></entry><entry><title type="html">Notification And Observer: The Basics</title><link href="http://iosjunkie.com/blog/notification-and-observer-the-basics/" rel="alternate" type="text/html" title="Notification And Observer: The Basics" /><published>2019-10-09T00:00:00+08:00</published><updated>2019-10-09T00:00:00+08:00</updated><id>http://iosjunkie.com/blog/notification-and-observer-the-basics</id><content type="html" xml:base="http://iosjunkie.com/blog/notification-and-observer-the-basics/">&lt;p&gt;This topic is not about Local Notifications or Push Notifications. It is about creating triggers. This is a straightforward snippet of how you call a trigger or the one-liner that notifies the observer:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Trigger/Notifier
NotificationCenter.default.post(name: NSNotification.Name.init(&quot;done&quot;), object: nil)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will look for an observer that will allow you to send this trigger an action. It is looking for an observer named &lt;code class=&quot;highlighter-rouge&quot;&gt;done&lt;/code&gt;. Let’s create that too:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Observer
NotificationCenter.default.addObserver(self, selector: #selector(sortAndStopLoading(n:)), name: NSNotification.Name.init(&quot;done&quot;), object: nil)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now this is something you’d probably find in the &lt;code class=&quot;highlighter-rouge&quot;&gt;viewDidLoad&lt;/code&gt; of your ViewCotroller. Just to create an observation to catch the trigger with the name &lt;code class=&quot;highlighter-rouge&quot;&gt;done&lt;/code&gt; and provides an action when the trigger has been called. Let’s create that action too:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Action
@objc func sortAndStopLoading(n: NSNotification) {
        done += 1
        
        if done == 2 {
            print(&quot;reached&quot;)
            self.sales = self.sales.sorted(by: {($0[&quot;number&quot;] as! Int) &amp;gt; ($1[&quot;number&quot;] as! Int)})
            self.stopLoading()
        }
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Never mind the content of my function. What is important here is you know how the selector’s given function will actually look like. If you were wondering what is inside my function, it is simply just waiting for the trigger to call this function two times from maybe two different sources of thread that call the same trigger. When both threads are &lt;code class=&quot;highlighter-rouge&quot;&gt;done&lt;/code&gt;, then we can sort the array’s contents and tuck away the loader image.&lt;/p&gt;

&lt;p&gt;If your ViewController is done &lt;code class=&quot;highlighter-rouge&quot;&gt;observing&lt;/code&gt;, and we disappear from this view or something, we should remove this observer like so:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;deinit {
    NotificationCenter.default.removeObserver(self, name: NSNotification.Name.init(&quot;done&quot;), object: nil)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;or like this&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;override func viewDidDisappear(_ animated: Bool) {
    NotificationCenter.default.removeObserver(self, name: NSNotification.Name.init(&quot;done&quot;), object: nil)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>jules</name></author><category term="" /><category term="featured" /><category term="swift" /><category term="notification" /><category term="observer" /><category term="push" /><category term="local" /><category term="remote" /><category term="trigger" /><summary type="html">This topic is not about Local Notifications or Push Notifications. It is about creating triggers. This is a straightforward snippet of how you call a trigger or the one-liner that notifies the observer:</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://iosjunkie.com/blog/assets/images/1_Ca69vjmxQIdkOfW-O6hZaA.png" /></entry><entry><title type="html">Check If Online Swift 5</title><link href="http://iosjunkie.com/blog/check-if-online-swift-5/" rel="alternate" type="text/html" title="Check If Online Swift 5" /><published>2019-10-09T00:00:00+08:00</published><updated>2019-10-09T00:00:00+08:00</updated><id>http://iosjunkie.com/blog/check-if-online-swift-5</id><content type="html" xml:base="http://iosjunkie.com/blog/check-if-online-swift-5/">&lt;p&gt;Thanks to &lt;a href=&quot;https://www.hackingwithswift.com/example-code/networking/how-to-check-for-internet-connectivity-using-nwpathmonitor&quot;&gt;Paul Hudson @twostraws&lt;/a&gt; for the informative knowledge on how to check for internet connection. Let me remind you that this solution is available since iOS 12.0. WWDC in June 2018 introduced the Network framework available from iOS 12 onwards which includes the NWPathMonitor class, which we will be using in this tutorial. Here’s a straight forward example of the basic implementation on how to check for internet connection.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import Network
private let monitor = NWPathMonitor()
monitor.start(queue: queue)
monitor.pathUpdateHandler = { path in
    if path.status == .satisfied {
        print(&quot;Online&quot;)
    } else {
        print(&quot;Offline)
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;It’s so much shorter than the previous baffling solutions that you can find on stackoverflow. &lt;a href=&quot;https://stackoverflow.com/questions/30743408/check-for-internet-connection-with-swift&quot;&gt;Previous solutions&lt;/a&gt; had to be particular about the connectivity. If it’s coming from a WiFi, 4G, 3G or cellular data. My previous way of checking the internet connection was to use &lt;code class=&quot;highlighter-rouge&quot;&gt;Alamofire&lt;/code&gt;’s network reachability feature which was way simpler than the other solutions, but I added a library that only uses this one feature. Hence, longer build time for something thatI didn’t necessarily need. Now you don’t even have to worry for the most part. It’s just that simple code that allows you to check for internet connectivity.&lt;/p&gt;

&lt;p&gt;Now, I created something to allow me to check for the internet connection in different parts of my project without having to &lt;code class=&quot;highlighter-rouge&quot;&gt;import Network&lt;/code&gt; all the damn time.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func online(completion: @escaping (Bool) -&amp;gt; Void) {
    let monitor = NWPathMonitor()
    let queue = DispatchQueue.global(qos: .background)
    monitor.start(queue: queue)
    monitor.pathUpdateHandler = { path in
      var err = true
      defer {
        completion(err)
        monitor.cancel()
      }
      if path.status == .satisfied {
        err = false
      } else {
        self.showError(message: &quot;Offline! :(&quot;)
        err = true
      }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note that the we have to cancel the network monitoring that’s been in the background thread, if you want to stop checking for the internet connection. If you don’t cancel it, every time the connectivity changes, your monitor.pathUpdateHandler will execute itself again. I created this inside a singleton which allows me to call this method simply, anywhere, like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Singleton.sharedInstance.online { (err) in
    guard err == false else { return }
		
    // Do whatever online
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There’s a more elaborate article discussing how the &lt;code class=&quot;highlighter-rouge&quot;&gt;Network&lt;/code&gt; framework can be used. Check &lt;a href=&quot;https://medium.com/@rwbutler/nwpathmonitor-the-new-reachability-de101a5a8835&quot;&gt;it&lt;/a&gt; out.&lt;/p&gt;</content><author><name>jules</name></author><category term="" /><category term="online" /><category term="swift" /><category term="check" /><category term="internet" /><category term="connection" /><category term="available" /><category term="offline" /><summary type="html">Thanks to Paul Hudson @twostraws for the informative knowledge on how to check for internet connection. Let me remind you that this solution is available since iOS 12.0. WWDC in June 2018 introduced the Network framework available from iOS 12 onwards which includes the NWPathMonitor class, which we will be using in this tutorial. Here’s a straight forward example of the basic implementation on how to check for internet connection.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQBXD5o0JeyxP-5MmwSZO4lOrONruMPlZmrTRWonLxYsgx1iPYH" /></entry><entry><title type="html">Native Messenger App For Mac OS (Review) vs Caprine vs Goofy vs Franz</title><link href="http://iosjunkie.com/blog/native-messenger-app-for-mac-os-review/" rel="alternate" type="text/html" title="Native Messenger App For Mac OS (Review) vs Caprine vs Goofy vs Franz" /><published>2019-10-08T00:00:00+08:00</published><updated>2019-10-08T00:00:00+08:00</updated><id>http://iosjunkie.com/blog/native-messenger-app-for-mac-os-review</id><content type="html" xml:base="http://iosjunkie.com/blog/native-messenger-app-for-mac-os-review/">&lt;p&gt;I’m currently on Mojave and I just thought that it’s time I use an app for messenger. It takes quite a while to load Facebook messenger on my Chrome browser. Maybe it’s just my internet speed. So I looked for an app on the Mac App Store and there’s not much apps out there for native Mac OS app look of Messenger. This is probably the only one out there. The only one I’ve found at least. I’ve scrolled deep enough to see there’s no other like it. It has decent amount of stars as rating, but does it really live up to it?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/Screen_Shot_2019-10-08_at_7_52_32_PM.png&quot; alt=&quot;chatmate&quot; /&gt;&lt;/p&gt;

&lt;p&gt;What can I say? It really looks native, but it is half-baked. Here’s why:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;The login fields look alright, but the placeholder doesn’t say the username can be accepted too. It’s just &lt;code class=&quot;highlighter-rouge&quot;&gt;Email&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;phone number&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;The login button is especially horrible looking. Just a plane white button with no rounded edges. Its font is too thin and the spacing around the text of the button is just not well thought of.&lt;/li&gt;
  &lt;li&gt;As you can see on the photo, the user’s icon is overlapping the window frame’s buttons.&lt;/li&gt;
  &lt;li&gt;Some text like &lt;code class=&quot;highlighter-rouge&quot;&gt;Chat&lt;/code&gt; is meant to be brighter on this dark mode. It definitely looks more suited to the light mode.&lt;/li&gt;
  &lt;li&gt;The light mode is actually more gray than white.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Other than that, I’m satisfied with the app. I bought it for only a dollar. I’m going to keep on using it because it’s way faster than loading the messenger website.&lt;/p&gt;

&lt;h2 id=&quot;update&quot;&gt;UPDATE:&lt;/h2&gt;

&lt;p&gt;Thanks to &lt;a href=&quot;https://www.reddit.com/r/macapps/comments/dezb0e/native_messenger_app_for_mac_os_review/&quot;&gt;u/Auttoh&lt;/a&gt; and &lt;a href=&quot;https://www.reddit.com/r/macapps/comments/dezb0e/native_messenger_app_for_mac_os_review/&quot;&gt;aadillyas&lt;/a&gt; for responding on my Reddit link post of this blog post. They both gave me a tip on a similar app but not found on the app store. It’s from a &lt;a href=&quot;https://github.com/sindresorhus/caprine/&quot;&gt;github link&lt;/a&gt;. Caprine is an unofficial and privacy-focused Facebook Messenger app with many useful features. As you can see, I didn’t have to pixelate the names of my friends because they have this feature to hide names and avatars. It also allows you to follow the system’s appearance of your mac. Say you are in dark mode, the app will also be in dark mode. If you changed your system’s appearance to light mode, the app will also turn light mode. You can also choose to make its mode independent from the system’s appearance.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/Screen%20Shot%202019-10-09%20at%204.28.52%20AM.png&quot; alt=&quot;caprine&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There’s also a compact mode on this app which hides away the names if your window is tinier. Only pictures of your friends will be shown on the side.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/sindresorhus/caprine/raw/master/media/screenshot-compact.png&quot; alt=&quot;compact&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It looks way more sophisticated than &lt;code class=&quot;highlighter-rouge&quot;&gt;Chatmate&lt;/code&gt; but it doesn’t feel as snappy. It is build on javascript/&lt;code class=&quot;highlighter-rouge&quot;&gt;Electron&lt;/code&gt; hence it is not native. Although, it looks native enough actually. There are still some features that load like a web page, like when choosing &lt;code class=&quot;highlighter-rouge&quot;&gt;stickers&lt;/code&gt; or when loading a conversation from another friend. After a day of using it, I realized how long it takes to open the app. I see a dark empty window first for a maybe 15 to 30 seconds until t loads the messenger web page.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.goofyapp.com/&quot;&gt;Goofy&lt;/a&gt; is another unoffical Messenger mac app. It is also &lt;code class=&quot;highlighter-rouge&quot;&gt;Electron&lt;/code&gt; based. It could be faster because it has much less features than &lt;code class=&quot;highlighter-rouge&quot;&gt;Caprine&lt;/code&gt;, obviously.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.goofyapp.com/img/screenshot.png&quot; alt=&quot;goofy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;That’s Goofy for you! Now that I’ve tried &lt;code class=&quot;highlighter-rouge&quot;&gt;Goofy&lt;/code&gt; too, I can say it really is much lighter. The whole thing after logging in is just a browser. It looks similar to &lt;code class=&quot;highlighter-rouge&quot;&gt;Caprine&lt;/code&gt; actually but as I said, way way less features. This is the lightest among other non-native Messengers.&lt;/p&gt;

&lt;p&gt;Now here’s something I’d like to introduce to you. I’m not sure what this is built on, but it is faster than &lt;code class=&quot;highlighter-rouge&quot;&gt;Caprine&lt;/code&gt;, but I wish it had &lt;code class=&quot;highlighter-rouge&quot;&gt;Caprine's&lt;/code&gt; awesome features. The only thing I love about it is that it loads much faster. Franz is the former Emperor of Austria - but also a messaging app that combines chat &amp;amp; messaging services into one application. &lt;a href=&quot;https://meetfranz.com/&quot;&gt;Franz&lt;/a&gt; currently supports Slack, WhatsApp, WeChat, Facebook Messenger, Telegram, Google Hangouts, GroupMe, Skype and many more.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://meetfranz.com/static/images/franz-screenshot.png&quot; alt=&quot;franz&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It feels lighter than Caprine, but the messenger part is simply a web app of the official &lt;code class=&quot;highlighter-rouge&quot;&gt;Messenger&lt;/code&gt;. Hence, it still isn’t a native solution. How it feels when using the web app is the exact same feel when using &lt;code class=&quot;highlighter-rouge&quot;&gt;Franz&lt;/code&gt; and I can say that it feels much master than &lt;code class=&quot;highlighter-rouge&quot;&gt;Caprine&lt;/code&gt; when loading the stickers. The only downside I can find is that it just keeps asking you to purchase &lt;code class=&quot;highlighter-rouge&quot;&gt;Franz Professional&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/Screen%20Shot%202019-10-09%20at%2010.56.18%20PM.png&quot; alt=&quot;franzprofessional&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It went like this out of nowehere like a screensaver, and I waited 10 seconds for it to go back to messenger mode. It basically does this every time you open up &lt;code class=&quot;highlighter-rouge&quot;&gt;Franz&lt;/code&gt;.&lt;/p&gt;</content><author><name>jules</name></author><category term="" /><category term="review" /><category term="mac" /><category term="os" /><category term="app" /><category term="messenger" /><category term="facebook" /><summary type="html">I’m currently on Mojave and I just thought that it’s time I use an app for messenger. It takes quite a while to load Facebook messenger on my Chrome browser. Maybe it’s just my internet speed. So I looked for an app on the Mac App Store and there’s not much apps out there for native Mac OS app look of Messenger. This is probably the only one out there. The only one I’ve found at least. I’ve scrolled deep enough to see there’s no other like it. It has decent amount of stars as rating, but does it really live up to it?</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://iosjunkie.com/blog/assets/images/Screen%20Shot%202019-10-08%20at%207.52.43%20PM.png" /></entry><entry><title type="html">Basic Implementation of Local Notifications</title><link href="http://iosjunkie.com/blog/basic-implementation-of-local-notifications/" rel="alternate" type="text/html" title="Basic Implementation of Local Notifications" /><published>2019-10-08T00:00:00+08:00</published><updated>2019-10-08T00:00:00+08:00</updated><id>http://iosjunkie.com/blog/basic-implementation-of-local-notifications</id><content type="html" xml:base="http://iosjunkie.com/blog/basic-implementation-of-local-notifications/">&lt;p&gt;Let’s get one thing straight now baby. Local notifications is not the same as &lt;code class=&quot;highlighter-rouge&quot;&gt;Push&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;Remote&lt;/code&gt; notifications. It is also not the same as the Notification-Observer relationship which I will discuss &lt;a href=&quot;/blog/notification-and-observer-the-basics/&quot;&gt;next&lt;/a&gt;. They differ because local notifications don’t need triggers coming from outside the app. Either way, you’ll still need the &lt;code class=&quot;highlighter-rouge&quot;&gt;UNUserNotificationCenter&lt;/code&gt;, and for that, you need to import &lt;code class=&quot;highlighter-rouge&quot;&gt;UserNotifications&lt;/code&gt;. This is usually used in scheduling apps like alarm and todo-list.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// AppDelegate.swift
import UserNotifications

@UIApplicationMain
class AppDelegate: UIResponder, UIApplicationDelegate {

    var window: UIWindow?

    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -&amp;gt; Bool {
        // Override point for customization after application launch.
        
        if #available(iOS 10.0, *) {
          // For iOS 10 display notification (sent via APNS)
          UNUserNotificationCenter.current().delegate = self

          let authOptions: UNAuthorizationOptions = [.alert, .badge, .sound]
          UNUserNotificationCenter.current().requestAuthorization(
            options: authOptions,
            completionHandler: {_, _ in })
        } else {
          let settings: UIUserNotificationSettings =
          UIUserNotificationSettings(types: [.alert, .badge, .sound], categories: nil)
          application.registerUserNotificationSettings(settings)
        }
				
        return ApplicationDelegate.shared.application(application, didFinishLaunchingWithOptions: launchOptions)
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We must have this in our AppDelegate.swift first. It asks permission from the user if he is okay yo receiving notifications from your app. That request will allow &lt;code class=&quot;highlighter-rouge&quot;&gt;alert, badge, and sound&lt;/code&gt;. Depending on how much you want the user to experience the notification. You can omit sound or the other types for example: &lt;code class=&quot;highlighter-rouge&quot;&gt;[.alert, .badge]&lt;/code&gt;. Next is the fun part, and you can choose to put it wherever your app needs it.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 1. Preparing our notification content
let content = UNMutableNotificationContent()
content.title = &quot;Hey kid&quot;
content.body = &quot;Where's your parents?&quot;
content.sound = UNNotificationSound.default()
content.badge = 1

// 2. Preparing when our notification would fire
let date = Date().addingTimeInterval(5)
let dateComponents = Calendar.current.dateComponents([.year, .month, .day, .hour, .minute, .second], from: date)

// 3. Preparing what argument will trigger the notification to come up
let trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents, repeats: false)

// 4. Combining all the preparations into one request
let uuidString = UUID().uuidString
let request = UNNotificationRequest(identifier: uuidString, content: content, trigger: trigger)

// 5. Finally, execute the request
let center = UNUserNotificationCenter.current()
center.add(request) { (err) in
    guard err == nil else { return }
    // Whatever you want to do after firing that badass notification
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;this-algorithm-is-broken-down-into-five-parts&quot;&gt;This algorithm is broken down into five parts.&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Create the content. That’s what the user can see in your notification.
    &lt;ol&gt;
      &lt;li&gt;The badge is the red circular thing on the top right corner of your app’s icon with the number of how many notifications were fired up.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;Setting when to fire up the notification. If you print them out, this is how they’ll look like:
    &lt;ol&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;8 Oct 2019 at 2:53 AM&quot;&lt;/code&gt; // darw&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;year: 2019 month: 10 day: 8 hour: 2 minute: 53 second: 26 isLeapMonth: false &lt;/code&gt; // dateComponents&lt;/li&gt;
      &lt;li&gt;You can create your date component this way to be more specific about the date: &lt;code class=&quot;highlighter-rouge&quot;&gt;DateComponents(year: year, month: month, day: day)&lt;/code&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;Create a trigger and add the &lt;code class=&quot;highlighter-rouge&quot;&gt;when&lt;/code&gt; to it. You can make it repeat its time interval by setting &lt;code class=&quot;highlighter-rouge&quot;&gt;repeat&lt;/code&gt; to true.&lt;/li&gt;
  &lt;li&gt;It’s possible that there may be many requests of triggers, hence we needed that &lt;code class=&quot;highlighter-rouge&quot;&gt;id&lt;/code&gt;. UUID() is one hell of a one liner that can give you a random string. You can use it anywhere actually. It gives off something like this: &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;31A7BADF-93F8-40A0-B642-DEDE7BD6179B\n&quot;&lt;/code&gt; if you print it.&lt;/li&gt;
  &lt;li&gt;Finally we may now make the request appear more tangible and we need the current instance of our notification center to allow such a thing to happen.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;to-add-buttons-on-your-notification&quot;&gt;To add buttons on your notification&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://www.appboy.com/blog/wp-content/uploads/2017/05/Push-Action-Buttons-Example-4-300x169.png&quot; alt=&quot;buttons&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Add something like this to step 1: &lt;code class=&quot;highlighter-rouge&quot;&gt;content.categoryIdentifier = &quot;alarm&quot;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Add something like this before step 5:
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let show = UNNotificationAction(identifier: &quot;show&quot;, title: &quot;Tell me more…&quot;, options: .foreground)
let category = UNNotificationCategory(identifier: &quot;alarm&quot;, actions: [show], intentIdentifiers: [])
center.setNotificationCategories([category])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And make sure your ViewController conforms to &lt;code class=&quot;highlighter-rouge&quot;&gt;UNUserNotificationCenterDelegate&lt;/code&gt; to catch the response coming off from the user’s chosen action on the button.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func userNotificationCenter(_ center: UNUserNotificationCenter, didReceive response: UNNotificationResponse, withCompletionHandler completionHandler: @escaping () -&amp;gt; Void) {
    // pull out the buried userInfo dictionary
    let userInfo = response.notification.request.content.userInfo

    if let customData = userInfo[&quot;customData&quot;] as? String {
        print(&quot;Custom data received: \(customData)&quot;)

        switch response.actionIdentifier {
        case UNNotificationDefaultActionIdentifier:
            // the user swiped to unlock
            print(&quot;Default identifier&quot;)

        case &quot;show&quot;:
            // the user tapped our &quot;show more info…&quot; button
            print(&quot;Show more information…&quot;)
            break

        default:
            break
        }
    }

    // you must call the completion handler when you're done
    completionHandler()
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Thanks to &lt;a href=&quot;https://www.youtube.com/watch?v=JuqQUP0pnZY&quot;&gt;CodeWithChris&lt;/a&gt; and &lt;a href=&quot;https://www.hackingwithswift.com/example-code/system/how-to-set-local-alerts-using-unnotificationcenter&quot;&gt;Paul Hudson @twostraws&lt;/a&gt; for making me understand how to actually do this.&lt;/p&gt;</content><author><name>jules</name></author><category term="" /><category term="local" /><category term="notification" /><category term="push" /><category term="remote" /><category term="UNUsernotification" /><category term="newbies" /><category term="basic" /><summary type="html">Let’s get one thing straight now baby. Local notifications is not the same as Push/Remote notifications. It is also not the same as the Notification-Observer relationship which I will discuss next. They differ because local notifications don’t need triggers coming from outside the app. Either way, you’ll still need the UNUserNotificationCenter, and for that, you need to import UserNotifications. This is usually used in scheduling apps like alarm and todo-list.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://iosjunkie.com/blog/assets/images/Notifications_Top_2x.png" /></entry></feed>