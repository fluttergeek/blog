<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://localhost:4000/blog/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/blog/" rel="alternate" type="text/html" /><updated>2019-10-03T15:09:15+08:00</updated><id>http://localhost:4000/blog/feed.xml</id><title type="html">iOS Junkie</title><subtitle>Demystifying complex instructions, tutorials, and a little bit more on the iOS Swift stuff.</subtitle><entry><title type="html">Where Better To Understand Semaphores (Swift)</title><link href="http://localhost:4000/blog/where-better-to-understand-semaphores-swift/" rel="alternate" type="text/html" title="Where Better To Understand Semaphores (Swift)" /><published>2019-10-03T00:00:00+08:00</published><updated>2019-10-03T00:00:00+08:00</updated><id>http://localhost:4000/blog/where-better-to-understand-semaphores-swift</id><content type="html" xml:base="http://localhost:4000/blog/where-better-to-understand-semaphores-swift/">&lt;p&gt;Thanks to Roy Kronenfeld’s &lt;a href=&quot;https://medium.com/@roykronenfeld/semaphores-in-swift-e296ea80f860&quot;&gt;Medium post&lt;/a&gt; for this explanation.&lt;code class=&quot;highlighter-rouge&quot;&gt; Let's Build That App&lt;/code&gt; made a brief tutorial on this topic but it was not explained much deeper and I think it’s best if all iOS developers dive into the semaphore counters the way Roy did.&lt;/p&gt;

&lt;p&gt;In Roy’s tutorial, it’s more on semaphore counters. But if you want to see semaphore in action, kindly refer to my &lt;a href=&quot;/blog/where-to-learn-async-callback-and-futures/&quot;&gt;previous post&lt;/a&gt; where it is applied on a &lt;code class=&quot;highlighter-rouge&quot;&gt;Futures&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;His sample analogy was most brilliant. If you don’t need to access a shared resource, feel free to use DispatchQueue. If you do, then you should consider &lt;code class=&quot;highlighter-rouge&quot;&gt;Semaphores&lt;/code&gt;. The shared resource here is the &lt;code class=&quot;highlighter-rouge&quot;&gt;iPad&lt;/code&gt; that 3 kids share. To cut the story short, there is only one iPad and our counter needs a value of only &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;.  Only one iPad can be shared among 3 kids at a time.&lt;/p&gt;

&lt;p&gt;Another example of his is downloading songs. He wants 15 songs to be downloaded and he wants  to download 3 songs at a time. Therefore, you’ve guessed it, the counter is set to &lt;code class=&quot;highlighter-rouge&quot;&gt;3&lt;/code&gt;. The shared resource here is the downloading processes or threads, not the song.&lt;/p&gt;

&lt;p&gt;If you want a more elaborate explanation on how this counting algorithm works, head on to his &lt;a href=&quot;https://medium.com/@roykronenfeld/semaphores-in-swift-e296ea80f860&quot;&gt;blog post&lt;/a&gt; for more.&lt;/p&gt;</content><author><name>jules</name></author><category term="" /><category term="featured" /><category term="semaphore" /><category term="swift" /><category term="counter" /><category term="dispatchqueue" /><category term="centreal" /><category term="grand" /><category term="central" /><category term="dispatch" /><summary type="html">Thanks to Roy Kronenfeld’s Medium post for this explanation. Let's Build That App made a brief tutorial on this topic but it was not explained much deeper and I think it’s best if all iOS developers dive into the semaphore counters the way Roy did.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/blog/assets/images/1_7aP7xcLcB6cJ9wySieNNCA.gif" /></entry><entry><title type="html">Codable JSON Parsing</title><link href="http://localhost:4000/blog/codable-json-parsing/" rel="alternate" type="text/html" title="Codable JSON Parsing" /><published>2019-10-03T00:00:00+08:00</published><updated>2019-10-03T00:00:00+08:00</updated><id>http://localhost:4000/blog/codable-json-parsing</id><content type="html" xml:base="http://localhost:4000/blog/codable-json-parsing/">&lt;p&gt;One of the reasons why you should learn this is, first, because you’re an iOS developer. You need to trim down the size of your app by avoiding 3rd party frameworks. Now, let’s look at the code done by &lt;a href=&quot;https://www.youtube.com/watch?v=Oj-2s0ALACE&amp;amp;list=WL&amp;amp;index=12&amp;amp;t=481s&quot;&gt;Code Pro&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let singleDictJSON = &quot;&quot;&quot;
    {
        &quot;foodName&quot;: &quot;Banana&quot;,
        &quot;calories&quot;: 100
    }
&quot;&quot;&quot;.data(using: .utf8)!

class Food: Codable {
    let foodName: String
    let calories: Int
    
    init( foodName: String, calories: Int ){
        self.foodName = foodName
        self.calories = calories
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We are going to decode the json dictionary above. It is in UTF8 for a reason. That is, it allows us to decode it into an object that is an instance of the class &lt;code class=&quot;highlighter-rouge&quot;&gt;Food&lt;/code&gt;. Another requirement for us to be able decode or encode is to make the class inherit &lt;code class=&quot;highlighter-rouge&quot;&gt;Codable&lt;/code&gt;. Decode is just a fancy way of saying “from json to swift object”.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let foodDecoder = JSONDecoder()

do {
    let foodResult = try foodDecoder.decode(Food.self, from: singleDictJSON)
    print(foodResult.foodName)
    print(foodResult.calories)
} catch {
    print(&quot;Failed to decode the food: \(error.localizedDescription)&quot;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Provided that singleDictJSON conforms to the &lt;code class=&quot;highlighter-rouge&quot;&gt;Food&lt;/code&gt; class then it should not throw an error. However say you removed calories and its value, it will throw an error when decoding it into a &lt;code class=&quot;highlighter-rouge&quot;&gt;Food&lt;/code&gt; object. If you stick to that, without a calories in the json, then you’d have to make the calories variable in your class optional, as well as the calories in the initializer. If this is the case, then &lt;code class=&quot;highlighter-rouge&quot;&gt;foodResult.calories&lt;/code&gt; will have a value of nil and will not throw an error if the json does not contain calories.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let apple = Food(foodName: &quot;Apple&quot;, calories: 80)
let jsonEncoder = JSONEncoder()
jsonEncoder.outputFormatting = .prettyPrinted

do {
    let jsonData = try jsonEncoder.encode(apple)
    if let jsonString = String(data: jsonData, encoding: .utf8) {
        print(jsonString)
    }
} catch {
    print(&quot;Failed to decode the food: \(error.localizedDescription)&quot;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What you see is just the reverse of the previous code. It’s pretty simple isn’t it? Encode is just another way of saying “from object to json”. &lt;code class=&quot;highlighter-rouge&quot;&gt;.prettyPrinted&lt;/code&gt; is just a writing option that uses white space and indentation to make the output more readable in the console as opposed to a more compact string. If you have no plans on using print on the jsonString, then you don’t have to make it pretty.&lt;/p&gt;

&lt;p&gt;Here’s a more elaborate code, also taken from Code Pro’s &lt;a href=&quot;https://www.youtube.com/watch?v=Oj-2s0ALACE&amp;amp;list=WL&amp;amp;index=12&amp;amp;t=481s&quot;&gt;video tutorial&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let dogOwnerJSONData = &quot;&quot;&quot;
[
    {
        &quot;name&quot;: &quot;Jameson&quot;,
        &quot;age&quot;: 35,
        &quot;dogs&quot;: [
            {
                &quot;dog_name&quot;: &quot;Bryce&quot;,
                &quot;breed&quot;: &quot;Pug&quot;,
                &quot;age&quot;: 7
            },
            {
                &quot;dog_name&quot;: &quot;Furby&quot;,
                &quot;breed&quot;: &quot;Golden Retriever&quot;,
                &quot;age&quot;: 2
            }
        ]
    },
    {
        &quot;name&quot;: &quot;Liza&quot;,
        &quot;age&quot;: 30
    }
]
&quot;&quot;&quot;.data(using: .utf8)!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Woah! That’s a bigger structure with a more complex pattern. Here, one of the owners don’t actually own a dog. Not even one. That’s insane!&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;struct Dog: Codable {
    let name: String
    let breed: String
    let age: Int
    
    private enum CodingKeys: String, CodingKey {
        case name = &quot;dog_name&quot;
        case breed
        case age
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Woah! That’s even more insane. We’re using CodingKeys now to map to each attributes available for this struct. FYI, structs can also inherit from Codable. Why are we doing the CodingKeys enum? Well, that’s because the dog_name in our json isn’t compliant with the struct’s dog’s name attribute. It will throw an error if we don’t do anything about it. If you’re using CodingKeys, you can’t just map just the one with a different key in the json. Like I said, you have to map to each and every attribute in your struct.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;struct Owner: Codable {
    let name: String
    let age: Int
    let dogs: [Dog]?
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It’s a bit toned down now. &lt;code class=&quot;highlighter-rouge&quot;&gt;Dogs&lt;/code&gt; is now just an optional and it will do just fine if the owner doesn’t have a dog. No error will throw. It’s imperative to note that &lt;code class=&quot;highlighter-rouge&quot;&gt;dogs&lt;/code&gt; is an array here.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let dogOwnerDecoder = JSONDecoder()

do {
    let dogOwners = try dogOwnerDecoder.decode([Owner].self, from: dogOwnerJSONData)
} catch {
    print(&quot;Failed to decode the dog owners: \(error.localizedDescription)&quot;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is familiar, but there’s one tiny difference. We have more than one owner in our json, hence we need an array of &lt;code class=&quot;highlighter-rouge&quot;&gt;Owner&lt;/code&gt; like this &lt;code class=&quot;highlighter-rouge&quot;&gt;[Owner].self&lt;/code&gt;. So that’s how you decode an array.&lt;/p&gt;</content><author><name>jules</name></author><category term="" /><category term="swift" /><category term="codable" /><category term="decode" /><category term="encode" /><category term="SwiftyJSON" /><category term="CodingKeys" /><summary type="html">One of the reasons why you should learn this is, first, because you’re an iOS developer. You need to trim down the size of your app by avoiding 3rd party frameworks. Now, let’s look at the code done by Code Pro.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/blog/assets/images/codable-json-swift-how-to-770x400.jpg" /></entry><entry><title type="html">Where To Learn Async Callback and Futures</title><link href="http://localhost:4000/blog/where-to-learn-async-callback-and-futures/" rel="alternate" type="text/html" title="Where To Learn Async Callback and Futures" /><published>2019-10-03T00:00:00+08:00</published><updated>2019-10-03T00:00:00+08:00</updated><id>http://localhost:4000/blog/where-to-learn-async-callback-and-futures</id><content type="html" xml:base="http://localhost:4000/blog/where-to-learn-async-callback-and-futures/">&lt;p&gt;One of my favorite online tutors is Let’s Build That App. He’s really good with his YouTube thing going on. Makes me understand a lot of Swift stuff that I never imagined to be digging into. Most of this article is coming from his tutorial and I’ve also included his video in case anyone’s interested.&lt;/p&gt;

&lt;p&gt;Async is concurrent. It does not wait for something to finish for it to start working. When you hear async, think low priority, background, and fetching data. That much I know.&lt;/p&gt;

&lt;p&gt;Fernando Martín Ortiz is another iOS developer who’s talked about this. The callback hell he says. Callback hell looks exactly like our picture above. We must refrain from using callbacks with our async functions to avoid spaghetti like codes. Instead, like Let’s Build That App, use &lt;code class=&quot;highlighter-rouge&quot;&gt;Futures&lt;/code&gt;. Whatever the hell that means. Kidding aside, it actually means that it has to &lt;code class=&quot;highlighter-rouge&quot;&gt;return&lt;/code&gt; something in the future instead of making a &lt;code class=&quot;highlighter-rouge&quot;&gt;callback&lt;/code&gt;. Read more about his thoughts on that &lt;a href=&quot;https://medium.com/ios-os-x-development/managing-async-code-in-swift-d7be44cae89f#targetText=You%20call%20that%20function%20and,resolved%2C%20is%20commonly%20called%20then.&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now let me dive into Let’s Build That App’s (LBTA) precious little code from his video tutorial. In this video, he shows how to convert a callback async function into a future async function. There’s a lot of code here that’ll overwhelm a newbie.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/JHqxmBFrWl8&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;enum NetworkError: Error {
    case url
    case statusCode
    case standard
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s start with the simplest tiniest detail that we have to wrap our brains with. If you’re a newbie, you might be intimidated from using enums. I know I do. &lt;code class=&quot;highlighter-rouge&quot;&gt;NetworkError&lt;/code&gt; is just a name here and you can change it however you like. It inherits an &lt;code class=&quot;highlighter-rouge&quot;&gt;Error&lt;/code&gt; which has no requirements of its own, you can declare conformance on any custom type you create. Hence, url, statusCode, and standard are just made up by LBTA. You can add more cases of your own words. In the end, these cases will be printed as strings anyway. For example, case url when printed &lt;code class=&quot;highlighter-rouge&quot;&gt;print(NetworkError.url)&lt;/code&gt; will return “url”.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func fetchSomethingAsyncAwait(url: String) throws -&amp;gt; Data? {
    guard let dummyURL = URL(string: url) else {
        throw NetworkError.url
    }
    
    var data: Data?
    var response: URLResponse?
    var error: Error?
    
    // Semaphore
    let semaphore = DispatchSemaphore(value: 0)
		
    URLSession.shared.dataTask(with: dummyURL) { (d, r, e) in
        data = d
        response = r
        error = e
        
        semaphore.signal()
    }.resume()
    
    // this will return a result, doing this will just get rid of the warning
    // but its still functional without assigning it to an underscore
    _ = semaphore.wait(timeout: .distantFuture)
    
    if let httpURLResponse = response as? HTTPURLResponse, httpURLResponse.statusCode &amp;gt; 300 {
        throw NetworkError.statusCode
    }
    
    if error != nil {
        throw NetworkError.standard
    }
    
    return data
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is a &lt;code class=&quot;highlighter-rouge&quot;&gt;Future&lt;/code&gt;. You know when you see one because it needs to return something, &lt;code class=&quot;highlighter-rouge&quot;&gt;Data?&lt;/code&gt;. This is a function that can throw an error. So every time you use this function, you must always put it inside a do &lt;code class=&quot;highlighter-rouge&quot;&gt;try&lt;/code&gt; catch.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;do {
    let data = `try` fetchSomethingAsyncAwait(url: &quot;http://google.com&quot;)
} catch {
    print(&quot;Failed to Fetch stuff: &quot;, error)
    return
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If this catches an error, it might print something like “Failed to Fetch stuff: statusCode”.&lt;/p&gt;

&lt;p&gt;But the most intriguing part of his code is the semaphore. He scheduled the return to execute after the URLSession has finished its task. If there was no semaphore, then his data might return nil. That’s because he didn’t initialize data when he first created it and it is an optional. With this semaphore superpower, he was able to ask the main thread to wait until a &lt;code class=&quot;highlighter-rouge&quot;&gt;signal()&lt;/code&gt; has been found in the distant future. URLSession is the async here, and it is making another thread in the background. Once URLSession’s task reached til the end of its closure, the signal will ask the main thread to continue. &lt;code class=&quot;highlighter-rouge&quot;&gt;if let httpURLResponse = response as? HTTPURLResponse, httpURLResponse.statusCode &amp;gt; 300&lt;/code&gt; is the next thing after coming back to the main thread, then the &lt;code class=&quot;highlighter-rouge&quot;&gt;if error != nil&lt;/code&gt;. This way, if no error has been thrown, the &lt;code class=&quot;highlighter-rouge&quot;&gt;return data&lt;/code&gt; will surely have a value to return, otherwise, it returns nil.&lt;/p&gt;</content><author><name>jules</name></author><category term="" /><category term="async" /><category term="callback" /><category term="hell" /><category term="futures" /><category term="swift" /><category term="algorithm" /><category term="advanced" /><category term="await" /><summary type="html">One of my favorite online tutors is Let’s Build That App. He’s really good with his YouTube thing going on. Makes me understand a lot of Swift stuff that I never imagined to be digging into. Most of this article is coming from his tutorial and I’ve also included his video in case anyone’s interested.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/blog/assets/images/reactivecocoa-functional-reactive-programming-concepts-in-ios-11-638.jpg" /></entry><entry><title type="html">Why I Prefer Cloud Firestore Than Realtime Database</title><link href="http://localhost:4000/blog/why-i-prefer-cloud-firestore-than-realtime-database/" rel="alternate" type="text/html" title="Why I Prefer Cloud Firestore Than Realtime Database" /><published>2019-10-02T00:00:00+08:00</published><updated>2019-10-02T00:00:00+08:00</updated><id>http://localhost:4000/blog/why-i-prefer-cloud-firestore-than-realtime-database</id><content type="html" xml:base="http://localhost:4000/blog/why-i-prefer-cloud-firestore-than-realtime-database/">&lt;p&gt;This is just a brief insight on why I prefer using Firestore. At first, I was hesitant to dive into Firestore, because I thought there wasn’t really much difference. I saw videos and tutorials of Firestore and it baffled me even more. So, I stayed with Firebase Realtime Database for a little long while, until I started with another Xcode project. I delved into why Firestore might be a better fit.&lt;/p&gt;

&lt;p&gt;Initially, all I understood was Firebase RD will charge you depending on bandwidth usage, while Firestore will charge on writes and reads. I was intimidated by that. The key is to make the writes and reads as minimal as possible to lessen the cost.&lt;/p&gt;

&lt;p&gt;In my previous personal project, I used Firebase RD. I have a web app for it and iOS app. Both coded by me. I was wondering why it always took so long to read from Firebase. Then I realized, I created a tree structure and whenever I tried to access the root’s value, it grabs all the branches along with it making my succeeding read queries redundant. It loads a very heavy amount of information as my database grew. That’s how I came to a decision to start using Firestore.&lt;/p&gt;

&lt;p&gt;Collections. Documents. You must’ve read those before. It’s confusing, I know. That’s how Firestore works. Think of it this way. &lt;code class=&quot;highlighter-rouge&quot;&gt;Collections&lt;/code&gt; are Folders, and &lt;code class=&quot;highlighter-rouge&quot;&gt;Documents&lt;/code&gt; are files that can contain a pointer to a sub Collection. Documents contain the attributes and its values. Collections only contain Documents.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Customer (&lt;code class=&quot;highlighter-rouge&quot;&gt;Collection&lt;/code&gt;)
    &lt;ul&gt;
      &lt;li&gt;Jane (&lt;code class=&quot;highlighter-rouge&quot;&gt;Document&lt;/code&gt;)
        &lt;ul&gt;
          &lt;li&gt;address: “In the woods”&lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;age: 16&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;Orders (sub &lt;code class=&quot;highlighter-rouge&quot;&gt;Collection&lt;/code&gt;)
            &lt;ul&gt;
              &lt;li&gt;2019-1-19 (&lt;code class=&quot;highlighter-rouge&quot;&gt;Document&lt;/code&gt;)
                &lt;ul&gt;
                  &lt;li&gt;item: “Pizza”&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I hope you see the pattern now. &lt;code class=&quot;highlighter-rouge&quot;&gt;Collections&lt;/code&gt; always contain &lt;code class=&quot;highlighter-rouge&quot;&gt;Documents&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;Documents&lt;/code&gt; can contain &lt;code class=&quot;highlighter-rouge&quot;&gt;Collections&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;What makes it better than Firebase DB?&lt;/p&gt;

&lt;p&gt;Well, whenever you reference to collection(“&lt;code class=&quot;highlighter-rouge&quot;&gt;Customer&lt;/code&gt;”).document(“&lt;code class=&quot;highlighter-rouge&quot;&gt;Jane&lt;/code&gt;”), you won’t be including &lt;code class=&quot;highlighter-rouge&quot;&gt;Orders&lt;/code&gt; in your read. Thereby, reducing the load. I guess you can say it’s faster this way. You only get to access the &lt;code class=&quot;highlighter-rouge&quot;&gt;address&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;age&lt;/code&gt; of Jane. If you want to get her orders as well, then reference to collection(“&lt;code class=&quot;highlighter-rouge&quot;&gt;Customer&lt;/code&gt;”).document(“&lt;code class=&quot;highlighter-rouge&quot;&gt;Jane&lt;/code&gt;”).collection(“&lt;code class=&quot;highlighter-rouge&quot;&gt;Orders&lt;/code&gt;”). You can loop through all her orders thereafter.&lt;/p&gt;

&lt;p&gt;No matter how deep your tree becomes with Firestore, you won’t be able to directly access its sub collections and that cuts down a lot of loading time and heaviness.&lt;/p&gt;</content><author><name>jules</name></author><category term="" /><category term="firestore" /><category term="firebase" /><category term="database" /><category term="collections" /><category term="documents" /><category term="Xcode" /><category term="swift" /><summary type="html">This is just a brief insight on why I prefer using Firestore. At first, I was hesitant to dive into Firestore, because I thought there wasn’t really much difference. I saw videos and tutorials of Firestore and it baffled me even more. So, I stayed with Firebase Realtime Database for a little long while, until I started with another Xcode project. I delved into why Firestore might be a better fit.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/blog/assets/images/update.jpg" /></entry><entry><title type="html">Top 5 Github Pages Portfolio Templates</title><link href="http://localhost:4000/blog/top-5-github-pages-portfolio-templates/" rel="alternate" type="text/html" title="Top 5 Github Pages Portfolio Templates" /><published>2019-10-02T00:00:00+08:00</published><updated>2019-10-02T00:00:00+08:00</updated><id>http://localhost:4000/blog/top-5-github-pages-portfolio-templates</id><content type="html" xml:base="http://localhost:4000/blog/top-5-github-pages-portfolio-templates/">&lt;p&gt;As a developer, I’d like to host my portfolio somewhere free and somewhere familiar to developers. Oh wait! I know where that is. These templates are forkable and for each one of these, there’s a link to their repositories. You won’t find much if you look into Jekyll Portfolio Themes. Been there, done that. Nada! These templates are going to come up in google search results, but it’s better to see them in all in one place.&lt;/p&gt;

&lt;h3 id=&quot;1-dev-portfolio&quot;&gt;1. &lt;a href=&quot;https://github.com/RyanFitzgerald/devblog&quot;&gt;Dev Portfolio&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/Screen%20Shot%202019-10-02%20at%207.24.31%20AM.png&quot; alt=&quot;dev portfolio&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If I may be so bold to place this as number 1. I’m currently using this template as my portfolio. This repo contains an easy-to-customize personal dev portfolio template that was created with Sass and JavaScript. It is lightweight and fully responsive, as well as comes with the Bootstrap grid system and loaded with Font Awesome. The site is static and comes production ready if you just want to add your information and go. Alternatively, you can edit styles, colours, and scripts fairly easily. The site was built as modular as possible to make it easy to shift around styles and content.&lt;/p&gt;

&lt;h3 id=&quot;demo&quot;&gt;&lt;a href=&quot;https://ryanfitzgerald.github.io/devportfolio/&quot;&gt;DEMO&lt;/a&gt;&lt;/h3&gt;

&lt;h3 id=&quot;2-developer&quot;&gt;2. &lt;a href=&quot;https://github.com/xriley/developer-theme&quot;&gt;Developer&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/free-bootstrap-portfolio-theme-for-web-developers.jpg&quot; alt=&quot;developer&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Developer is a free Bootstrap theme designed to help developers promote their work. It can be used as a professional portal to your other online portfolios or websites (eg. Linkedin, CoderWall, Blog, GitHub etc) in a modular fashion. The theme comes with all of the source SCSS files included so the styling/color can easily be customised to your taste.&lt;/p&gt;

&lt;h3 id=&quot;demo-1&quot;&gt;&lt;a href=&quot;https://themes.3rdwavemedia.com/demo/developer/&quot;&gt;DEMO&lt;/a&gt;&lt;/h3&gt;

&lt;h3 id=&quot;3-single-page-developer-portfolio-template-&quot;&gt;3. &lt;a href=&quot;https://github.com/akkefa/developer-portfolio&quot;&gt;Single Page Developer Portfolio Template &lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/Screen%20Shot%202019-10-02%20at%207.38.55%20AM.png&quot; alt=&quot;single page&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Complete Resume based portfolio for developers. Developers don’t talk much. Their code does all the talking.&lt;/p&gt;

&lt;h3 id=&quot;demo-2&quot;&gt;&lt;a href=&quot;https://akkefa.com/&quot;&gt;DEMO&lt;/a&gt;&lt;/h3&gt;

&lt;h3 id=&quot;4-plug-and-play-github-portfolio&quot;&gt;4. &lt;a href=&quot;https://github.com/gitshowcase/gitshowcase&quot;&gt;Plug-and-play GitHub portfolio&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/responsive-c0618d790ea0358a403e23b5da7e6d451828e88b921890248547188ec829a524.jpg&quot; alt=&quot;gitshowcase&quot; /&gt;&lt;/p&gt;

&lt;p&gt;GitShowcase is an Open Source project designed to help developers show off their talents.
If you like the project, you can help by sharing it on social media and giving us a Star on GitHub.&lt;/p&gt;

&lt;h3 id=&quot;demo-3&quot;&gt;&lt;a href=&quot;http://pedrosm.com/&quot;&gt;DEMO&lt;/a&gt;&lt;/h3&gt;

&lt;h3 id=&quot;5-pillar&quot;&gt;5. &lt;a href=&quot;https://github.com/xriley/pillar-theme&quot;&gt;Pillar&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/Bootstrap-Resume-CV-Template-Pillar-Pormo.jpg&quot; alt=&quot;pillar&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is not a portfolio, but I couldn’t find another interesting portfolio repository anymore. I just thought this might be noteworthy too. Pillar is a free Bootstrap resume/CV template tailored specifically for developers. The template comes with 6 color schemes and are quick and easy to change via the source SASS files. Built on Bootstrap 4, this template is included in our premium Bootstrap 4 theme Instance. If you are a developer and need to build your online presence, you need to check out the Instance theme as it has all the winning ingredients to get you hired by your potential employers or clients.&lt;/p&gt;

&lt;h3 id=&quot;demo-4&quot;&gt;&lt;a href=&quot;https://themes.3rdwavemedia.com/demo/pillar/&quot;&gt;DEMO&lt;/a&gt;&lt;/h3&gt;</content><author><name>jules</name></author><category term="" /><category term="portfolio" /><category term="github" /><category term="pages" /><category term="jekyll" /><category term="developer" /><summary type="html">As a developer, I’d like to host my portfolio somewhere free and somewhere familiar to developers. Oh wait! I know where that is. These templates are forkable and for each one of these, there’s a link to their repositories. You won’t find much if you look into Jekyll Portfolio Themes. Been there, done that. Nada! These templates are going to come up in google search results, but it’s better to see them in all in one place.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/blog/assets/images/responsive-c0618d790ea0358a403e23b5da7e6d451828e88b921890248547188ec829a524.jpg" /></entry><entry><title type="html">@State to @ObjectBinding Modifier</title><link href="http://localhost:4000/blog/state-to-objectbinding-modifier/" rel="alternate" type="text/html" title="@State to @ObjectBinding Modifier" /><published>2019-10-02T00:00:00+08:00</published><updated>2019-10-02T00:00:00+08:00</updated><id>http://localhost:4000/blog/state-to-objectbinding-modifier</id><content type="html" xml:base="http://localhost:4000/blog/state-to-objectbinding-modifier/">&lt;p&gt;Notice how Scott changed from &lt;code class=&quot;highlighter-rouge&quot;&gt;@State&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;@ObjectBinding&lt;/code&gt;. He started discussing BindableObject at 5:17. That’s because you can only use &lt;code class=&quot;highlighter-rouge&quot;&gt;@State&lt;/code&gt; with local properties in the struct view. Let’s see his code one more time.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/7sxdhunvSCg&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import Combine

class ListDataSource: BindableObject {
	var willChange = PassthroughSubject&amp;lt;Void, Never&amp;gt; ()
	
	var rowModels = [CustomRowModel] () {
		willSet {
			willChange.send()
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this tutorial, that’s all the code we need. Just kidding. There’s one more:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;struct ContentView: View {
	@ObjectBinding var datasource = ListDataSource()
	
	// to access the rowModels array
	datasource.rowModels
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Notice here that he used @ObjectBinding instead of @State. If you want a hold of the state of a class, then you must use @ObjectBinding instead and that class should inherit from &lt;code class=&quot;highlighter-rouge&quot;&gt;BindableObject&lt;/code&gt; protocol, which requires that you have a &lt;code class=&quot;highlighter-rouge&quot;&gt;PassthroughSubject&lt;/code&gt;. In order to use &lt;code class=&quot;highlighter-rouge&quot;&gt;PassthroughSubject&lt;/code&gt;, import &lt;code class=&quot;highlighter-rouge&quot;&gt;Combine&lt;/code&gt; first. You can substitude willChange to didChange. Heck, it’s just a variable name. But if you do, also change the &lt;code class=&quot;highlighter-rouge&quot;&gt;willSet&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;didSet&lt;/code&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;willChange.send()&lt;/code&gt; will notify the subscribed view, which in this case is &lt;code class=&quot;highlighter-rouge&quot;&gt;ContentView&lt;/code&gt;, of any changes done to &lt;code class=&quot;highlighter-rouge&quot;&gt;rowModels&lt;/code&gt; array.&lt;/p&gt;</content><author><name>jules</name></author><category term="" /><category term="state" /><category term="bindable" /><category term="object" /><category term="@objectbinding" /><category term="swiftui" /><summary type="html">Notice how Scott changed from @State to @ObjectBinding. He started discussing BindableObject at 5:17. That’s because you can only use @State with local properties in the struct view. Let’s see his code one more time.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/blog/assets/images/maxresdefault.jpg" /></entry><entry><title type="html">A Better EmptyView In An Empty CollectionView</title><link href="http://localhost:4000/blog/a-better-emptyview-in-an-empty-collectionview/" rel="alternate" type="text/html" title="A Better EmptyView In An Empty CollectionView" /><published>2019-10-02T00:00:00+08:00</published><updated>2019-10-02T00:00:00+08:00</updated><id>http://localhost:4000/blog/a-better-emptyview-in-an-empty-collectionview</id><content type="html" xml:base="http://localhost:4000/blog/a-better-emptyview-in-an-empty-collectionview/">&lt;p&gt;One of the most lovely codes I’ve found is to turn an empty view into something more informative than showing nothing. As you can see, I have two labels in place of my collection view. It’s simple to do, and you’ll be surprised for it. I copied most of the code from Taha Sönmez &lt;a href=&quot;https://medium.com/@mtssonmez/handle-empty-tableview-in-swift-4-ios-11-23635d108409&quot;&gt;post&lt;/a&gt; on Medium. I believe he explains this in great detail. Although if you’re an intermediate Swift programmer, you might not need the explanation anymore. He did it on a tableview, while this code I’m going to show you is done on a collection view. There’s only 3 lines of code difference.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// EmptyView.swift
extension UICollectionView {
    func setEmptyView(title: String, message: String) {
        let emptyView = UIView(frame: CGRect(x: self.center.x, y: self.center.y, width: self.bounds.size.width, height: self.bounds.size.height))
        let titleLabel = UILabel()
        let messageLabel = UILabel()
        titleLabel.translatesAutoresizingMaskIntoConstraints = false
        messageLabel.translatesAutoresizingMaskIntoConstraints = false
        titleLabel.textColor = UIColor.black
        titleLabel.font = UIFont(name: &quot;HelveticaNeue-Bold&quot;, size: 18)
        messageLabel.textColor = UIColor.lightGray
        messageLabel.font = UIFont(name: &quot;HelveticaNeue-Regular&quot;, size: 17)
        emptyView.addSubview(titleLabel)
        emptyView.addSubview(messageLabel)
        titleLabel.centerYAnchor.constraint(equalTo: emptyView.centerYAnchor).isActive = true
        titleLabel.centerXAnchor.constraint(equalTo: emptyView.centerXAnchor).isActive = true
        messageLabel.topAnchor.constraint(equalTo: titleLabel.bottomAnchor, constant: 20).isActive = true
        messageLabel.leftAnchor.constraint(equalTo: emptyView.leftAnchor, constant: 20).isActive = true
        messageLabel.rightAnchor.constraint(equalTo: emptyView.rightAnchor, constant: -20).isActive = true
        titleLabel.text = title
        messageLabel.text = message
        messageLabel.numberOfLines = 0
        messageLabel.textAlignment = .center
        // The only tricky part is here:
        self.backgroundView = emptyView
    }
    func restore() {
        self.backgroundView = nil
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After extending the UICollectionView, go back to the implementation of your collection view. Add this code in your numberOfItemsInSection:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -&amp;gt; Int {
        if orders?.count ?? 0 == 0 {
            collectionView.setEmptyView(title: &quot;You don't have any orders yet.&quot;, message: &quot;Your orders will be in here.&quot;)
        } else {
            collectionView.restore()
        }
        return orders?.count ?? 0
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Restoring&lt;/code&gt; is essential here. You wouldn’t want to have the empty view when your collection view reloads and holds data.&lt;/p&gt;</content><author><name>jules</name></author><category term="" /><category term="featured" /><category term="collection" /><category term="view" /><category term="empty" /><category term="swift" /><category term="table" /><summary type="html">One of the most lovely codes I’ve found is to turn an empty view into something more informative than showing nothing. As you can see, I have two labels in place of my collection view. It’s simple to do, and you’ll be surprised for it. I copied most of the code from Taha Sönmez post on Medium. I believe he explains this in great detail. Although if you’re an intermediate Swift programmer, you might not need the explanation anymore. He did it on a tableview, while this code I’m going to show you is done on a collection view. There’s only 3 lines of code difference.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/blog/assets/images/71823045_2511297908958002_3393944923223883776_n.jpg" /></entry><entry><title type="html">Using Cloud Functions To Create Remote Notifications With Firebase And Swift5</title><link href="http://localhost:4000/blog/using-cloud-functions-to-create-remote-notifications-with-firebase-and-swift5/" rel="alternate" type="text/html" title="Using Cloud Functions To Create Remote Notifications With Firebase And Swift5" /><published>2019-10-01T00:00:00+08:00</published><updated>2019-10-01T00:00:00+08:00</updated><id>http://localhost:4000/blog/using-cloud-functions-to-create-remote-notifications-with-firebase-and-swift5</id><content type="html" xml:base="http://localhost:4000/blog/using-cloud-functions-to-create-remote-notifications-with-firebase-and-swift5/">&lt;p&gt;This is tested using Firebase Realtime Database, not with Firestore. Before all of these, I assume you have already been using the realtime database. More importantly, you already have the GoogleService-Info.plist in your Xcode project. It is important because it contains your bundle identifier. Without Firebase knowing your bundle identifier, you can’t proceed to enabling the Cloud messaging. We’re not doing what’s in the picture. It’s just a formality.&lt;/p&gt;

&lt;p&gt;Install this pod libraries first in addition to your preinstalled libraries with Firebase.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pod 'Firebase/Analytics'
pod 'Firebase/Core'
pod 'Firebase/Messaging'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In your Xcode project’s signing and capabilities, enable or add capabilities:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Background Modes -&amp;gt; Remote Notifications&lt;/li&gt;
  &lt;li&gt;Push Notifications&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let’s create a certificate signing request by going to Keychain Access.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;On the toolbar, click &lt;code class=&quot;highlighter-rouge&quot;&gt;Keychain Access&lt;/code&gt; beside &lt;code class=&quot;highlighter-rouge&quot;&gt;File&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;In this dropdown menu, Certificate Assistant -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Request a Certificate From a Certificate Authority&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Enter your credentials into the text fields and choose &lt;code class=&quot;highlighter-rouge&quot;&gt;Save to disk&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Then go to Apple Developer. For this, you need a paid developer account which costs $99.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Open &lt;code class=&quot;highlighter-rouge&quot;&gt;Certificates, Identifiers &amp;amp; Profiles&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Navigate to &lt;code class=&quot;highlighter-rouge&quot;&gt;Identifiers&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Click on the current project you are working on.&lt;/li&gt;
  &lt;li&gt;Beside the Push Notifications, click &lt;code class=&quot;highlighter-rouge&quot;&gt;Configure&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Depending on which environment you are, click &lt;code class=&quot;highlighter-rouge&quot;&gt;Create Certificate&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Choose a file&lt;/code&gt; -&amp;gt; Upload the CertificateSigningRequest.certSigningRequest you just created.&lt;/li&gt;
  &lt;li&gt;Continue and download aps_development.cer.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Once that is done, you will have a .cert file on your desktop. Now let’s convert that to .p12. Still, using the Keychain Access.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;File -&amp;gt; Import Items -&amp;gt; Select your .cert file&lt;/li&gt;
  &lt;li&gt;Drag that file to &lt;code class=&quot;highlighter-rouge&quot;&gt;System&lt;/code&gt;, assuming you are in &lt;code class=&quot;highlighter-rouge&quot;&gt;login&lt;/code&gt; in the &lt;code class=&quot;highlighter-rouge&quot;&gt;Keychains&lt;/code&gt; sidebar.&lt;/li&gt;
  &lt;li&gt;Drag it back from &lt;code class=&quot;highlighter-rouge&quot;&gt;System&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;login&lt;/code&gt;. You now have a duplicate, but you’ll only need the most recent.&lt;/li&gt;
  &lt;li&gt;Select &lt;code class=&quot;highlighter-rouge&quot;&gt;My Certificates&lt;/code&gt; in the Category.&lt;/li&gt;
  &lt;li&gt;Select the most recent certificate pertaining to your project, and right-click.&lt;/li&gt;
  &lt;li&gt;Click Export “Apple Development IOS Push Services: your.project…”&lt;/li&gt;
  &lt;li&gt;Make sure to export it in .p12 format.&lt;/li&gt;
  &lt;li&gt;It will then ask you to create a password to protect this certficate. Give it one and click &lt;code class=&quot;highlighter-rouge&quot;&gt;ok&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In order to test this while under development, you need a Provisioning Profile for development to authorize your devices to run an app that is not yet published on the App Store.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Open &lt;code class=&quot;highlighter-rouge&quot;&gt;Certificates, Identifiers &amp;amp; Profiles&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Select &lt;code class=&quot;highlighter-rouge&quot;&gt;Profiles&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Generate a Profile&lt;/li&gt;
  &lt;li&gt;Select iOS App Development and continue&lt;/li&gt;
  &lt;li&gt;Select your App ID and continue&lt;/li&gt;
  &lt;li&gt;Select the iOS Development certificate of the App ID you have chosen in the previous step, then click Continue.&lt;/li&gt;
  &lt;li&gt;Select the iOS devices that you want to include in the Provisioning Profile, then click Continue. Make sure to select all the devices you want to use for your testing.&lt;/li&gt;
  &lt;li&gt;Name the provisioning profile whatever you want and generate.&lt;/li&gt;
  &lt;li&gt;Download the provisioning profile and open it to install.&lt;/li&gt;
  &lt;li&gt;If it crashes your Xcode, just go to your Xcode project settings -&amp;gt; Signing &amp;amp; Capabilities -&amp;gt; Disable Automatically Manage Signing -&amp;gt; Import the provisioning profile.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To enable the cloud messaging feature, go to https://console.cloud.google.com/ -&amp;gt; Search for your Firebase project and select it -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;APIs and Services&lt;/code&gt; -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;+ ENABLE APIS AND SERVICES&lt;/code&gt;-&amp;gt; Search for &lt;code class=&quot;highlighter-rouge&quot;&gt;Firebase Cloud Messaging API&lt;/code&gt; -&amp;gt; click Enable.&lt;/p&gt;

&lt;p&gt;In your Firebase console, navigate to &lt;code class=&quot;highlighter-rouge&quot;&gt;Project Settings&lt;/code&gt; -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Cloud Messaging&lt;/code&gt; -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;iOS app configuration&lt;/code&gt; -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;APNs Certificates&lt;/code&gt; -&amp;gt; Upload the &lt;code class=&quot;highlighter-rouge&quot;&gt;.p12 file&lt;/code&gt; here, then enter the password for this certificate.&lt;/p&gt;

&lt;p&gt;That’s all you need for now to allow &lt;code class=&quot;highlighter-rouge&quot;&gt;Cloud Messaging&lt;/code&gt; on your iOS device. It’s like a term for Remote Push Notifications. I was baffled at that at first.&lt;/p&gt;

&lt;p&gt;Now this is the part where we detect changes in the firebase database. If you haven’t installed the &lt;a href=&quot;https://firebase.google.com/docs/cli&quot;&gt;firebase CLI&lt;/a&gt; yet, please do so.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Create a directory where you want to put the cloud functions code. In my case, I created &lt;code class=&quot;highlighter-rouge&quot;&gt;triggers&lt;/code&gt; directory under my Xcode project directory. &lt;code class=&quot;highlighter-rouge&quot;&gt;Laundry City/triggers&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;‘cd triggers`&lt;/li&gt;
  &lt;li&gt;In the terminal, type &lt;code class=&quot;highlighter-rouge&quot;&gt;firebase init functions&lt;/code&gt;, but make sure you’re logged in with firebase cli.&lt;/li&gt;
  &lt;li&gt;Choose javascript and type &lt;code class=&quot;highlighter-rouge&quot;&gt;y&lt;/code&gt; as in yes to any remaining questions from the cli.&lt;/li&gt;
  &lt;li&gt;Open index.js and create your function such as below:&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// index.js
const functions = require('firebase-functions');
const admin = require('firebase-admin');

admin.initializeApp();

exports.sendNewChangesNotification = functions.database.ref('houses/{house}/items/{item}/').onWrite((change, context) =&amp;gt; {

    var topic = &quot;Serenity&quot;;
		
    // A message that contains the notification that devices will receive	
    var message = {
      notification: {
        title: 'New Quantity',
        body: change.after.val().product + ' now has ' + change.after.val().tentative + ' new items.'
      }
    };

    // Using Cloud Messaging to create notification
    return admin.messaging().sendToTopic(topic, message).then(function (response) {
        console.log('Successfully sent message:', response);
        return null;
    }).catch(function (error) {
        throw new Error(&quot;Error sending message:&quot;, error);
    });
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;First thing to note here is, you won’t start your &lt;code class=&quot;highlighter-rouge&quot;&gt;ref&lt;/code&gt; with the Project ID.. Instead, the branch below it. The ones in the brackets are &lt;code class=&quot;highlighter-rouge&quot;&gt;ids&lt;/code&gt;, which varies. This will detect any write or changes happening in that reference. It will catch the changes in the &lt;code class=&quot;highlighter-rouge&quot;&gt;change&lt;/code&gt; parameter. Thereby, allowing access to the new tentative value in &lt;code class=&quot;highlighter-rouge&quot;&gt;change.after.val().tentative&lt;/code&gt; from the reference &lt;code class=&quot;highlighter-rouge&quot;&gt;houses/1/items/2/tentative&lt;/code&gt;. 1 and 2 here are just examples of IDs. &lt;code class=&quot;highlighter-rouge&quot;&gt;sendNewChangesNotification&lt;/code&gt; is just a variable. You can change it however you like.&lt;/p&gt;

&lt;p&gt;When everything is in place, go back to terminal and deploy it with &lt;code class=&quot;highlighter-rouge&quot;&gt;firebase deploy&lt;/code&gt;. Now, you have a listener or a trigger whenever your items have been changed or added.&lt;/p&gt;

&lt;p&gt;Your AppDelegate.swift should look like &lt;a href=&quot;https://github.com/firebase/quickstart-ios/blob/master/messaging/MessagingExampleSwift/AppDelegate.swift&quot;&gt;this&lt;/a&gt;. This firebase sample is as instructed in the &lt;a href=&quot;https://firebase.google.com/docs/cloud-messaging/ios/client&quot;&gt;documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To send a notification, &lt;code class=&quot;highlighter-rouge&quot;&gt;admin.messaging.send&lt;/code&gt; will do the trick. But you have to provide a &lt;code class=&quot;highlighter-rouge&quot;&gt;token&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;topic&lt;/code&gt;, or a &lt;code class=&quot;highlighter-rouge&quot;&gt;condition&lt;/code&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;Token&lt;/code&gt; is generated by the AppDelegate and is uploaded to Firebase automatically. If you specify a specific token, then only the device with that token will receive the notification. &lt;code class=&quot;highlighter-rouge&quot;&gt;Topic&lt;/code&gt; is what its name suggests. To subscribe to a topic, add this to wherever you need to put in your Xcode project:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Messaging.messaging().subscribe(toTopic: &quot;Serenity&quot;) { error in
          print(&quot;Subscribed to weather topic&quot;)
        }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Condition&lt;/code&gt; can be something like you want to send this to notification to subscribers of more than one topic. For example: &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;'Serenity' in topics || 'Manor' in topics&quot;&lt;/code&gt;. Further &lt;a href=&quot;https://firebase.google.com/docs/cloud-messaging/ios/topic-messaging&quot;&gt;documentation&lt;/a&gt; about this.&lt;/p&gt;</content><author><name>jules</name></author><category term="remote" /><category term="notification" /><category term="swift" /><category term="cloud" /><category term="function" /><category term="firebase" /><category term="messaging" /><category term="featured" /><category term="APNs" /><summary type="html">This is tested using Firebase Realtime Database, not with Firestore. Before all of these, I assume you have already been using the realtime database. More importantly, you already have the GoogleService-Info.plist in your Xcode project. It is important because it contains your bundle identifier. Without Firebase knowing your bundle identifier, you can’t proceed to enabling the Cloud messaging. We’re not doing what’s in the picture. It’s just a formality.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/blog/assets/images/Notifications_Top_2x.png" /></entry><entry><title type="html">!= VS. NOT Filter In Realm Swift</title><link href="http://localhost:4000/blog/inverse-or-not-filter-in-realm-swift/" rel="alternate" type="text/html" title="!= VS. NOT Filter In Realm Swift" /><published>2019-09-30T00:00:00+08:00</published><updated>2019-09-30T00:00:00+08:00</updated><id>http://localhost:4000/blog/inverse-or-not-filter-in-realm-swift</id><content type="html" xml:base="http://localhost:4000/blog/inverse-or-not-filter-in-realm-swift/">&lt;p&gt;Instead of using &lt;code class=&quot;highlighter-rouge&quot;&gt;!=&lt;/code&gt; as your not equal, you can or should use &lt;code class=&quot;highlighter-rouge&quot;&gt;NOT&lt;/code&gt; instead. I’m writing this post because I just can’t seem &lt;code class=&quot;highlighter-rouge&quot;&gt;!=&lt;/code&gt; to work as part of my predicate. I was struggling to find a way to make not equal to work. I looked it up in the documentations. Even though &lt;code class=&quot;highlighter-rouge&quot;&gt;!=&lt;/code&gt; is in there, I could not make it to work. However, the &lt;code class=&quot;highlighter-rouge&quot;&gt;=&lt;/code&gt; sign worked. Weird. And so, I did something like this.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let filter = &quot;(status = 'Pending' OR (status = 'Washed' AND (pad = 2 OR pad = 3))) AND NOT cancel = 'Cancelled' AND NOT ownerId = ''&quot;
orders!.filter(filter)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here, you’ll see &lt;code class=&quot;highlighter-rouge&quot;&gt;NOT&lt;/code&gt; placed before the attribute. I don’t know why it works that way, but it works anyway.&lt;/p&gt;</content><author><name>jules</name></author><category term="" /><category term="Swift" /><category term="Realm" /><category term="Filter" /><category term="NOT" /><category term="Equal" /><category term="Inverse" /><summary type="html">Instead of using != as your not equal, you can or should use NOT instead. I’m writing this post because I just can’t seem != to work as part of my predicate. I was struggling to find a way to make not equal to work. I looked it up in the documentations. Even though != is in there, I could not make it to work. However, the = sign worked. Weird. And so, I did something like this.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/blog/assets/images/1_DqzHUZj6HcmIBK9I2aOVww.png" /></entry><entry><title type="html">Sublime 3 In BUNDLER_EDITOR</title><link href="http://localhost:4000/blog/bundler-editorsublime/" rel="alternate" type="text/html" title="Sublime 3 In BUNDLER_EDITOR" /><published>2019-09-30T00:00:00+08:00</published><updated>2019-09-30T00:00:00+08:00</updated><id>http://localhost:4000/blog/bundler-editorsublime</id><content type="html" xml:base="http://localhost:4000/blog/bundler-editorsublime/">&lt;p&gt;First, let’s create a symlink:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ln -s &quot;/Applications/Sublime Text.app/Contents/SharedSupport/bin/subl&quot; /usr/local/bin/sublime
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Type this on your terminal.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;open -e ~/.bash_profile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Add the following lines and save it.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;export EDITOR=&quot;sublime -w&quot;
export BUNDLER_EDITOR=&quot;sublime&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>jules</name></author><category term="" /><category term="sublime" /><category term="bundle_editor" /><category term="symlink" /><category term="editor" /><category term="bash" /><category term="profile" /><summary type="html">First, let’s create a symlink:</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/blog/assets/images/SublimeText3.jpg" /></entry></feed>