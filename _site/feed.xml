<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://localhost:4000/blog/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/blog/" rel="alternate" type="text/html" /><updated>2019-09-30T21:35:46+08:00</updated><id>http://localhost:4000/blog/feed.xml</id><title type="html">iOS Junkie</title><subtitle>A blog by an iOS developer who created Laundry City</subtitle><entry><title type="html">Sublime 3 In BUNDLER_EDITOR</title><link href="http://localhost:4000/blog/bundler-editorsublime/" rel="alternate" type="text/html" title="Sublime 3 In BUNDLER_EDITOR" /><published>2019-09-30T00:00:00+08:00</published><updated>2019-09-30T00:00:00+08:00</updated><id>http://localhost:4000/blog/bundler-editorsublime</id><content type="html" xml:base="http://localhost:4000/blog/bundler-editorsublime/">&lt;p&gt;First, let’s create a symlink:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ln -s &quot;/Applications/Sublime Text.app/Contents/SharedSupport/bin/subl&quot; /usr/local/bin/sublime
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Type this on your terminal.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;open -e ~/.bash_profile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Add the following lines and save it.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;export EDITOR=&quot;sublime -w&quot;
export BUNDLER_EDITOR=&quot;sublime&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>jules</name></author><summary type="html">First, let’s create a symlink:</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/blog/assets/images/SublimeText3.jpg" /></entry><entry><title type="html">!= VS. NOT Filter In Realm Swift</title><link href="http://localhost:4000/blog/inverse-or-not-filter-in-realm-swift/" rel="alternate" type="text/html" title="!= VS. NOT Filter In Realm Swift" /><published>2019-09-30T00:00:00+08:00</published><updated>2019-09-30T00:00:00+08:00</updated><id>http://localhost:4000/blog/inverse-or-not-filter-in-realm-swift</id><content type="html" xml:base="http://localhost:4000/blog/inverse-or-not-filter-in-realm-swift/">&lt;p&gt;Instead of using &lt;code class=&quot;highlighter-rouge&quot;&gt;!=&lt;/code&gt; as your not equal, you can or should use &lt;code class=&quot;highlighter-rouge&quot;&gt;NOT&lt;/code&gt; instead. I’m writing this post because I just can’t seem &lt;code class=&quot;highlighter-rouge&quot;&gt;!=&lt;/code&gt; to work as part of my predicate. I was struggling to find a way to make not equal to work. I looked it up in the documentations. Even though &lt;code class=&quot;highlighter-rouge&quot;&gt;!=&lt;/code&gt; is in there, I could not make it to work. However, the &lt;code class=&quot;highlighter-rouge&quot;&gt;=&lt;/code&gt; sign worked. Weird. And so, I did something like this.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let filter = &quot;(status = 'Pending' OR (status = 'Washed' AND (pad = 2 OR pad = 3))) AND NOT cancel = 'Cancelled' AND NOT ownerId = ''&quot;
orders!.filter(filter)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here, you’ll see &lt;code class=&quot;highlighter-rouge&quot;&gt;NOT&lt;/code&gt; placed before the attribute. I don’t know why it works that way, but it works anyway.&lt;/p&gt;</content><author><name>jules</name></author><category term="" /><category term="Swift" /><category term="Realm" /><category term="Filter" /><category term="NOT" /><category term="Equal" /><category term="Inverse" /><summary type="html">Instead of using != as your not equal, you can or should use NOT instead. I’m writing this post because I just can’t seem != to work as part of my predicate. I was struggling to find a way to make not equal to work. I looked it up in the documentations. Even though != is in there, I could not make it to work. However, the = sign worked. Weird. And so, I did something like this.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/blog/assets/images/1_DqzHUZj6HcmIBK9I2aOVww.png" /></entry><entry><title type="html">Use Jekyll Manager Instead of Jekyll Admin</title><link href="http://localhost:4000/blog/use-jekyll-manager-instead-of-jekyll-admin/" rel="alternate" type="text/html" title="Use Jekyll Manager Instead of Jekyll Admin" /><published>2019-09-30T00:00:00+08:00</published><updated>2019-09-30T00:00:00+08:00</updated><id>http://localhost:4000/blog/use-jekyll-manager-instead-of-jekyll-admin</id><content type="html" xml:base="http://localhost:4000/blog/use-jekyll-manager-instead-of-jekyll-admin/">&lt;p&gt;I was hesitant in making a change at first, since I just started blogging using Jekyll. Looking at how updates are freshly being added to the jekyll-admin library made me think it’s more intuitive. I am wrong. However, the upgrades done in jekyll-manager isn’t really all that drastic. They still haven’t got a fix for when selecting the image metadata. It is still http://localhost:4000/blog/assets/images/…jpg when I select an image from the static files. I wonder why they haven’t dealt this yet. This should have been the turning point of their fork. Instead, a few UI changes have been made. Some, impressive.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/Screen%20Shot%202019-09-29%20at%2011.32.59%20PM.png&quot; alt=&quot;assets&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is my favorite part about jekyll-manager and to be honest, the only thing I care about, really. Directories can be navigated to now, therefore making uploading a hell of a lot easier, now that I’m confident to use this dashboard for uploading images. I no longer have to drag and drop using Finder for this.&lt;/p&gt;

&lt;p&gt;The metadata too has changed. It is, by default, hidden and expandable. It’s quite confusing why it’s called a &lt;code class=&quot;highlighter-rouge&quot;&gt;FRONT MATTER&lt;/code&gt;, instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;metadata&lt;/code&gt;. And by default too, &lt;code class=&quot;highlighter-rouge&quot;&gt;layout&lt;/code&gt; is the first metadata you’ll be able to see. There’s a select dropdown for the choices for &lt;code class=&quot;highlighter-rouge&quot;&gt;layout&lt;/code&gt;. Since in our config.yml, layout is set to &lt;code class=&quot;highlighter-rouge&quot;&gt;post&lt;/code&gt; by default, then you can choose to remove this metadata field. &lt;code class=&quot;highlighter-rouge&quot;&gt;tags&lt;/code&gt; has this cool feature that allows you to select from previous used tags. It’s just sad that it doesn’t work the same with &lt;code class=&quot;highlighter-rouge&quot;&gt;categories&lt;/code&gt;. Hence, when typing multiple categories, just separate them with spaces and not a comma.&lt;/p&gt;

&lt;p&gt;The text editor’s panel for tools is now dark but overall, it works the same and still no Grammarly functionality. I mean &lt;code class=&quot;highlighter-rouge&quot;&gt;Grammarly&lt;/code&gt; is disabled when using the text editor, but not on other text fields.  Bummer.&lt;/p&gt;

&lt;p&gt;For the most part, it looks almost exactly like jekyll-admin and better, but I don’t understand why there isn’t any noticeable changes in jekyll-admin that will make it better than the 2 years ago maintaned code of jekyll-manager.&lt;/p&gt;</content><author><name>jules</name></author><category term="" /><category term="featured" /><summary type="html">I was hesitant in making a change at first, since I just started blogging using Jekyll. Looking at how updates are freshly being added to the jekyll-admin library made me think it’s more intuitive. I am wrong. However, the upgrades done in jekyll-manager isn’t really all that drastic. They still haven’t got a fix for when selecting the image metadata. It is still http://localhost:4000/blog/assets/images/…jpg when I select an image from the static files. I wonder why they haven’t dealt this yet. This should have been the turning point of their fork. Instead, a few UI changes have been made. Some, impressive.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/blog/assets/images/Screen%20Shot%202019-09-29%20at%2011.31.40%20PM.png" /></entry><entry><title type="html">Eureka LocationRow</title><link href="http://localhost:4000/blog/eureka-locationrow/" rel="alternate" type="text/html" title="Eureka LocationRow" /><published>2019-09-29T00:00:00+08:00</published><updated>2019-09-29T00:00:00+08:00</updated><id>http://localhost:4000/blog/eureka-locationrow</id><content type="html" xml:base="http://localhost:4000/blog/eureka-locationrow/">&lt;p&gt;If you’re a newbie on this, you might not actually figure this out quick. Apparently, it’s only a quick tour to the example project in Eureka. Particularly in &lt;a href=&quot;https://github.com/xmartlabs/Eureka/blob/master/Example/Example/CustomCells.swift&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CustomCells.swift&lt;/code&gt;&lt;/a&gt;. Just create a file and copy the last code below or from the link if the repository gets updated.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;&amp;lt;&amp;lt; LocationRow(){
                $0.title = &quot;Location&quot;
                $0.value = CLLocation(latitude: latitude, longitude: longitude)
                $0.tag = &quot;location&quot;
                $0.validationOptions = .validatesOnChange //2
                $0.cellUpdate { (cell, row) in //3
                    if !row.isValid {
                        cell.textLabel?.textColor = .red
                    } else {
                        let lastLocation = row.value
                        let geocoder = CLGeocoder()
                        geocoder.reverseGeocodeLocation(lastLocation!,
                            completionHandler: { (placemarks, error) in
                                if error == nil {
                                    let place = placemarks![0]
                                    var adressString : String = &quot;&quot;
                                    if place.thoroughfare != nil {
                                        adressString = adressString + place.thoroughfare! + &quot;, &quot;
                                    }
                                    if place.subThoroughfare != nil {
                                        adressString = adressString + place.subThoroughfare! + &quot; &quot;
                                    }
                                    if place.locality != nil {
                                        adressString = adressString + place.locality! + &quot; - &quot;
                                    }
                                    if place.postalCode != nil {
                                        adressString = adressString + place.postalCode! + &quot; &quot;
                                    }
                                    if place.subAdministrativeArea != nil {
                                        adressString = adressString + place.subAdministrativeArea! + &quot; - &quot;
                                    }
                                    if place.country != nil {
                                        adressString = adressString + place.country!
                                    }
                                    
                                    self.address = adressString.trimmingCharacters(in: .whitespacesAndNewlines)
                                }
                        })
                    }
                }
            }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The code above is how I implemented LocationRow in my form. You’ll see from here that I used a&lt;code class=&quot;highlighter-rouge&quot;&gt; Geocoder&lt;/code&gt; in order to formulate an address string from the coordinates selected to a variable in the ViewController called &lt;code class=&quot;highlighter-rouge&quot;&gt;address&lt;/code&gt;.  If you don’t need this feature, just get rid of what’s after &lt;code class=&quot;highlighter-rouge&quot;&gt;else&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import Foundation
import UIKit
import MapKit
import Eureka

//MARK: LocationRow
public final class LocationRow: OptionsRow&amp;lt;PushSelectorCell&amp;lt;CLLocation&amp;gt;&amp;gt;, PresenterRowType, RowType {
    
    public typealias PresenterRow = MapViewController
    
    /// Defines how the view controller will be presented, pushed, etc.
    public var presentationMode: PresentationMode&amp;lt;PresenterRow&amp;gt;?
    
    /// Will be called before the presentation occurs.
    public var onPresentCallback: ((FormViewController, PresenterRow) -&amp;gt; Void)?
    
    public required init(tag: String?) {
        super.init(tag: tag)
        presentationMode = .show(controllerProvider: ControllerProvider.callback { return MapViewController(){ _ in } }, onDismiss: { vc in _ = vc.navigationController?.popViewController(animated: true) })
        
        displayValueFor = {
            guard let location = $0 else { return &quot;&quot; }
            let fmt = NumberFormatter()
            fmt.maximumFractionDigits = 4
            fmt.minimumFractionDigits = 4
            let latitude = fmt.string(from: NSNumber(value: location.coordinate.latitude))!
            let longitude = fmt.string(from: NSNumber(value: location.coordinate.longitude))!
            return  &quot;\(latitude), \(longitude)&quot;
        }
    }
    
    /**
     Extends `didSelect` method
     */
    public override func customDidSelect() {
        super.customDidSelect()
        guard let presentationMode = presentationMode, !isDisabled else { return }
        if let controller = presentationMode.makeController() {
            controller.row = self
            controller.title = selectorTitle ?? controller.title
            onPresentCallback?(cell.formViewController()!, controller)
            presentationMode.present(controller, row: self, presentingController: self.cell.formViewController()!)
        } else {
            presentationMode.present(nil, row: self, presentingController: self.cell.formViewController()!)
        }
    }
    
    /**
     Prepares the pushed row setting its title and completion callback.
     */
    public override func prepare(for segue: UIStoryboardSegue) {
        super.prepare(for: segue)
        guard let rowVC = segue.destination as? PresenterRow else { return }
        rowVC.title = selectorTitle ?? rowVC.title
        rowVC.onDismissCallback = presentationMode?.onDismissCallback ?? rowVC.onDismissCallback
        onPresentCallback?(cell.formViewController()!, rowVC)
        rowVC.row = self
    }
}

public class MapViewController : UIViewController, TypedRowControllerType, MKMapViewDelegate {
    
    public var row: RowOf&amp;lt;CLLocation&amp;gt;!
    public var onDismissCallback: ((UIViewController) -&amp;gt; ())?
    
    lazy var mapView : MKMapView = { [unowned self] in
        let v = MKMapView(frame: self.view.bounds)
        v.autoresizingMask = [.flexibleWidth, .flexibleHeight]
        return v
        }()
    
    lazy var pinView: UIImageView = { [unowned self] in
        let v = UIImageView(frame: CGRect(x: 0, y: 0, width: 50, height: 50))
        v.image = UIImage(named: &quot;map_pin&quot;, in: Bundle(for: MapViewController.self), compatibleWith: nil)
        v.image = v.image?.withRenderingMode(.alwaysTemplate)
        v.tintColor = self.view.tintColor
        v.backgroundColor = .clear
        v.clipsToBounds = true
        v.contentMode = .scaleAspectFit
        v.isUserInteractionEnabled = false
        return v
        }()
    
    let width: CGFloat = 10.0
    let height: CGFloat = 5.0
    
    lazy var ellipse: UIBezierPath = { [unowned self] in
        let ellipse = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: self.width, height: self.height))
        return ellipse
        }()
    
    
    lazy var ellipsisLayer: CAShapeLayer = { [unowned self] in
        let layer = CAShapeLayer()
        layer.bounds = CGRect(x: 0, y: 0, width: self.width, height: self.height)
        layer.path = self.ellipse.cgPath
        layer.fillColor = UIColor.gray.cgColor
        layer.fillRule = .nonZero
        layer.lineCap = .butt
        layer.lineDashPattern = nil
        layer.lineDashPhase = 0.0
        layer.lineJoin = .miter
        layer.lineWidth = 1.0
        layer.miterLimit = 10.0
        layer.strokeColor = UIColor.gray.cgColor
        return layer
        }()
    
    
    required public init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
    }
    
    public override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nil, bundle: nil)
    }
    
    convenience public init(_ callback: ((UIViewController) -&amp;gt; ())?){
        self.init(nibName: nil, bundle: nil)
        onDismissCallback = callback
    }
    
    public override func viewDidLoad() {
        super.viewDidLoad()
        view.addSubview(mapView)
        
        mapView.delegate = self
        mapView.addSubview(pinView)
        mapView.layer.insertSublayer(ellipsisLayer, below: pinView.layer)
        
        let button = UIBarButtonItem(barButtonSystemItem: .done, target: self, action: #selector(MapViewController.tappedDone(_:)))
        button.title = &quot;Done&quot;
        navigationItem.rightBarButtonItem = button
        
        if let value = row.value {
            let region = MKCoordinateRegion(center: value.coordinate, latitudinalMeters: 400, longitudinalMeters: 400)
            mapView.setRegion(region, animated: true)
        }
        else{
            mapView.showsUserLocation = true
        }
        updateTitle()
        
    }
    
    public override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        
        let center = mapView.convert(mapView.centerCoordinate, toPointTo: pinView)
        pinView.center = CGPoint(x: center.x, y: center.y - (pinView.bounds.height/2))
        ellipsisLayer.position = center
    }
    
    
    @objc func tappedDone(_ sender: UIBarButtonItem){
        let target = mapView.convert(ellipsisLayer.position, toCoordinateFrom: mapView)
        row.value = CLLocation(latitude: target.latitude, longitude: target.longitude)
        onDismissCallback?(self)
    }
    
    func updateTitle(){
        let fmt = NumberFormatter()
        fmt.maximumFractionDigits = 4
        fmt.minimumFractionDigits = 4
        let latitude = fmt.string(from: NSNumber(value: mapView.centerCoordinate.latitude))!
        let longitude = fmt.string(from: NSNumber(value: mapView.centerCoordinate.longitude))!
        title = &quot;\(latitude), \(longitude)&quot;
    }
    
    public func mapView(_ mapView: MKMapView, regionWillChangeAnimated animated: Bool) {
        ellipsisLayer.transform = CATransform3DMakeScale(0.5, 0.5, 1)
        UIView.animate(withDuration: 0.2, animations: { [weak self] in
            self?.pinView.center = CGPoint(x: self!.pinView.center.x, y: self!.pinView.center.y - 10)
        })
    }
    
    public func mapView(_ mapView: MKMapView, regionDidChangeAnimated animated: Bool) {
        ellipsisLayer.transform = CATransform3DIdentity
        UIView.animate(withDuration: 0.2, animations: { [weak self] in
            self?.pinView.center = CGPoint(x: self!.pinView.center.x, y: self!.pinView.center.y + 10)
        })
        updateTitle()
    }
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>jules</name></author><category term="featured" /><summary type="html">If you’re a newbie on this, you might not actually figure this out quick. Apparently, it’s only a quick tour to the example project in Eureka. Particularly in CustomCells.swift. Just create a file and copy the last code below or from the link if the repository gets updated.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/blog/assets/images/EurekaLocationRow.gif" /></entry><entry><title type="html">Custom Table Cell With SwiftUI</title><link href="http://localhost:4000/blog/custom-table-cell-with-swiftui/" rel="alternate" type="text/html" title="Custom Table Cell With SwiftUI" /><published>2019-09-28T00:00:00+08:00</published><updated>2019-09-28T00:00:00+08:00</updated><id>http://localhost:4000/blog/custom-table-cell-with-swiftui</id><content type="html" xml:base="http://localhost:4000/blog/custom-table-cell-with-swiftui/">&lt;p&gt;First of all, thanks to Scott Smith for helping me understand this. I know it can be another learning curve to start learning SwiftUI if you’ve only begun diving into becoming an iOS developer. It’s daunting at first, but I hope it can be simple too for many newbies. Now, I haven’t gotten my hands on Mac OS Catalina yet, so I can’t actually demonstrate my own version of this tutorial properly if I can’t show you the canvas, which isn’t available in Mojave yet, myself.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/7sxdhunvSCg&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;To make a table, add the &lt;code class=&quot;highlighter-rouge&quot;&gt;List()&lt;/code&gt;  in your ContentView&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;struct ContentView : View {

	@State var data = [&quot;Stevens&quot;, &quot;Chloe&quot;, &quot;Frank&quot;]
	
	var body: some View {
		List(data, id: \.self) { item in
			CustomRow(name: item)
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The id here is what confused me as a beginner. How Scott wrote and explained it is that &lt;code class=&quot;highlighter-rouge&quot;&gt;\.self&lt;/code&gt; is meant to give identification automatically to each string from &lt;code class=&quot;highlighter-rouge&quot;&gt;data&lt;/code&gt; itself. If you created a more comlex data structure, then you’ll probably just have to specify the &lt;code class=&quot;highlighter-rouge&quot;&gt;id&lt;/code&gt; in that structure and assign it a value of &lt;code class=&quot;highlighter-rouge&quot;&gt;UUID()&lt;/code&gt;, which returns  unique id number.  &lt;code class=&quot;highlighter-rouge&quot;&gt;@State&lt;/code&gt; on the other hand is something that will notify if there are any changes in the &lt;code class=&quot;highlighter-rouge&quot;&gt;data&lt;/code&gt; array and update whichever component is using that variable. The &lt;code class=&quot;highlighter-rouge&quot;&gt;item&lt;/code&gt; represents each item in the &lt;code class=&quot;highlighter-rouge&quot;&gt;data&lt;/code&gt; array and it is being passed as an argument to another struct, &lt;code class=&quot;highlighter-rouge&quot;&gt;CustomRow&lt;/code&gt;. It’s pretty self explainable what can be done next to create the table cell here. We only have to put in the components we need to complete a single cell in this struct.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;struct CustomRow : View {
	var name: String
	
	var body: some View {
		Text(name)
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If we didn’t need to create a custom table cell, we need not create the &lt;code class=&quot;highlighter-rouge&quot;&gt;CustomRow&lt;/code&gt; struct and just use &lt;code class=&quot;highlighter-rouge&quot;&gt;Text(item)&lt;/code&gt; instead. In the body of our &lt;code class=&quot;highlighter-rouge&quot;&gt;CustomRow&lt;/code&gt; is where you can throw in all the components you’re going to need.&lt;/p&gt;

&lt;p&gt;So, I thought to myself. That wasn’t daunting at all. You no longer have to specify how many sections and rows, no need to get the cell identifier off from the storyboard, which reduces a hell lot of code to write. It’s just that all UI designs you might have in mind will now have to be written in code which sucks.&lt;/p&gt;</content><author><name>jules</name></author><category term="Tutorial" /><summary type="html">First of all, thanks to Scott Smith for helping me understand this. I know it can be another learning curve to start learning SwiftUI if you’ve only begun diving into becoming an iOS developer. It’s daunting at first, but I hope it can be simple too for many newbies. Now, I haven’t gotten my hands on Mac OS Catalina yet, so I can’t actually demonstrate my own version of this tutorial properly if I can’t show you the canvas, which isn’t available in Mojave yet, myself.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/blog/assets/images/Screen%20Shot%202019-09-28%20at%2010.32.57%20PM.png" /></entry><entry><title type="html">A Free Blog Using Mundana Jekyll Theme In Github Pages</title><link href="http://localhost:4000/blog/a-free-blog-using-mundana-jekyll-theme-in-github-pages/" rel="alternate" type="text/html" title="A Free Blog Using Mundana Jekyll Theme In Github Pages" /><published>2019-09-27T00:00:00+08:00</published><updated>2019-09-27T00:00:00+08:00</updated><id>http://localhost:4000/blog/a-free-blog-using-mundana-jekyll-theme-in-github-pages</id><content type="html" xml:base="http://localhost:4000/blog/a-free-blog-using-mundana-jekyll-theme-in-github-pages/">&lt;p&gt;This might be too technical for a non computer savvy to be doing, so I’ve formulated this article to help guide you in creating one of your own. If you want your blog to be in a subdirectory just like my blog &lt;code class=&quot;highlighter-rouge&quot;&gt;iosjunkie.com/blog&lt;/code&gt;, then you might want to see this first:&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/nN6QuNqmAwk&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;It really helped me setup a blog as a subdirectory of my domain. I only had to create another repository &lt;code class=&quot;highlighter-rouge&quot;&gt;blog&lt;/code&gt; and cloned that repository into my computer. Then I copied Mundana’s contents from &lt;a href=&quot;https://github.com/wowthemesnet/mundana-theme-jekyll.git&quot;&gt;Github&lt;/a&gt; into the blog folder. Next is you’ll have to setup the &lt;em&gt;config.yml&lt;/em&gt;.  If your site is in root, for baseurl, make sure this is set to baseurl: ‘’. In my case it’s baseurl: ‘/blog’.&lt;/p&gt;

&lt;p&gt;The first few lines of config.yml is straightforward. You’ll have to change those values. Make sure to change the author attributes as well as the default author under &lt;code class=&quot;highlighter-rouge&quot;&gt;defaults&lt;/code&gt;. Whenever you post something new, you don’t have to indicate a meta for layout, author and avatar anymore.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/blog/assets/images/Screen%20Shot%202019-09-27%20at%206.15.56%20PM.png&quot; alt=&quot;example&quot; /&gt;
Now, this is what makes life easier. With this dashboard, you don’t have to explicity input a meta for your title anymore. Although, you might need to put in the categories, permalink, or tags in your metadata field if you wish to add some.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/blog/assets/images/Screen%20Shot%202019-09-27%20at%206.29.32%20PM.png&quot; alt=&quot;metadata&quot; /&gt;
It’s not a perfect system, uploading a photo here can be a pain. Which is why I decided to move a photo asset in the &lt;code class=&quot;highlighter-rouge&quot;&gt;/assets/images/&lt;/code&gt; directory manually every time, because it saves the photo in my &lt;code class=&quot;highlighter-rouge&quot;&gt;/blog&lt;/code&gt; folder when I upload using &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll-admin&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It’s still a great interface I’m telling you. You can preview your markdown side by side what you’ve written or by toggling preview only. The texteditor isn’t much, but it’ll do more than just using an ordinary one.&lt;/p&gt;

&lt;p&gt;Install this admin dashboard interface on your Gemfile by adding &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll-admin&lt;/code&gt; to it:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;group :jekyll_plugins do
    gem 'jekyll-feed'
    gem 'jekyll-sitemap'
    gem 'jekyll-paginate'
    gem 'jekyll-seo-tag'
    gem 'jekyll-admin'
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Save the file and go to terminal/CMD. Type &lt;code class=&quot;highlighter-rouge&quot;&gt;bundle&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;bundle install&lt;/code&gt; to install the gem, but make sure Ruby is installed in your system.&lt;/p&gt;

&lt;p&gt;You will only be launching this locally. So, everytime you wan to use jekyll-admin, type this on terminal&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bundle exec jekyll serve --watch
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;then go to &lt;code class=&quot;highlighter-rouge&quot;&gt;localhost:4000/admin&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;posting&quot;&gt;Posting&lt;/h3&gt;
&lt;p&gt;I catch myself looking at sample posts whenever I create a new post. You might need to if you’re not familiar with the jekyll format or on how to use markdown. So, I renamed the &lt;code class=&quot;highlighter-rouge&quot;&gt;_post&lt;/code&gt; folder to &lt;code class=&quot;highlighter-rouge&quot;&gt;post&lt;/code&gt; and added &lt;code class=&quot;highlighter-rouge&quot;&gt;post&lt;/code&gt; to my .gitignore. It’s not necessary to create another &lt;code class=&quot;highlighter-rouge&quot;&gt;_post&lt;/code&gt; folder back, but if you’re not using the jekyll-admin or if you’re just using a text editor, then you should create it again.&lt;/p&gt;</content><author><name>jules</name></author><category term="featured" /><summary type="html">This might be too technical for a non computer savvy to be doing, so I’ve formulated this article to help guide you in creating one of your own. If you want your blog to be in a subdirectory just like my blog iosjunkie.com/blog, then you might want to see this first:</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/blog/assets/images/Screen%20Shot%202019-09-27%20at%206.00.31%20PM.png" /></entry><entry><title type="html">Issues With My First App Store Connect Submission</title><link href="http://localhost:4000/blog/issues-with-my-first-app-store-connect-submission/" rel="alternate" type="text/html" title="Issues With My First App Store Connect Submission" /><published>2019-09-27T00:00:00+08:00</published><updated>2019-09-27T00:00:00+08:00</updated><id>http://localhost:4000/blog/issues-with-my-first-app-store-connect-submission</id><content type="html" xml:base="http://localhost:4000/blog/issues-with-my-first-app-store-connect-submission/">&lt;p&gt;It was my first app submission to the app store. I mean, well, I hadn’t submitted it for review yet, but it already detected a couple of issues that needs dealing with. I uploaded it to app connect for 6 times until I got it right.&lt;/p&gt;

&lt;p&gt;The first issue I had to deal with only needed a little bit of tweaking in my project’s &lt;code class=&quot;highlighter-rouge&quot;&gt;Signing and Capabilities&lt;/code&gt;. From there, I added a Capability known as ‘Push Notifications’.&lt;/p&gt;

&lt;p&gt;The second one is because of a deprecated API. I tried updating a cocoapod library “Firebase/Auth” after finding out that this utilizes UIWebView. For some reason, I can’t get update working on a single pod. Prior to this, I thought Facebook Core and Facebook Login were the culprits, knowing those would open a UIWebView for me to sign into Facebook. I guess I found a fix on Github issues, which helped other developers with what might have been a similar problem.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pod 'FacebookCore', '~&amp;gt; 0.9.0'
pod 'FacebookLogin', '~&amp;gt; 0.9.0'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After trying this out, it didn’t actually help with the second issue. Until, I finally decided to  update all the pods with just a simple&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pod update
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I didn’t know most of my pods were actually not up-to-date until I did that. Voila, I didn’t get another warning after uploading my project to App Connect.&lt;/p&gt;

&lt;p&gt;There were just a few more things that needed filling up. Below are things that needed to be filled:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Support URL&lt;/p&gt;

    &lt;p&gt;It would come as a surprise to you that you actually might need something like this. I mean, it surprised me too. I didn’t fully grasp what it meant even after  hovering on the question mark to reveal insights of what this might be. From what I’ve gathered in teamtreehouse.com, “its purpose is to allow users to get in contact with you if they experience problems, desire new features or want to ask questions about your app.” Hence, I just used my portfolio as the link.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Build&lt;/p&gt;

    &lt;p&gt;This is an obvious requirement. And just to bring more light into it, because I didn’t know how it worked at first. Every time you make changes in the code or anywhere in your project, you need to change the build number. So, after having dealt with those warning issues above, I had to increase the build number in project settings, otherwise I couldn’t upload a project with an already existing build number in the app connect.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Rating&lt;/p&gt;

    &lt;p&gt;This I had no idea too. I initially thought &lt;code class=&quot;highlighter-rouge&quot;&gt;why would I be rating stars of my own app?&lt;/code&gt; Stupid, right? Well, just click the edit button beside it and you’ll have a change of perspective.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

 	&lt;img src=&quot;/blog/assets/images/Screen%20Shot%202019-09-27%20at%204.09.36%20PM.png&quot; alt=&quot;ratings&quot; /&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Copyright&lt;/p&gt;

    &lt;p&gt;I’m not running a company, so I also googled what I could possibly put here. I was wondering if I could actually use &lt;code class=&quot;highlighter-rouge&quot;&gt;2019 iOS Junkie&lt;/code&gt;, but maybe not. So, I just used my name instead.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;General App Information and Contact Information&lt;/p&gt;

    &lt;p&gt;I had to fill out all details with fields referring to name, address, contact number, and email address. Otherwise, it will turn red and not submit for review when you have to.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;post-submission&quot;&gt;Post submission&lt;/h2&gt;

&lt;p&gt;I encountered a rejection. Yes, you can’t have all the fun yet. They sent me this email&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/Screen%20Shot%202019-09-27%20at%2010.45.05%20AM.png&quot; alt=&quot;location&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Below it was a screenshot of where in my app particularly went wrong. I changed my Information Property List with just one line of sentence that has to do with my location privacy usage to &lt;code class=&quot;highlighter-rouge&quot;&gt;Laundry City would like to use your current location to display it on the app, also for directions and estimations of distance. It is secure and private.&lt;/code&gt; It’s much longer and I hope it’s worth it.&lt;/p&gt;</content><author><name>jules</name></author><category term="featured" /><summary type="html">It was my first app submission to the app store. I mean, well, I hadn’t submitted it for review yet, but it already detected a couple of issues that needs dealing with. I uploaded it to app connect for 6 times until I got it right.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/blog/assets/images/Screen%20Shot%202019-09-25%20at%208.43.21%20PM.png" /></entry></feed>