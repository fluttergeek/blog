<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://iosjunkie.com/blog/feed.xml" rel="self" type="application/atom+xml" /><link href="http://iosjunkie.com/blog/" rel="alternate" type="text/html" /><updated>2019-10-11T14:32:24+08:00</updated><id>http://iosjunkie.com/blog/feed.xml</id><title type="html">iOS Junkie</title><subtitle>Demystifying complex instructions, tutorials, and a little bit more geared toward the iOS development or Swift stuff. Technical yet simple tips on how iOS components work.</subtitle><entry><title type="html">Experience With Carthage As Opposed To Cocoapods</title><link href="http://iosjunkie.com/blog/experience-with-carthage/" rel="alternate" type="text/html" title="Experience With Carthage As Opposed To Cocoapods" /><published>2019-10-11T00:00:00+08:00</published><updated>2019-10-11T00:00:00+08:00</updated><id>http://iosjunkie.com/blog/experience-with-carthage</id><content type="html" xml:base="http://iosjunkie.com/blog/experience-with-carthage/">&lt;p&gt;Cocoapods makes your build times slower and that’s why I’ve taken the liberty of trying Carthage. Well, from the instructions I’ve read in bigger frameworks like &lt;code class=&quot;highlighter-rouge&quot;&gt;Realm&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;FacebookCore/FacebookLogin&lt;/code&gt;, it is a daunting process. Which is why it took me this long to want to even bother with it. But for some smaller frameworks, it is almost similar to Cocoapod’s process, which I like better. Unfortunately, this arduous shift took painfully long to install the frameworks. Every time I add a new framework to my &lt;code class=&quot;highlighter-rouge&quot;&gt;Cartfile&lt;/code&gt; and update carthage, it downloads everything and builds everything over again. My gahd!&lt;/p&gt;

&lt;p&gt;Apart from that, I didn’t know that I had to take this extra step for each of the framework I’m using.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/Screen%20Shot%202019-10-11%20at%2012.38.52%20AM.png&quot; alt=&quot;IMPORTING&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If I didn’t import all of them there, I’d get this error.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/Screen%20Shot%202019-10-11%20at%2012.30.16%20AM.png&quot; alt=&quot;error&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There’s also another step you have to do:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Go to Build Phases&lt;/li&gt;
  &lt;li&gt;Click &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; and add New Run Script Phase&lt;/li&gt;
  &lt;li&gt;Type &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/local/bin/carthage copy-frameworks&lt;/code&gt; in the ginormous textarea under &lt;code class=&quot;highlighter-rouge&quot;&gt;Shell /bin/sh&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We’re not done yet. Phew! For every framework you add, you also need to add their location in the &lt;code class=&quot;highlighter-rouge&quot;&gt;input files&lt;/code&gt;. For this, I used &lt;code class=&quot;highlighter-rouge&quot;&gt;Carting&lt;/code&gt;. It creates a &lt;code class=&quot;highlighter-rouge&quot;&gt;xcfilelist&lt;/code&gt; for input files and output files for all of it. &lt;a href=&quot;https://github.com/artemnovichkov/Carting&quot;&gt;Check it out&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There were a few frameworks that just doesn’t work with Carthage, those being:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;GMStepper - No carthage available&lt;/li&gt;
  &lt;li&gt;BetterSegmentedControl - Error during Carthage installation&lt;/li&gt;
  &lt;li&gt;Firebase - They will not be maintaining their Carthage archives anymore. They’d rather invest it on &lt;code class=&quot;highlighter-rouge&quot;&gt;Swift Package Manager&lt;/code&gt;, though I’d still have to look it up one day.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For these three, I maintained the use of Cocoapods. It can works hand in hand with Carthage.&lt;/p&gt;

&lt;p&gt;I’m not sure I’ve noticed any changes, because Firebase is the heaviest framework I have and it is installed with Cocoapods, thereby still making my build time really slow. Apart from that, I don’t really see the rest of the frameworks build anymore. I guess that’s an improvement.&lt;/p&gt;</content><author><name>jules</name></author><category term="" /><category term="carthage" /><category term="swift" /><category term="cocoapods" /><category term="cocoapod" /><category term="pod" /><category term="import" /><category term="libraries" /><category term="framework" /><category term="bettersegmentedcontrol" /><category term="gmstepper" /><summary type="html">Cocoapods makes your build times slower and that’s why I’ve taken the liberty of trying Carthage. Well, from the instructions I’ve read in bigger frameworks like Realm and FacebookCore/FacebookLogin, it is a daunting process. Which is why it took me this long to want to even bother with it. But for some smaller frameworks, it is almost similar to Cocoapod’s process, which I like better. Unfortunately, this arduous shift took painfully long to install the frameworks. Every time I add a new framework to my Cartfile and update carthage, it downloads everything and builds everything over again. My gahd!</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://koenig-media.raywenderlich.com/uploads/2017/08/Carthage-feature-2.png" /></entry><entry><title type="html">Sign Out Firebase And Remove Access Token</title><link href="http://iosjunkie.com/blog/sign-out-firebase-and-remove-access-token/" rel="alternate" type="text/html" title="Sign Out Firebase And Remove Access Token" /><published>2019-10-09T00:00:00+08:00</published><updated>2019-10-09T00:00:00+08:00</updated><id>http://iosjunkie.com/blog/sign-out-firebase-and-remove-access-token</id><content type="html" xml:base="http://iosjunkie.com/blog/sign-out-firebase-and-remove-access-token/">&lt;p&gt;I call the &lt;code class=&quot;highlighter-rouge&quot;&gt;signOut()&lt;/code&gt; to sign out, but there’s really a lot of things going on inside my call. I’m not sure which is the correct way to do this yet, but what I’m trying to achieve is once I’m signed off, my login view will not automatically sign me back in. My login view checks if the access token contains a token, and if it does, then automatically sign me in and performSegue.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func logOut(completion:@escaping(_ errorOccured: Bool) -&amp;gt; Void)  {
    let firebaseAuth = Auth.auth()
    var err: Bool = true
    defer { completion(err) }
    do {
        try firebaseAuth.signOut()
        err = false
    } catch _ as NSError {
        err = true
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is how my closure function looks like before I try to remove the access token in the next function that you’ll see.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;If it tried to &lt;code class=&quot;highlighter-rouge&quot;&gt;signOut()&lt;/code&gt; successfully,  there will be no error, otherwise there will be.&lt;/li&gt;
  &lt;li&gt;The error’s boolean value will be passed to my completion block which will happen after the function scope will be exited.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func signOut() {
    logOut { (err) in
        guard err == false else {
            self.showError(message: &quot;Unsuccessful logout :(&quot;)
            return
        }
        AccessToken.current = nil
        UserDefaults.standard.removePersistentDomain(forName: Bundle.main.bundleIdentifier!)
        AccessToken.refreshCurrentAccessToken( { (request, any, err) in
            if AccessToken.current != nil {} else {
                self.performSegue(withIdentifier: &quot;goToLogin&quot;, sender: self)
            }
        })
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;When logOut is completed, the closure’s contents will be executed, unless if there was an error, then show an error to the user and skip removing the access token.&lt;/p&gt;

&lt;p&gt;I’m only trying to remove the access token and make sure it is empty before I perform the segue.&lt;/p&gt;

&lt;p&gt;So far this works for me, but then I’ll have to call &lt;code class=&quot;highlighter-rouge&quot;&gt;AccessToken.refreshCurrentAccessToken&lt;/code&gt; again in my login view to make sure access token is nil by the time I’m signed out. If I omitted that, my access token still contains the token. It is redudant to call &lt;code class=&quot;highlighter-rouge&quot;&gt;AccessToken.refreshCurrentAccessToken&lt;/code&gt; again ni both views but so far this is the only thing that works for me now.&lt;/p&gt;</content><author><name>jules</name></author><category term="" /><category term="firebase" /><category term="sign" /><category term="out" /><category term="feature" /><category term="access" /><category term="token" /><category term="defer" /><category term="login" /><summary type="html">I call the signOut() to sign out, but there’s really a lot of things going on inside my call. I’m not sure which is the correct way to do this yet, but what I’m trying to achieve is once I’m signed off, my login view will not automatically sign me back in. My login view checks if the access token contains a token, and if it does, then automatically sign me in and performSegue.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.hasura.io/content/images/2019/03/rawpixel-783430-unsplash-1.jpg" /></entry><entry><title type="html">Notification And Observer: The Basics</title><link href="http://iosjunkie.com/blog/notification-and-observer-the-basics/" rel="alternate" type="text/html" title="Notification And Observer: The Basics" /><published>2019-10-09T00:00:00+08:00</published><updated>2019-10-09T00:00:00+08:00</updated><id>http://iosjunkie.com/blog/notification-and-observer-the-basics</id><content type="html" xml:base="http://iosjunkie.com/blog/notification-and-observer-the-basics/">&lt;p&gt;This topic is not about Local Notifications or Push Notifications. It is about creating triggers. This is a straightforward snippet of how you call a trigger or the one-liner that notifies the observer:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Trigger/Notifier
NotificationCenter.default.post(name: NSNotification.Name.init(&quot;done&quot;), object: nil)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will look for an observer that will allow you to send this trigger an action. It is looking for an observer named &lt;code class=&quot;highlighter-rouge&quot;&gt;done&lt;/code&gt;. Let’s create that too:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Observer
NotificationCenter.default.addObserver(self, selector: #selector(sortAndStopLoading(n:)), name: NSNotification.Name.init(&quot;done&quot;), object: nil)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now this is something you’d probably find in the &lt;code class=&quot;highlighter-rouge&quot;&gt;viewDidLoad&lt;/code&gt; of your ViewCotroller. Just to create an observation to catch the trigger with the name &lt;code class=&quot;highlighter-rouge&quot;&gt;done&lt;/code&gt; and provides an action when the trigger has been called. Let’s create that action too:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Action
@objc func sortAndStopLoading(n: NSNotification) {
        done += 1
        
        if done == 2 {
            print(&quot;reached&quot;)
            self.sales = self.sales.sorted(by: {($0[&quot;number&quot;] as! Int) &amp;gt; ($1[&quot;number&quot;] as! Int)})
            self.stopLoading()
        }
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Never mind the content of my function. What is important here is you know how the selector’s given function will actually look like. If you were wondering what is inside my function, it is simply just waiting for the trigger to call this function two times from maybe two different sources of thread that call the same trigger. When both threads are &lt;code class=&quot;highlighter-rouge&quot;&gt;done&lt;/code&gt;, then we can sort the array’s contents and tuck away the loader image.&lt;/p&gt;

&lt;p&gt;If your ViewController is done &lt;code class=&quot;highlighter-rouge&quot;&gt;observing&lt;/code&gt;, and we disappear from this view or something, we should remove this observer like so:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;deinit {
    NotificationCenter.default.removeObserver(self, name: NSNotification.Name.init(&quot;done&quot;), object: nil)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;or like this&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;override func viewDidDisappear(_ animated: Bool) {
    NotificationCenter.default.removeObserver(self, name: NSNotification.Name.init(&quot;done&quot;), object: nil)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>jules</name></author><category term="" /><category term="featured" /><category term="swift" /><category term="notification" /><category term="observer" /><category term="push" /><category term="local" /><category term="remote" /><category term="trigger" /><summary type="html">This topic is not about Local Notifications or Push Notifications. It is about creating triggers. This is a straightforward snippet of how you call a trigger or the one-liner that notifies the observer:</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://iosjunkie.com/blog/assets/images/1_Ca69vjmxQIdkOfW-O6hZaA.png" /></entry><entry><title type="html">Check If Online Swift 5</title><link href="http://iosjunkie.com/blog/check-if-online-swift-5/" rel="alternate" type="text/html" title="Check If Online Swift 5" /><published>2019-10-09T00:00:00+08:00</published><updated>2019-10-09T00:00:00+08:00</updated><id>http://iosjunkie.com/blog/check-if-online-swift-5</id><content type="html" xml:base="http://iosjunkie.com/blog/check-if-online-swift-5/">&lt;p&gt;Thanks to &lt;a href=&quot;https://www.hackingwithswift.com/example-code/networking/how-to-check-for-internet-connectivity-using-nwpathmonitor&quot;&gt;Paul Hudson @twostraws&lt;/a&gt; for the informative knowledge on how to check for internet connection. Let me remind you that this solution is available since iOS 12.0. WWDC in June 2018 introduced the Network framework available from iOS 12 onwards which includes the NWPathMonitor class, which we will be using in this tutorial. Here’s a straight forward example of the basic implementation on how to check for internet connection.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import Network
private let monitor = NWPathMonitor()
monitor.start(queue: queue)
monitor.pathUpdateHandler = { path in
    if path.status == .satisfied {
        print(&quot;Online&quot;)
    } else {
        print(&quot;Offline)
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;It’s so much shorter than the previous baffling solutions that you can find on stackoverflow. &lt;a href=&quot;https://stackoverflow.com/questions/30743408/check-for-internet-connection-with-swift&quot;&gt;Previous solutions&lt;/a&gt; had to be particular about the connectivity. If it’s coming from a WiFi, 4G, 3G or cellular data. My previous way of checking the internet connection was to use &lt;code class=&quot;highlighter-rouge&quot;&gt;Alamofire&lt;/code&gt;’s network reachability feature which was way simpler than the other solutions, but I added a library that only uses this one feature. Hence, longer build time for something thatI didn’t necessarily need. Now you don’t even have to worry for the most part. It’s just that simple code that allows you to check for internet connectivity.&lt;/p&gt;

&lt;p&gt;Now, I created something to allow me to check for the internet connection in different parts of my project without having to &lt;code class=&quot;highlighter-rouge&quot;&gt;import Network&lt;/code&gt; all the damn time.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func online(completion: @escaping (Bool) -&amp;gt; Void) {
    let monitor = NWPathMonitor()
    let queue = DispatchQueue.global(qos: .background)
    monitor.start(queue: queue)
    monitor.pathUpdateHandler = { path in
      var err = true
      defer {
        completion(err)
        monitor.cancel()
      }
      if path.status == .satisfied {
        err = false
      } else {
        self.showError(message: &quot;Offline! :(&quot;)
        err = true
      }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note that the we have to cancel the network monitoring that’s been in the background thread, if you want to stop checking for the internet connection. If you don’t cancel it, every time the connectivity changes, your monitor.pathUpdateHandler will execute itself again. I created this inside a singleton which allows me to call this method simply, anywhere, like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Singleton.sharedInstance.online { (err) in
    guard err == false else { return }
		
    // Do whatever online
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There’s a more elaborate article discussing how the &lt;code class=&quot;highlighter-rouge&quot;&gt;Network&lt;/code&gt; framework can be used. Check &lt;a href=&quot;https://medium.com/@rwbutler/nwpathmonitor-the-new-reachability-de101a5a8835&quot;&gt;it&lt;/a&gt; out.&lt;/p&gt;</content><author><name>jules</name></author><category term="" /><category term="online" /><category term="swift" /><category term="check" /><category term="internet" /><category term="connection" /><category term="available" /><category term="offline" /><summary type="html">Thanks to Paul Hudson @twostraws for the informative knowledge on how to check for internet connection. Let me remind you that this solution is available since iOS 12.0. WWDC in June 2018 introduced the Network framework available from iOS 12 onwards which includes the NWPathMonitor class, which we will be using in this tutorial. Here’s a straight forward example of the basic implementation on how to check for internet connection.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQBXD5o0JeyxP-5MmwSZO4lOrONruMPlZmrTRWonLxYsgx1iPYH" /></entry><entry><title type="html">My First Post On Reddit</title><link href="http://iosjunkie.com/blog/my-first-post-on-reddit/" rel="alternate" type="text/html" title="My First Post On Reddit" /><published>2019-10-08T00:00:00+08:00</published><updated>2019-10-08T00:00:00+08:00</updated><id>http://iosjunkie.com/blog/my-first-post-on-reddit</id><content type="html" xml:base="http://iosjunkie.com/blog/my-first-post-on-reddit/">&lt;p&gt;YouTube has been recommeding me blog tips and I’ve recently been keen on trying to get views on this blog. Today, my blog is still not indexed by google, but my half-baked portfolio &lt;code class=&quot;highlighter-rouge&quot;&gt;iosjunkie.com&lt;/code&gt; is. Which is weird.&lt;/p&gt;

&lt;p&gt;One of the tips of some YouTuber was to post your links on &lt;code class=&quot;highlighter-rouge&quot;&gt;Reddit&lt;/code&gt;. I was hesitant at first because I felt like it would be kind of like spamming on the internet, but that YouTuber said that it would help index my blog faster, and so I did. So, it happens that there are three ways to post on Reddit, just like the numerous ways to post on Facebook. You can post a &lt;code class=&quot;highlighter-rouge&quot;&gt;link, image, or a text&lt;/code&gt;. No wonder I’ve been seeing so many links only posts on Reddit. I thought they were spammy.&lt;/p&gt;

&lt;p&gt;The way it works is just copy and paste a link to the &lt;code class=&quot;highlighter-rouge&quot;&gt;Url&lt;/code&gt; field. Once you’re done, the &lt;code class=&quot;highlighter-rouge&quot;&gt;title&lt;/code&gt; field will automatically fill itself out, then submit. You can’t upload a thumbnail on the link you posted. It is also automatically generated coming from your link’s image metadata. Just brilliant! However, you can’t really post links everywhere. There are some topics that you won’t be allowed to post links to.&lt;/p&gt;

&lt;p&gt;The second link post was what I posted on my blog just yesterday. I just thought people would try to find it because it is a more recent issue with Xcode 11, and so people did find it really quick. Now I have &lt;code class=&quot;highlighter-rouge&quot;&gt;16 karmas&lt;/code&gt; just for a day of using Reddit. Whatever the hell that means. So it is true that it is easier for your blog to be found if you post on &lt;code class=&quot;highlighter-rouge&quot;&gt;Reddit&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;My first link post was a tutorial and I was sure people were going to find it more helpful, but as it turns out, no one bothered to touch it yet. I’m still sure that posting it on &lt;code class=&quot;highlighter-rouge&quot;&gt;Reddit&lt;/code&gt; will help that post be seen than not having posted it on Reddit.&lt;/p&gt;

&lt;p&gt;And.. surprise.. surprise! My blog views also went up really high. At least, the highest it has been since creation.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/71862910_476156719779477_1624238644300611584_n.jpg&quot; alt=&quot;analytics&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This feels great actually. It feels like I’m already indexed by &lt;code class=&quot;highlighter-rouge&quot;&gt;Google&lt;/code&gt; and like people are already flocking into my blog. Someone also recently just gave me a tip for my other blog post, hence I updated my blog post, and now, it has a more flavorful content. Dang, I’m really feeling like a legit blogger now.&lt;/p&gt;</content><author><name>jules</name></author><category term="" /><category term="featured" /><category term="reddit" /><category term="post" /><category term="blog" /><summary type="html">YouTube has been recommeding me blog tips and I’ve recently been keen on trying to get views on this blog. Today, my blog is still not indexed by google, but my half-baked portfolio iosjunkie.com is. Which is weird.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://iosjunkie.com/blog/assets/images/Screen%20Shot%202019-10-08%20at%208.38.36%20PM.png" /></entry><entry><title type="html">Basic Implementation of Local Notifications</title><link href="http://iosjunkie.com/blog/basic-implementation-of-local-notifications/" rel="alternate" type="text/html" title="Basic Implementation of Local Notifications" /><published>2019-10-08T00:00:00+08:00</published><updated>2019-10-08T00:00:00+08:00</updated><id>http://iosjunkie.com/blog/basic-implementation-of-local-notifications</id><content type="html" xml:base="http://iosjunkie.com/blog/basic-implementation-of-local-notifications/">&lt;p&gt;Let’s get one thing straight now baby. Local notifications is not the same as &lt;code class=&quot;highlighter-rouge&quot;&gt;Push&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;Remote&lt;/code&gt; notifications. It is also not the same as the Notification-Observer relationship which I will discuss &lt;a href=&quot;/blog/notification-and-observer-the-basics/&quot;&gt;next&lt;/a&gt;. They differ because local notifications don’t need triggers coming from outside the app. Either way, you’ll still need the &lt;code class=&quot;highlighter-rouge&quot;&gt;UNUserNotificationCenter&lt;/code&gt;, and for that, you need to import &lt;code class=&quot;highlighter-rouge&quot;&gt;UserNotifications&lt;/code&gt;. This is usually used in scheduling apps like alarm and todo-list.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// AppDelegate.swift
import UserNotifications

@UIApplicationMain
class AppDelegate: UIResponder, UIApplicationDelegate {

    var window: UIWindow?

    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -&amp;gt; Bool {
        // Override point for customization after application launch.
        
        if #available(iOS 10.0, *) {
          // For iOS 10 display notification (sent via APNS)
          UNUserNotificationCenter.current().delegate = self

          let authOptions: UNAuthorizationOptions = [.alert, .badge, .sound]
          UNUserNotificationCenter.current().requestAuthorization(
            options: authOptions,
            completionHandler: {_, _ in })
        } else {
          let settings: UIUserNotificationSettings =
          UIUserNotificationSettings(types: [.alert, .badge, .sound], categories: nil)
          application.registerUserNotificationSettings(settings)
        }
				
        return ApplicationDelegate.shared.application(application, didFinishLaunchingWithOptions: launchOptions)
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We must have this in our AppDelegate.swift first. It asks permission from the user if he is okay yo receiving notifications from your app. That request will allow &lt;code class=&quot;highlighter-rouge&quot;&gt;alert, badge, and sound&lt;/code&gt;. Depending on how much you want the user to experience the notification. You can omit sound or the other types for example: &lt;code class=&quot;highlighter-rouge&quot;&gt;[.alert, .badge]&lt;/code&gt;. Next is the fun part, and you can choose to put it wherever your app needs it.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 1. Preparing our notification content
let content = UNMutableNotificationContent()
content.title = &quot;Hey kid&quot;
content.body = &quot;Where's your parents?&quot;
content.sound = UNNotificationSound.default()
content.badge = 1

// 2. Preparing when our notification would fire
let date = Date().addingTimeInterval(5)
let dateComponents = Calendar.current.dateComponents([.year, .month, .day, .hour, .minute, .second], from: date)

// 3. Preparing what argument will trigger the notification to come up
let trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents, repeats: false)

// 4. Combining all the preparations into one request
let uuidString = UUID().uuidString
let request = UNNotificationRequest(identifier: uuidString, content: content, trigger: trigger)

// 5. Finally, execute the request
let center = UNUserNotificationCenter.current()
center.add(request) { (err) in
    guard err == nil else { return }
    // Whatever you want to do after firing that badass notification
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;this-algorithm-is-broken-down-into-five-parts&quot;&gt;This algorithm is broken down into five parts.&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Create the content. That’s what the user can see in your notification.
    &lt;ol&gt;
      &lt;li&gt;The badge is the red circular thing on the top right corner of your app’s icon with the number of how many notifications were fired up.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;Setting when to fire up the notification. If you print them out, this is how they’ll look like:
    &lt;ol&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;8 Oct 2019 at 2:53 AM&quot;&lt;/code&gt; // darw&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;year: 2019 month: 10 day: 8 hour: 2 minute: 53 second: 26 isLeapMonth: false &lt;/code&gt; // dateComponents&lt;/li&gt;
      &lt;li&gt;You can create your date component this way to be more specific about the date: &lt;code class=&quot;highlighter-rouge&quot;&gt;DateComponents(year: year, month: month, day: day)&lt;/code&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;Create a trigger and add the &lt;code class=&quot;highlighter-rouge&quot;&gt;when&lt;/code&gt; to it. You can make it repeat its time interval by setting &lt;code class=&quot;highlighter-rouge&quot;&gt;repeat&lt;/code&gt; to true.&lt;/li&gt;
  &lt;li&gt;It’s possible that there may be many requests of triggers, hence we needed that &lt;code class=&quot;highlighter-rouge&quot;&gt;id&lt;/code&gt;. UUID() is one hell of a one liner that can give you a random string. You can use it anywhere actually. It gives off something like this: &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;31A7BADF-93F8-40A0-B642-DEDE7BD6179B\n&quot;&lt;/code&gt; if you print it.&lt;/li&gt;
  &lt;li&gt;Finally we may now make the request appear more tangible and we need the current instance of our notification center to allow such a thing to happen.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;to-add-buttons-on-your-notification&quot;&gt;To add buttons on your notification&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://www.appboy.com/blog/wp-content/uploads/2017/05/Push-Action-Buttons-Example-4-300x169.png&quot; alt=&quot;buttons&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Add something like this to step 1: &lt;code class=&quot;highlighter-rouge&quot;&gt;content.categoryIdentifier = &quot;alarm&quot;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Add something like this before step 5:
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let show = UNNotificationAction(identifier: &quot;show&quot;, title: &quot;Tell me more…&quot;, options: .foreground)
let category = UNNotificationCategory(identifier: &quot;alarm&quot;, actions: [show], intentIdentifiers: [])
center.setNotificationCategories([category])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And make sure your ViewController conforms to &lt;code class=&quot;highlighter-rouge&quot;&gt;UNUserNotificationCenterDelegate&lt;/code&gt; to catch the response coming off from the user’s chosen action on the button.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func userNotificationCenter(_ center: UNUserNotificationCenter, didReceive response: UNNotificationResponse, withCompletionHandler completionHandler: @escaping () -&amp;gt; Void) {
    // pull out the buried userInfo dictionary
    let userInfo = response.notification.request.content.userInfo

    if let customData = userInfo[&quot;customData&quot;] as? String {
        print(&quot;Custom data received: \(customData)&quot;)

        switch response.actionIdentifier {
        case UNNotificationDefaultActionIdentifier:
            // the user swiped to unlock
            print(&quot;Default identifier&quot;)

        case &quot;show&quot;:
            // the user tapped our &quot;show more info…&quot; button
            print(&quot;Show more information…&quot;)
            break

        default:
            break
        }
    }

    // you must call the completion handler when you're done
    completionHandler()
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Thanks to &lt;a href=&quot;https://www.youtube.com/watch?v=JuqQUP0pnZY&quot;&gt;CodeWithChris&lt;/a&gt; and &lt;a href=&quot;https://www.hackingwithswift.com/example-code/system/how-to-set-local-alerts-using-unnotificationcenter&quot;&gt;Paul Hudson @twostraws&lt;/a&gt; for making me understand how to actually do this.&lt;/p&gt;</content><author><name>jules</name></author><category term="" /><category term="local" /><category term="notification" /><category term="push" /><category term="remote" /><category term="UNUsernotification" /><category term="newbies" /><category term="basic" /><summary type="html">Let’s get one thing straight now baby. Local notifications is not the same as Push/Remote notifications. It is also not the same as the Notification-Observer relationship which I will discuss next. They differ because local notifications don’t need triggers coming from outside the app. Either way, you’ll still need the UNUserNotificationCenter, and for that, you need to import UserNotifications. This is usually used in scheduling apps like alarm and todo-list.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://iosjunkie.com/blog/assets/images/Notifications_Top_2x.png" /></entry><entry><title type="html">Native Messenger App For Mac OS (Review) vs Caprine vs Goofy vs Franz</title><link href="http://iosjunkie.com/blog/native-messenger-app-for-mac-os-review/" rel="alternate" type="text/html" title="Native Messenger App For Mac OS (Review) vs Caprine vs Goofy vs Franz" /><published>2019-10-08T00:00:00+08:00</published><updated>2019-10-08T00:00:00+08:00</updated><id>http://iosjunkie.com/blog/native-messenger-app-for-mac-os-review</id><content type="html" xml:base="http://iosjunkie.com/blog/native-messenger-app-for-mac-os-review/">&lt;p&gt;I’m currently on Mojave and I just thought that it’s time I use an app for messenger. It takes quite a while to load Facebook messenger on my Chrome browser. Maybe it’s just my internet speed. So I looked for an app on the Mac App Store and there’s not much apps out there for native Mac OS app look of Messenger. This is probably the only one out there. The only one I’ve found at least. I’ve scrolled deep enough to see there’s no other like it. It has decent amount of stars as rating, but does it really live up to it?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/Screen_Shot_2019-10-08_at_7_52_32_PM.png&quot; alt=&quot;chatmate&quot; /&gt;&lt;/p&gt;

&lt;p&gt;What can I say? It really looks native, but it is half-baked. Here’s why:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;The login fields look alright, but the placeholder doesn’t say the username can be accepted too. It’s just &lt;code class=&quot;highlighter-rouge&quot;&gt;Email&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;phone number&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;The login button is especially horrible looking. Just a plane white button with no rounded edges. Its font is too thin and the spacing around the text of the button is just not well thought of.&lt;/li&gt;
  &lt;li&gt;As you can see on the photo, the user’s icon is overlapping the window frame’s buttons.&lt;/li&gt;
  &lt;li&gt;Some text like &lt;code class=&quot;highlighter-rouge&quot;&gt;Chat&lt;/code&gt; is meant to be brighter on this dark mode. It definitely looks more suited to the light mode.&lt;/li&gt;
  &lt;li&gt;The light mode is actually more gray than white.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Other than that, I’m satisfied with the app. I bought it for only a dollar. I’m going to keep on using it because it’s way faster than loading the messenger website.&lt;/p&gt;

&lt;h2 id=&quot;update&quot;&gt;UPDATE:&lt;/h2&gt;

&lt;p&gt;Thanks to &lt;a href=&quot;https://www.reddit.com/r/macapps/comments/dezb0e/native_messenger_app_for_mac_os_review/&quot;&gt;u/Auttoh&lt;/a&gt; and &lt;a href=&quot;https://www.reddit.com/r/macapps/comments/dezb0e/native_messenger_app_for_mac_os_review/&quot;&gt;aadillyas&lt;/a&gt; for responding on my Reddit link post of this blog post. They both gave me a tip on a similar app but not found on the app store. It’s from a &lt;a href=&quot;https://github.com/sindresorhus/caprine/&quot;&gt;github link&lt;/a&gt;. Caprine is an unofficial and privacy-focused Facebook Messenger app with many useful features. As you can see, I didn’t have to pixelate the names of my friends because they have this feature to hide names and avatars. It also allows you to follow the system’s appearance of your mac. Say you are in dark mode, the app will also be in dark mode. If you changed your system’s appearance to light mode, the app will also turn light mode. You can also choose to make its mode independent from the system’s appearance.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/Screen%20Shot%202019-10-09%20at%204.28.52%20AM.png&quot; alt=&quot;caprine&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There’s also a compact mode on this app which hides away the names if your window is tinier. Only pictures of your friends will be shown on the side.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/sindresorhus/caprine/raw/master/media/screenshot-compact.png&quot; alt=&quot;compact&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It looks way more sophisticated than &lt;code class=&quot;highlighter-rouge&quot;&gt;Chatmate&lt;/code&gt; but it doesn’t feel as snappy. It is build on javascript/&lt;code class=&quot;highlighter-rouge&quot;&gt;Electron&lt;/code&gt; hence it is not native. Although, it looks native enough actually. There are still some features that load like a web page, like when choosing &lt;code class=&quot;highlighter-rouge&quot;&gt;stickers&lt;/code&gt; or when loading a conversation from another friend. After a day of using it, I realized how long it takes to open the app. I see a dark empty window first for a maybe 15 to 30 seconds until t loads the messenger web page.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.goofyapp.com/&quot;&gt;Goofy&lt;/a&gt; is another unoffical Messenger mac app. It is also &lt;code class=&quot;highlighter-rouge&quot;&gt;Electron&lt;/code&gt; based. It could be faster because it has much less features than &lt;code class=&quot;highlighter-rouge&quot;&gt;Caprine&lt;/code&gt;, obviously.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.goofyapp.com/img/screenshot.png&quot; alt=&quot;goofy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;That’s Goofy for you! I haven’t tried it, yet I assume it would look similar to &lt;code class=&quot;highlighter-rouge&quot;&gt;Caprine&lt;/code&gt; too.&lt;/p&gt;

&lt;p&gt;Now here’s something I’d like to introduce to you. I’m not sure what this is built on, but it is faster than &lt;code class=&quot;highlighter-rouge&quot;&gt;Caprine&lt;/code&gt;, but I wish it had &lt;code class=&quot;highlighter-rouge&quot;&gt;Caprine's&lt;/code&gt; awesome features. The only thing I love about it is that it loads much faster. Franz is the former Emperor of Austria - but also a messaging app that combines chat &amp;amp; messaging services into one application. &lt;a href=&quot;https://meetfranz.com/&quot;&gt;Franz&lt;/a&gt; currently supports Slack, WhatsApp, WeChat, Facebook Messenger, Telegram, Google Hangouts, GroupMe, Skype and many more.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://meetfranz.com/static/images/franz-screenshot.png&quot; alt=&quot;franz&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It does not feel heavy on the system, but the messenger part is simply a web app of the official &lt;code class=&quot;highlighter-rouge&quot;&gt;Messenger&lt;/code&gt;. Hence, it still isn’t a native solution. How it feels when using the web app is the exact same feel when using &lt;code class=&quot;highlighter-rouge&quot;&gt;Franz&lt;/code&gt; and I can say that it feels much master than &lt;code class=&quot;highlighter-rouge&quot;&gt;Caprine&lt;/code&gt; when loading the stickers. The only downside I can find is that it just keeps asking you to purchase &lt;code class=&quot;highlighter-rouge&quot;&gt;Franz Professional&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/Screen%20Shot%202019-10-09%20at%2010.56.18%20PM.png&quot; alt=&quot;franzprofessional&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It went like this out of nowehere like a screensaver, and I waited 15 seconds for it to go back to messenger mode.&lt;/p&gt;</content><author><name>jules</name></author><category term="" /><category term="review" /><category term="mac" /><category term="os" /><category term="app" /><category term="messenger" /><category term="facebook" /><summary type="html">I’m currently on Mojave and I just thought that it’s time I use an app for messenger. It takes quite a while to load Facebook messenger on my Chrome browser. Maybe it’s just my internet speed. So I looked for an app on the Mac App Store and there’s not much apps out there for native Mac OS app look of Messenger. This is probably the only one out there. The only one I’ve found at least. I’ve scrolled deep enough to see there’s no other like it. It has decent amount of stars as rating, but does it really live up to it?</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://iosjunkie.com/blog/assets/images/Screen%20Shot%202019-10-08%20at%207.52.43%20PM.png" /></entry><entry><title type="html">Sophisticated Way To Use LocationManager Swift 5</title><link href="http://iosjunkie.com/blog/sophisticated-way-to-use-locationmanager-swift-5/" rel="alternate" type="text/html" title="Sophisticated Way To Use LocationManager Swift 5" /><published>2019-10-07T00:00:00+08:00</published><updated>2019-10-07T00:00:00+08:00</updated><id>http://iosjunkie.com/blog/sophisticated-way-to-use-locationmanager-swift-5</id><content type="html" xml:base="http://iosjunkie.com/blog/sophisticated-way-to-use-locationmanager-swift-5/">&lt;p&gt;This is the most elegant solution I found on how to retrieve location with CoreLocation.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import CoreLocation
class ViewController: UIViewController {
    
    private let locationManager = CLLocationManager()
    private let operationQueue = OperationQueue()

    override func viewDidLoad() {
		super.viewDidLoad()
	
		operationQueue.isSuspended = true
		runLocationBlock {
			if let location = self.locationManager.location {
			}
		}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ol&gt;
  &lt;li&gt;We must create a Location Manager first and foremost.&lt;/li&gt;
  &lt;li&gt;We created an OperationQueue even though we only have one operation to execute, which is &lt;code class=&quot;highlighter-rouge&quot;&gt;runLocationBlock&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Suspend the operation or pause first to check if we are allowed to request location data.&lt;/li&gt;
  &lt;li&gt;Whatever is in the &lt;code class=&quot;highlighter-rouge&quot;&gt;runLocationBlock&lt;/code&gt; will only run if &lt;code class=&quot;highlighter-rouge&quot;&gt;operationQueue&lt;/code&gt; is unsuspended but rest assured this function is already running.&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;extension ViewController: CLLocationManagerDelegate {
    private func configureLocationManager() {
        locationManager.desiredAccuracy = kCLLocationAccuracyBest
        locationManager.delegate = self
				
        // requestLocation will take 10 seconds to run, but only requests location just once
        locationManager.requestLocation()
				
        // startUpdatingLocation will fire up immediately
        // locationManager.startUpdatingLocation()
    }
		
    func locationManager(_ manager: CLLocationManager, didFailWithError error: Error) {
        print(&quot;error&quot;)
    }
    
    func locationManager(_ manager: CLLocationManager, didChangeAuthorization status: CLAuthorizationStatus) {
        
        //If we're authorized to use location services, run all operations in the queue
        // otherwise if we were denied access or restricted or location is not determined, cancel the operations
				
        if(status == .authorizedWhenInUse || status == .authorizedAlways) {
            self.operationQueue.isSuspended = false
        }else if(status == .denied || status == .restricted || status == .notDetermined){
            self.operationQueue.cancelAllOperations()
        }
    }
    
    func runLocationBlock(callback: @escaping () -&amp;gt; ()) {
        
        //Get the current authorization status
        let authState = CLLocationManager.authorizationStatus()
        
        //If we have permissions, start executing the commands immediately
        // otherwise request permission
        DispatchQueue.main.async {
            if(authState == .authorizedAlways || authState == .authorizedWhenInUse) {
                self.configureLocationManager()
                self.operationQueue.isSuspended = false
            }else{
                //Request permission
                self.locationManager.requestWhenInUseAuthorization()
            }
        }
        
        //Create a closure with the callback function so we can add it to the operationQueue
        let block = {
            DispatchQueue.main.async {
                callback()
            }
        }
        
        //Add block to the queue to be executed asynchronously
        self.operationQueue.addOperation(block)
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;runlocationblock&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;RunLocationBlock&lt;/code&gt;&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;We know for one thing that &lt;code class=&quot;highlighter-rouge&quot;&gt;runLocationBlock&lt;/code&gt;’s operations is/are set suspended in the &lt;code class=&quot;highlighter-rouge&quot;&gt;ViewController&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;We want to know the authorization status first.&lt;/li&gt;
  &lt;li&gt;If we are authorized, then let’s configure the &lt;code class=&quot;highlighter-rouge&quot;&gt;locationManager&lt;/code&gt; second then unsuspend, next, to allow our operationQueue to run all the blocks of operations it cointains.&lt;/li&gt;
  &lt;li&gt;If we are not authorized, a request will be shown to the user using the app.&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;block&lt;/code&gt; will contain the callback, which is whatever you put inside the &lt;code class=&quot;highlighter-rouge&quot;&gt;runLocationBlock { }&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;didchangeauthorization&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DidChangeAuthorization&lt;/code&gt;&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;This is just like what we’ve seen inside &lt;code class=&quot;highlighter-rouge&quot;&gt;runLocationBlock&lt;/code&gt;, but we don’t request for authorization again. Instead, when denied/restricted or if the location was not determined, then the &lt;code class=&quot;highlighter-rouge&quot;&gt;operationQueue&lt;/code&gt; will not run operations that were added to it.&lt;/li&gt;
  &lt;li&gt;This is only triggered after &lt;code class=&quot;highlighter-rouge&quot;&gt;self.locationManager.requestWhenInUseAuthorization()&lt;/code&gt; that you have seen inside the &lt;code class=&quot;highlighter-rouge&quot;&gt;RunLocationBlock&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;configurelocationmanager&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ConfigureLocationManager&lt;/code&gt;&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;locationManager.delegate = self&lt;/code&gt; this is the most essential part of setting up our locationManager. This allows our &lt;code class=&quot;highlighter-rouge&quot;&gt;ViewController&lt;/code&gt; to access protocol methods from &lt;code class=&quot;highlighter-rouge&quot;&gt;CLLocationManagerDelegate&lt;/code&gt; like &lt;code class=&quot;highlighter-rouge&quot;&gt;didChangeAuthorization&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;If the desiredAccuracy is not set, its default is &lt;code class=&quot;highlighter-rouge&quot;&gt;kCLLocationAccuracyBest&lt;/code&gt; for iOS/Mac OS. For watchOS, &lt;code class=&quot;highlighter-rouge&quot;&gt;kCLLocationAccuracyHundredMeters&lt;/code&gt;. This is how you want the location data to be as accurate. It is important to note that higher accuracy will require longer time to retrieve location data.
    &lt;ol&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;kCLLocationAccuracyKilometer &lt;/code&gt; - within a kilometer&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;kCLLocationAccuracyThreeKilometers&lt;/code&gt; -within 3 kilometers. The higher, the better conservation of energy.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;kCLLocationAccuracyBestForNavigation&lt;/code&gt;- usually used in navigation apps. Least energy efficient.
        &lt;ol&gt;
          &lt;li&gt;locationManager.activityType = .automotiveNavigation&lt;/li&gt;
          &lt;li&gt;locationManager.distanceFilter = 0&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;kCLLocationAccuracyNearestTenMeters&lt;/code&gt; - less energy efficient.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;If you use &lt;code class=&quot;highlighter-rouge&quot;&gt;requestLocation()&lt;/code&gt;, it will only gather location data once. However, this takes 10 seconds as opposed to &lt;code class=&quot;highlighter-rouge&quot;&gt;startUpdatingLocation()&lt;/code&gt;, which fires immediately.&lt;/li&gt;
&lt;/ol&gt;</content><author><name>jules</name></author><category term="" /><category term="location" /><category term="manager" /><category term="swift" /><category term="data" /><category term="corelocation" /><category term="operation" /><category term="queue" /><summary type="html">This is the most elegant solution I found on how to retrieve location with CoreLocation.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://i.stack.imgur.com/hDiMB.png" /></entry><entry><title type="html">Grand Central Dispatch (GCD): Where To Start Learning</title><link href="http://iosjunkie.com/blog/grand-central-dispatch-gcd-where-to-start-learning/" rel="alternate" type="text/html" title="Grand Central Dispatch (GCD): Where To Start Learning" /><published>2019-10-07T00:00:00+08:00</published><updated>2019-10-07T00:00:00+08:00</updated><id>http://iosjunkie.com/blog/grand-central-dispatch-gcd-where-to-start-learning</id><content type="html" xml:base="http://iosjunkie.com/blog/grand-central-dispatch-gcd-where-to-start-learning/">&lt;p&gt;I’ve been hearing and reading GCD for quite a while now. Grand Central Dispatch. Whoa! Big word! It’s really just a concept of using threads. It’s not a railway system, no.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;GCD is an API provided by apple to allow you to manage concurrent operations in a smooth way, in order to avoid freezing of your application and keep it always responsive for users. - Jaafar Barek&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://hackernoon.com/swift-multi-threading-using-gcd-for-beginners-2581b7aa21cb&quot;&gt;Swift Multi-Threading using GCD For Beginners&lt;/a&gt;. This is just a brief article with great visual aids to simply start off learning DispatchQueue.&lt;/p&gt;

&lt;p&gt;When you’re done with that, hold your breath and dive in two of these lakes. &lt;a href=&quot;https://dev.to/leogdion/asynchronous-multi-threaded-parallel-world-of-swift-4gjh&quot;&gt;Asynchronous Multi-Threaded Parallel World of Swift&lt;/a&gt; and &lt;a href=&quot;https://theswiftdev.com/2018/07/10/ultimate-grand-central-dispatch-tutorial-in-swift/&quot;&gt;Ultimate Grand Central Dispatch tutorial in Swift&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The former will first walk you through processing concepts and many visuals on how to use DispatchQueue, Semaphores, and SwiftUI’s combine in relation to asynchronous operations.&lt;/p&gt;

&lt;p&gt;The latter is almost the same but with less visuals and no &lt;code class=&quot;highlighter-rouge&quot;&gt;combine&lt;/code&gt;. DispatchWorkItem and deadlocks is discussed which isn’t found in the former.&lt;/p&gt;

&lt;p&gt;Both are really valuable resources for learning &lt;code class=&quot;highlighter-rouge&quot;&gt;GCD&lt;/code&gt;. It takes quite a while to grasp this simple concept but with broad applications, so I recommend reading on both to consolidate that chunk of knowledge. It is really intimidating to learn, since most of the time, programmers only usually use &lt;code class=&quot;highlighter-rouge&quot;&gt;background&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;main&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I bet these resources are good for interviews too.&lt;/p&gt;</content><author><name>jules</name></author><category term="" /><category term="grand" /><category term="central" /><category term="dispatch" /><category term="dispatchqueue" /><category term="barrier" /><category term="ultimate" /><category term="guide" /><category term="asynchronous" /><category term="operation" /><category term="swiftui" /><category term="combine" /><category term="framework" /><summary type="html">I’ve been hearing and reading GCD for quite a while now. Grand Central Dispatch. Whoa! Big word! It’s really just a concept of using threads. It’s not a railway system, no. GCD is an API provided by apple to allow you to manage concurrent operations in a smooth way, in order to avoid freezing of your application and keep it always responsive for users. - Jaafar Barek</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://res.cloudinary.com/practicaldev/image/fetch/s--orob56V4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://learningswift.brightdigit.com/wp-content/uploads/sites/2/2019/09/ParallelConcurrency.001-1024x768.jpeg" /></entry><entry><title type="html">Where Is Assistant Editor Mode In Xcode 11</title><link href="http://iosjunkie.com/blog/assistant-editor-mode-in-xcode-11/" rel="alternate" type="text/html" title="Where Is Assistant Editor Mode In Xcode 11" /><published>2019-10-07T00:00:00+08:00</published><updated>2019-10-07T00:00:00+08:00</updated><id>http://iosjunkie.com/blog/assistant-editor-mode-in-xcode-11</id><content type="html" xml:base="http://iosjunkie.com/blog/assistant-editor-mode-in-xcode-11/">&lt;p&gt;Welcome to the world of Xcode 11 where it’s now confusing to find the assistant editor. Well, there it is. It is not in the same place anymore. On the top right corner of the storyboard, there’s this &lt;code class=&quot;highlighter-rouge&quot;&gt;Adjust Editor Options&lt;/code&gt; icon. Just click on that and choose &lt;code class=&quot;highlighter-rouge&quot;&gt;Assistant&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I’m so used to the old icon that it used to be, but now it’s just a text only button that is not that easy to navigate to. But why? Are they really pushing developers to use SwiftUI and depend on the canvas instead of our dearest storyboard?&lt;/p&gt;

&lt;p&gt;UPDATE: I thought I was the only one who put up an instruction for this. Well, here’s a better visual on how to really find it.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/rTn02yqIj6w&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;</content><author><name>jules</name></author><category term="" /><category term="assistant" /><category term="editor" /><category term="view" /><category term="xcode" /><category term="where" /><summary type="html">Welcome to the world of Xcode 11 where it’s now confusing to find the assistant editor. Well, there it is. It is not in the same place anymore. On the top right corner of the storyboard, there’s this Adjust Editor Options icon. Just click on that and choose Assistant.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://iosjunkie.com/blog/assets/images/Screen%20Shot%202019-10-07%20at%203.11.58%20AM.png" /></entry></feed>