<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://localhost:4000/blog/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/blog/" rel="alternate" type="text/html" /><updated>2019-10-02T08:07:03+08:00</updated><id>http://localhost:4000/blog/feed.xml</id><title type="html">iOS Junkie</title><subtitle>Demystifying complex instructions, tutorials, and a little bit more on the iOS Swift stuff.</subtitle><entry><title type="html">Top 5 Github Pages Portfolio Templates</title><link href="http://localhost:4000/blog/top-5-github-pages-portfolio-templates/" rel="alternate" type="text/html" title="Top 5 Github Pages Portfolio Templates" /><published>2019-10-02T00:00:00+08:00</published><updated>2019-10-02T00:00:00+08:00</updated><id>http://localhost:4000/blog/top-5-github-pages-portfolio-templates</id><content type="html" xml:base="http://localhost:4000/blog/top-5-github-pages-portfolio-templates/">&lt;p&gt;As a developer, I’d like to host my portfolio somewhere free and somewhere familiar to developers. Oh wait! I know where that is. These templates are forkable and for each one of these, there’s a link to their repositories. You won’t find much if you look into Jekyll Portfolio Themes. Been there, done that. Nada! These templates are going to come up in google search results, but it’s better to see them in all in one place.&lt;/p&gt;

&lt;h3 id=&quot;1-dev-portfolio&quot;&gt;1. &lt;a href=&quot;https://github.com/RyanFitzgerald/devblog&quot;&gt;Dev Portfolio&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/Screen%20Shot%202019-10-02%20at%207.24.31%20AM.png&quot; alt=&quot;dev portfolio&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If I may be so bold to place this as number 1. I’m currently using this template as my portfolio. This repo contains an easy-to-customize personal dev portfolio template that was created with Sass and JavaScript. It is lightweight and fully responsive, as well as comes with the Bootstrap grid system and loaded with Font Awesome. The site is static and comes production ready if you just want to add your information and go. Alternatively, you can edit styles, colours, and scripts fairly easily. The site was built as modular as possible to make it easy to shift around styles and content.&lt;/p&gt;

&lt;h3 id=&quot;demo&quot;&gt;&lt;a href=&quot;https://ryanfitzgerald.github.io/devportfolio/&quot;&gt;DEMO&lt;/a&gt;&lt;/h3&gt;

&lt;h3 id=&quot;2-developer&quot;&gt;2. &lt;a href=&quot;https://github.com/xriley/developer-theme&quot;&gt;Developer&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/free-bootstrap-portfolio-theme-for-web-developers.jpg&quot; alt=&quot;developer&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Developer is a free Bootstrap theme designed to help developers promote their work. It can be used as a professional portal to your other online portfolios or websites (eg. Linkedin, CoderWall, Blog, GitHub etc) in a modular fashion. The theme comes with all of the source SCSS files included so the styling/color can easily be customised to your taste.&lt;/p&gt;

&lt;h3 id=&quot;demo-1&quot;&gt;&lt;a href=&quot;https://themes.3rdwavemedia.com/demo/developer/&quot;&gt;DEMO&lt;/a&gt;&lt;/h3&gt;

&lt;h3 id=&quot;3-single-page-developer-portfolio-template-&quot;&gt;3. &lt;a href=&quot;https://github.com/akkefa/developer-portfolio&quot;&gt;Single Page Developer Portfolio Template &lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/Screen%20Shot%202019-10-02%20at%207.38.55%20AM.png&quot; alt=&quot;single page&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Complete Resume based portfolio for developers. Developers don’t talk much. Their code does all the talking.&lt;/p&gt;

&lt;h3 id=&quot;demo-2&quot;&gt;&lt;a href=&quot;https://akkefa.com/&quot;&gt;DEMO&lt;/a&gt;&lt;/h3&gt;

&lt;h3 id=&quot;4-plug-and-play-github-portfolio&quot;&gt;4. &lt;a href=&quot;https://github.com/gitshowcase/gitshowcase&quot;&gt;Plug-and-play GitHub portfolio&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/responsive-c0618d790ea0358a403e23b5da7e6d451828e88b921890248547188ec829a524.jpg&quot; alt=&quot;gitshowcase&quot; /&gt;&lt;/p&gt;

&lt;p&gt;GitShowcase is an Open Source project designed to help developers show off their talents.
If you like the project, you can help by sharing it on social media and giving us a Star on GitHub.&lt;/p&gt;

&lt;h3 id=&quot;demo-3&quot;&gt;&lt;a href=&quot;http://pedrosm.com/&quot;&gt;DEMO&lt;/a&gt;&lt;/h3&gt;

&lt;h3 id=&quot;5-pillar&quot;&gt;5. &lt;a href=&quot;https://github.com/xriley/pillar-theme&quot;&gt;Pillar&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/blog/assets/images/Bootstrap-Resume-CV-Template-Pillar-Pormo.jpg&quot; alt=&quot;pillar&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is not a portfolio, but I couldn’t find another interesting portfolio repository anymore. I just thought this might be noteworthy too. Pillar is a free Bootstrap resume/CV template tailored specifically for developers. The template comes with 6 color schemes and are quick and easy to change via the source SASS files. Built on Bootstrap 4, this template is included in our premium Bootstrap 4 theme Instance. If you are a developer and need to build your online presence, you need to check out the Instance theme as it has all the winning ingredients to get you hired by your potential employers or clients.&lt;/p&gt;

&lt;h3 id=&quot;demo-4&quot;&gt;&lt;a href=&quot;https://themes.3rdwavemedia.com/demo/pillar/&quot;&gt;DEMO&lt;/a&gt;&lt;/h3&gt;</content><author><name>jules</name></author><category term="" /><category term="portfolio" /><category term="github" /><category term="pages" /><category term="jekyll" /><category term="developer" /><summary type="html">As a developer, I’d like to host my portfolio somewhere free and somewhere familiar to developers. Oh wait! I know where that is. These templates are forkable and for each one of these, there’s a link to their repositories. You won’t find much if you look into Jekyll Portfolio Themes. Been there, done that. Nada! These templates are going to come up in google search results, but it’s better to see them in all in one place.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/blog/assets/images/responsive-c0618d790ea0358a403e23b5da7e6d451828e88b921890248547188ec829a524.jpg" /></entry><entry><title type="html">@State to @ObjectBinding Modifier</title><link href="http://localhost:4000/blog/state-to-objectbinding-modifier/" rel="alternate" type="text/html" title="@State to @ObjectBinding Modifier" /><published>2019-10-02T00:00:00+08:00</published><updated>2019-10-02T00:00:00+08:00</updated><id>http://localhost:4000/blog/state-to-objectbinding-modifier</id><content type="html" xml:base="http://localhost:4000/blog/state-to-objectbinding-modifier/">&lt;p&gt;Notice how Scott changed from &lt;code class=&quot;highlighter-rouge&quot;&gt;@State&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;@ObjectBinding&lt;/code&gt;. He started discussing BindableObject at 5:17. That’s because you can only use &lt;code class=&quot;highlighter-rouge&quot;&gt;@State&lt;/code&gt; with local properties in the struct view. Let’s see his code one more time.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/7sxdhunvSCg&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import Combine

class ListDataSource: BindableObject {
	var willChange = PassthroughSubject&amp;lt;Void, Never&amp;gt; ()
	
	var rowModels = [CustomRowModel] () {
		willSet {
			willChange.send()
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this tutorial, that’s all the code we need. Just kidding. There’s one more:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;struct ContentView: View {
	@ObjectBinding var datasource = ListDataSource()
	
	// to access the rowModels array
	datasource.rowModels
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Notice here that he used @ObjectBinding instead of @State. If you want a hold of the state of a class, then you must use @ObjectBinding instead and that class should inherit from &lt;code class=&quot;highlighter-rouge&quot;&gt;BindableObject&lt;/code&gt; protocol, which requires that you have a &lt;code class=&quot;highlighter-rouge&quot;&gt;PassthroughSubject&lt;/code&gt;. In order to use &lt;code class=&quot;highlighter-rouge&quot;&gt;PassthroughSubject&lt;/code&gt;, import &lt;code class=&quot;highlighter-rouge&quot;&gt;Combine&lt;/code&gt; first. You can substitude willChange to didChange. Heck, it’s just a variable name. But if you do, also change the &lt;code class=&quot;highlighter-rouge&quot;&gt;willSet&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;didSet&lt;/code&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;willChange.send()&lt;/code&gt; will notify the subscribed view, which in this case is &lt;code class=&quot;highlighter-rouge&quot;&gt;ContentView&lt;/code&gt;, of any changes done to &lt;code class=&quot;highlighter-rouge&quot;&gt;rowModels&lt;/code&gt; array.&lt;/p&gt;</content><author><name>jules</name></author><category term="" /><category term="state" /><category term="bindable" /><category term="object" /><category term="@objectbinding" /><category term="swiftui" /><summary type="html">Notice how Scott changed from @State to @ObjectBinding. He started discussing BindableObject at 5:17. That’s because you can only use @State with local properties in the struct view. Let’s see his code one more time.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/blog/assets/images/maxresdefault.jpg" /></entry><entry><title type="html">Why I Prefer Cloud Firestore Than Realtime Database</title><link href="http://localhost:4000/blog/why-i-prefer-cloud-firestore-than-realtime-database/" rel="alternate" type="text/html" title="Why I Prefer Cloud Firestore Than Realtime Database" /><published>2019-10-02T00:00:00+08:00</published><updated>2019-10-02T00:00:00+08:00</updated><id>http://localhost:4000/blog/why-i-prefer-cloud-firestore-than-realtime-database</id><content type="html" xml:base="http://localhost:4000/blog/why-i-prefer-cloud-firestore-than-realtime-database/">&lt;p&gt;This is just a brief insight on why I prefer using Firestore. At first, I was hesitant to dive into Firestore, because I thought there wasn’t really much difference. I saw videos and tutorials of Firestore and it baffled me even more. So, I stayed with Firebase Realtime Database for a little long while, until I started with another Xcode project. I delved into why Firestore might be a better fit.&lt;/p&gt;

&lt;p&gt;Initially, all I understood was Firebase RD will charge you depending on bandwidth usage, while Firestore will charge on writes and reads. I was intimidated by that. The key is to make the writes and reads as minimal as possible to lessen the cost.&lt;/p&gt;

&lt;p&gt;In my previous personal project, I used Firebase RD. I have a web app for it and iOS app. Both coded by me. I was wondering why it always took so long to read from Firebase. Then I realized, I created a tree structure and whenever I tried to access the root’s value, it grabs all the branches along with it making my succeeding read queries redundant. It loads a very heavy amount of information as my database grew. That’s how I came to a decision to start using Firestore.&lt;/p&gt;

&lt;p&gt;Collections. Documents. You must’ve read those before. It’s confusing, I know. That’s how Firestore works. Think of it this way. &lt;code class=&quot;highlighter-rouge&quot;&gt;Collections&lt;/code&gt; are Folders, and &lt;code class=&quot;highlighter-rouge&quot;&gt;Documents&lt;/code&gt; are files that can contain a pointer to a sub Collection. Documents contain the attributes and its values. Collections only contain Documents.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Customer (&lt;code class=&quot;highlighter-rouge&quot;&gt;Collection&lt;/code&gt;)
    &lt;ul&gt;
      &lt;li&gt;Jane (&lt;code class=&quot;highlighter-rouge&quot;&gt;Document&lt;/code&gt;)
        &lt;ul&gt;
          &lt;li&gt;address: “In the woods”&lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;age: 16&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;Orders (sub &lt;code class=&quot;highlighter-rouge&quot;&gt;Collection&lt;/code&gt;)
            &lt;ul&gt;
              &lt;li&gt;2019-1-19 (&lt;code class=&quot;highlighter-rouge&quot;&gt;Document&lt;/code&gt;)
                &lt;ul&gt;
                  &lt;li&gt;item: “Pizza”&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I hope you see the pattern now. &lt;code class=&quot;highlighter-rouge&quot;&gt;Collections&lt;/code&gt; always contain &lt;code class=&quot;highlighter-rouge&quot;&gt;Documents&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;Documents&lt;/code&gt; can contain &lt;code class=&quot;highlighter-rouge&quot;&gt;Collections&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;What makes it better than Firebase DB?&lt;/p&gt;

&lt;p&gt;Well, whenever you reference to collection(“&lt;code class=&quot;highlighter-rouge&quot;&gt;Customer&lt;/code&gt;”).document(“&lt;code class=&quot;highlighter-rouge&quot;&gt;Jane&lt;/code&gt;”), you won’t be including &lt;code class=&quot;highlighter-rouge&quot;&gt;Orders&lt;/code&gt; in your read. Thereby, reducing the load. I guess you can say it’s faster this way. You only get to access the &lt;code class=&quot;highlighter-rouge&quot;&gt;address&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;age&lt;/code&gt; of Jane. If you want to get her orders as well, then reference to collection(“&lt;code class=&quot;highlighter-rouge&quot;&gt;Customer&lt;/code&gt;”).document(“&lt;code class=&quot;highlighter-rouge&quot;&gt;Jane&lt;/code&gt;”).collection(“&lt;code class=&quot;highlighter-rouge&quot;&gt;Orders&lt;/code&gt;”). You can loop through all her orders thereafter.&lt;/p&gt;

&lt;p&gt;No matter how deep your tree becomes with Firestore, you won’t be able to directly access its sub collections and that cuts down a lot of loading time and heaviness.&lt;/p&gt;</content><author><name>jules</name></author><category term="" /><category term="firestore" /><category term="firebase" /><category term="database" /><category term="collections" /><category term="documents" /><category term="Xcode" /><category term="swift" /><summary type="html">This is just a brief insight on why I prefer using Firestore. At first, I was hesitant to dive into Firestore, because I thought there wasn’t really much difference. I saw videos and tutorials of Firestore and it baffled me even more. So, I stayed with Firebase Realtime Database for a little long while, until I started with another Xcode project. I delved into why Firestore might be a better fit.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/blog/assets/images/update.jpg" /></entry><entry><title type="html">Using Cloud Functions To Create Remote Notifications With Firebase And Swift5</title><link href="http://localhost:4000/blog/using-cloud-functions-to-create-remote-notifications-with-firebase-and-swift5/" rel="alternate" type="text/html" title="Using Cloud Functions To Create Remote Notifications With Firebase And Swift5" /><published>2019-10-01T00:00:00+08:00</published><updated>2019-10-01T00:00:00+08:00</updated><id>http://localhost:4000/blog/using-cloud-functions-to-create-remote-notifications-with-firebase-and-swift5</id><content type="html" xml:base="http://localhost:4000/blog/using-cloud-functions-to-create-remote-notifications-with-firebase-and-swift5/">&lt;p&gt;This is tested using Firebase Realtime Database, not with Firestore. Before all of these, I assume you have already been using the realtime database. More importantly, you already have the GoogleService-Info.plist in your Xcode project. It is important because it contains your bundle identifier. Without Firebase knowing your bundle identifier, you can’t proceed to enabling the Cloud messaging. We’re not doing what’s in the picture. It’s just a formality.&lt;/p&gt;

&lt;p&gt;Install this pod libraries first in addition to your preinstalled libraries with Firebase.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pod 'Firebase/Analytics'
pod 'Firebase/Core'
pod 'Firebase/Messaging'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In your Xcode project’s signing and capabilities, enable or add capabilities:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Background Modes -&amp;gt; Remote Notifications&lt;/li&gt;
  &lt;li&gt;Push Notifications&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let’s create a certificate signing request by going to Keychain Access.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;On the toolbar, click &lt;code class=&quot;highlighter-rouge&quot;&gt;Keychain Access&lt;/code&gt; beside &lt;code class=&quot;highlighter-rouge&quot;&gt;File&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;In this dropdown menu, Certificate Assistant -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Request a Certificate From a Certificate Authority&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Enter your credentials into the text fields and choose &lt;code class=&quot;highlighter-rouge&quot;&gt;Save to disk&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Once that is done, you will have a .cert file on your desktop. Now let’s convert that to .p12. Still, using the Keychain Access.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;File -&amp;gt; Import Items -&amp;gt; Select your .cert file&lt;/li&gt;
  &lt;li&gt;Drag that file to &lt;code class=&quot;highlighter-rouge&quot;&gt;System&lt;/code&gt;, assuming you are in &lt;code class=&quot;highlighter-rouge&quot;&gt;login&lt;/code&gt; in the &lt;code class=&quot;highlighter-rouge&quot;&gt;Keychains&lt;/code&gt; sidebar.&lt;/li&gt;
  &lt;li&gt;Drag it back from &lt;code class=&quot;highlighter-rouge&quot;&gt;System&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;login&lt;/code&gt;. You now have a duplicate, but you’ll only need the most recent.&lt;/li&gt;
  &lt;li&gt;Select &lt;code class=&quot;highlighter-rouge&quot;&gt;My Certificates&lt;/code&gt; in the Category.&lt;/li&gt;
  &lt;li&gt;Select the most recent certificate pertaining to your project, and right-click.&lt;/li&gt;
  &lt;li&gt;Click Export “Apple Development IOS Push Services: your.project…”&lt;/li&gt;
  &lt;li&gt;Make sure to export it in .p12 format.&lt;/li&gt;
  &lt;li&gt;It will then ask you to create a password to protect this certficate. Give it one and click &lt;code class=&quot;highlighter-rouge&quot;&gt;ok&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Then go to Apple Developer. For this, you need a paid developer account which costs $99.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Open &lt;code class=&quot;highlighter-rouge&quot;&gt;Certificates, Identifiers &amp;amp; Profiles&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Navigate to &lt;code class=&quot;highlighter-rouge&quot;&gt;Identifiers&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Click on the current project you are working on.&lt;/li&gt;
  &lt;li&gt;Beside the Push Notifications, click &lt;code class=&quot;highlighter-rouge&quot;&gt;Configure&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Depending on which environment you are, click &lt;code class=&quot;highlighter-rouge&quot;&gt;Create Certificate&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Choose a file&lt;/code&gt; -&amp;gt; Upload the .p12 cert you just created, then enter the password for this certificate.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In order to test this while under development, you need a Provisioning Profile for development to authorize your devices to run an app that is not yet published on the App Store.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Open &lt;code class=&quot;highlighter-rouge&quot;&gt;Certificates, Identifiers &amp;amp; Profiles&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Select &lt;code class=&quot;highlighter-rouge&quot;&gt;Profiles&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Generate a Profile&lt;/li&gt;
  &lt;li&gt;Select iOS App Development and continue&lt;/li&gt;
  &lt;li&gt;Select your App ID and continue&lt;/li&gt;
  &lt;li&gt;Select the iOS Development certificate of the App ID you have chosen in the previous step, then click Continue.&lt;/li&gt;
  &lt;li&gt;Select the iOS devices that you want to include in the Provisioning Profile, then click Continue. Make sure to select all the devices you want to use for your testing.&lt;/li&gt;
  &lt;li&gt;Name the provisioning profile whatever you want and generate.&lt;/li&gt;
  &lt;li&gt;Download the provisioning profile and open it to install.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To enable the cloud messaging feature, go to https://console.cloud.google.com/ -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;APIs and Services&lt;/code&gt; -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;+ ENABLE APIS AND SERVICES&lt;/code&gt;-&amp;gt; Search for &lt;code class=&quot;highlighter-rouge&quot;&gt;Firebase Cloud Messaging API&lt;/code&gt; -&amp;gt; click Enable.&lt;/p&gt;

&lt;p&gt;In your Firebase console, navigate to &lt;code class=&quot;highlighter-rouge&quot;&gt;Project Settings&lt;/code&gt; -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Cloud Messaging&lt;/code&gt; -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;iOS app configuration&lt;/code&gt; -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;APNs Certificates&lt;/code&gt; -&amp;gt; Upload the &lt;code class=&quot;highlighter-rouge&quot;&gt;.p12 file&lt;/code&gt; here.&lt;/p&gt;

&lt;p&gt;That’s all you need for now to allow &lt;code class=&quot;highlighter-rouge&quot;&gt;Cloud Messaging&lt;/code&gt; on your iOS device. It’s like a term for Remote Push Notifications. I was baffled at that at first.&lt;/p&gt;

&lt;p&gt;Now this is the part where we detect changes in the firebase database. If you haven’t installed the &lt;a href=&quot;https://firebase.google.com/docs/cli&quot;&gt;firebase CLI&lt;/a&gt; yet, please do so.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Create a directory where you want to put the cloud functions code. In my case, I created &lt;code class=&quot;highlighter-rouge&quot;&gt;triggers&lt;/code&gt; directory under my Xcode project directory. &lt;code class=&quot;highlighter-rouge&quot;&gt;Laundry City/triggers&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;‘cd triggers`&lt;/li&gt;
  &lt;li&gt;In the terminal, type &lt;code class=&quot;highlighter-rouge&quot;&gt;firebase init functions&lt;/code&gt;, but make sure you’re logged in with firebase cli.&lt;/li&gt;
  &lt;li&gt;Choose javascript and type &lt;code class=&quot;highlighter-rouge&quot;&gt;y&lt;/code&gt; as in yes to any remaining questions from the cli.&lt;/li&gt;
  &lt;li&gt;Open index.js and create your function such as below:&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// index.js
const functions = require('firebase-functions');
const admin = require('firebase-admin');

admin.initializeApp();

exports.sendNewChangesNotification = functions.database.ref('houses/{house}/items/{item}/').onWrite((change, context) =&amp;gt; {

    var topic = &quot;Serenity&quot;;
		
    // A message that contains the notification that devices will receive	
    var message = {
      notification: {
        title: 'New Quantity',
        body: change.after.val().product + ' now has ' + change.after.val().tentative + ' new items.'
      }
    };

    // Using Cloud Messaging to create notification
    return admin.messaging().sendToTopic(topic, message).then(function (response) {
        console.log('Successfully sent message:', response);
        return null;
    }).catch(function (error) {
        throw new Error(&quot;Error sending message:&quot;, error);
    });
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;First thing to note here is, you won’t start your &lt;code class=&quot;highlighter-rouge&quot;&gt;ref&lt;/code&gt; with the Project ID.. Instead, the branch below it. The ones in the brackets are &lt;code class=&quot;highlighter-rouge&quot;&gt;ids&lt;/code&gt;, which varies. This will detect any write or changes happening in that reference. It will catch the changes in the &lt;code class=&quot;highlighter-rouge&quot;&gt;change&lt;/code&gt; parameter. Thereby, allowing access to the new tentative value in &lt;code class=&quot;highlighter-rouge&quot;&gt;change.after.val().tentative&lt;/code&gt; from the reference &lt;code class=&quot;highlighter-rouge&quot;&gt;houses/1/items/2/tentative&lt;/code&gt;. 1 and 2 here are just examples of IDs. &lt;code class=&quot;highlighter-rouge&quot;&gt;sendNewChangesNotification&lt;/code&gt; is just a variable. You can change it however you like.&lt;/p&gt;

&lt;p&gt;When everything is in place, go back to terminal and deploy it with &lt;code class=&quot;highlighter-rouge&quot;&gt;firebase deploy&lt;/code&gt;. Now, you have a listener or a trigger whenever your items have been changed or added.&lt;/p&gt;

&lt;p&gt;Your AppDelegate.swift should look like &lt;a href=&quot;https://github.com/firebase/quickstart-ios/blob/master/messaging/MessagingExampleSwift/AppDelegate.swift&quot;&gt;this&lt;/a&gt;. This firebase sample is as instructed in the &lt;a href=&quot;https://firebase.google.com/docs/cloud-messaging/ios/client&quot;&gt;documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To send a notification, &lt;code class=&quot;highlighter-rouge&quot;&gt;admin.messaging.send&lt;/code&gt; will do the trick. But you have to provide a &lt;code class=&quot;highlighter-rouge&quot;&gt;token&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;topic&lt;/code&gt;, or a &lt;code class=&quot;highlighter-rouge&quot;&gt;condition&lt;/code&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;Token&lt;/code&gt; is generated by the AppDelegate and is uploaded to Firebase automatically. If you specify a specific token, then only the device with that token will receive the notification. &lt;code class=&quot;highlighter-rouge&quot;&gt;Topic&lt;/code&gt; is what its name suggests. To subscribe to a topic, add this to wherever you need to put in your Xcode project:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Messaging.messaging().subscribe(toTopic: &quot;Serenity&quot;) { error in
          print(&quot;Subscribed to weather topic&quot;)
        }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Condition&lt;/code&gt; can be something like you want to send this to notification to subscribers of more than one topic. For example: &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;'Serenity' in topics || 'Manor' in topics&quot;&lt;/code&gt;. Further &lt;a href=&quot;https://firebase.google.com/docs/cloud-messaging/ios/topic-messaging&quot;&gt;documentation&lt;/a&gt; about this.&lt;/p&gt;</content><author><name>jules</name></author><category term="remote" /><category term="notification" /><category term="swift" /><category term="cloud" /><category term="function" /><category term="firebase" /><category term="messaging" /><category term="featured" /><category term="APNs" /><summary type="html">This is tested using Firebase Realtime Database, not with Firestore. Before all of these, I assume you have already been using the realtime database. More importantly, you already have the GoogleService-Info.plist in your Xcode project. It is important because it contains your bundle identifier. Without Firebase knowing your bundle identifier, you can’t proceed to enabling the Cloud messaging. We’re not doing what’s in the picture. It’s just a formality.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/blog/assets/images/Notifications_Top_2x.png" /></entry><entry><title type="html">Sublime 3 In BUNDLER_EDITOR</title><link href="http://localhost:4000/blog/bundler-editorsublime/" rel="alternate" type="text/html" title="Sublime 3 In BUNDLER_EDITOR" /><published>2019-09-30T00:00:00+08:00</published><updated>2019-09-30T00:00:00+08:00</updated><id>http://localhost:4000/blog/bundler-editorsublime</id><content type="html" xml:base="http://localhost:4000/blog/bundler-editorsublime/">&lt;p&gt;First, let’s create a symlink:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ln -s &quot;/Applications/Sublime Text.app/Contents/SharedSupport/bin/subl&quot; /usr/local/bin/sublime
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Type this on your terminal.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;open -e ~/.bash_profile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Add the following lines and save it.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;export EDITOR=&quot;sublime -w&quot;
export BUNDLER_EDITOR=&quot;sublime&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>jules</name></author><category term="" /><category term="sublime" /><category term="bundle_editor" /><category term="symlink" /><category term="editor" /><category term="bash" /><category term="profile" /><summary type="html">First, let’s create a symlink:</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/blog/assets/images/SublimeText3.jpg" /></entry><entry><title type="html">Use Jekyll Manager Instead of Jekyll Admin</title><link href="http://localhost:4000/blog/use-jekyll-manager-instead-of-jekyll-admin/" rel="alternate" type="text/html" title="Use Jekyll Manager Instead of Jekyll Admin" /><published>2019-09-30T00:00:00+08:00</published><updated>2019-09-30T00:00:00+08:00</updated><id>http://localhost:4000/blog/use-jekyll-manager-instead-of-jekyll-admin</id><content type="html" xml:base="http://localhost:4000/blog/use-jekyll-manager-instead-of-jekyll-admin/">&lt;p&gt;I was hesitant in making a change at first, since I just started blogging using Jekyll. Looking at how updates are freshly being added to the jekyll-admin library made me think it’s more intuitive. I am wrong. However, the upgrades done in jekyll-manager isn’t really all that drastic. They still haven’t got a fix for when selecting the image metadata. It is still http://localhost:4000/blog/assets/images/…jpg when I select an image from the static files. I wonder why they haven’t dealt this yet. This should have been the turning point of their fork. Instead, a few UI changes have been made. Some, impressive.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/Screen%20Shot%202019-09-29%20at%2011.32.59%20PM.png&quot; alt=&quot;assets&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is my favorite part about jekyll-manager and to be honest, the only thing I care about, really. Directories can be navigated to now, therefore making uploading a hell of a lot easier, now that I’m confident to use this dashboard for uploading images. I no longer have to drag and drop using Finder for this.&lt;/p&gt;

&lt;p&gt;The metadata too has changed. It is, by default, hidden and expandable. It’s quite confusing why it’s called a &lt;code class=&quot;highlighter-rouge&quot;&gt;FRONT MATTER&lt;/code&gt;, instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;metadata&lt;/code&gt;. And by default too, &lt;code class=&quot;highlighter-rouge&quot;&gt;layout&lt;/code&gt; is the first metadata you’ll be able to see. There’s a select dropdown for the choices for &lt;code class=&quot;highlighter-rouge&quot;&gt;layout&lt;/code&gt;. Since in our config.yml, layout is set to &lt;code class=&quot;highlighter-rouge&quot;&gt;post&lt;/code&gt; by default, then you can choose to remove this metadata field. &lt;code class=&quot;highlighter-rouge&quot;&gt;tags&lt;/code&gt; has this cool feature that allows you to select from previous used tags. It’s just sad that it doesn’t work the same with &lt;code class=&quot;highlighter-rouge&quot;&gt;categories&lt;/code&gt;. Hence, when typing multiple categories, just separate them with spaces and not a comma.&lt;/p&gt;

&lt;p&gt;The text editor’s panel for tools is now dark but overall, it works the same and still no Grammarly functionality. I mean &lt;code class=&quot;highlighter-rouge&quot;&gt;Grammarly&lt;/code&gt; is disabled when using the text editor, but not on other text fields.  Bummer.&lt;/p&gt;

&lt;p&gt;For the most part, it looks almost exactly like jekyll-admin and better, but I don’t understand why there isn’t any noticeable changes in jekyll-admin that will make it better than the 2 years ago maintaned code of jekyll-manager.&lt;/p&gt;</content><author><name>jules</name></author><category term="" /><category term="featured" /><category term="jekyll-manager" /><category term="jekyll-admin" /><category term="blog" /><category term="dashboard" /><category term="admin" /><category term="grammarly" /><summary type="html">I was hesitant in making a change at first, since I just started blogging using Jekyll. Looking at how updates are freshly being added to the jekyll-admin library made me think it’s more intuitive. I am wrong. However, the upgrades done in jekyll-manager isn’t really all that drastic. They still haven’t got a fix for when selecting the image metadata. It is still http://localhost:4000/blog/assets/images/…jpg when I select an image from the static files. I wonder why they haven’t dealt this yet. This should have been the turning point of their fork. Instead, a few UI changes have been made. Some, impressive.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/blog/assets/images/Screen%20Shot%202019-09-29%20at%2011.31.40%20PM.png" /></entry><entry><title type="html">!= VS. NOT Filter In Realm Swift</title><link href="http://localhost:4000/blog/inverse-or-not-filter-in-realm-swift/" rel="alternate" type="text/html" title="!= VS. NOT Filter In Realm Swift" /><published>2019-09-30T00:00:00+08:00</published><updated>2019-09-30T00:00:00+08:00</updated><id>http://localhost:4000/blog/inverse-or-not-filter-in-realm-swift</id><content type="html" xml:base="http://localhost:4000/blog/inverse-or-not-filter-in-realm-swift/">&lt;p&gt;Instead of using &lt;code class=&quot;highlighter-rouge&quot;&gt;!=&lt;/code&gt; as your not equal, you can or should use &lt;code class=&quot;highlighter-rouge&quot;&gt;NOT&lt;/code&gt; instead. I’m writing this post because I just can’t seem &lt;code class=&quot;highlighter-rouge&quot;&gt;!=&lt;/code&gt; to work as part of my predicate. I was struggling to find a way to make not equal to work. I looked it up in the documentations. Even though &lt;code class=&quot;highlighter-rouge&quot;&gt;!=&lt;/code&gt; is in there, I could not make it to work. However, the &lt;code class=&quot;highlighter-rouge&quot;&gt;=&lt;/code&gt; sign worked. Weird. And so, I did something like this.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let filter = &quot;(status = 'Pending' OR (status = 'Washed' AND (pad = 2 OR pad = 3))) AND NOT cancel = 'Cancelled' AND NOT ownerId = ''&quot;
orders!.filter(filter)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here, you’ll see &lt;code class=&quot;highlighter-rouge&quot;&gt;NOT&lt;/code&gt; placed before the attribute. I don’t know why it works that way, but it works anyway.&lt;/p&gt;</content><author><name>jules</name></author><category term="" /><category term="Swift" /><category term="Realm" /><category term="Filter" /><category term="NOT" /><category term="Equal" /><category term="Inverse" /><summary type="html">Instead of using != as your not equal, you can or should use NOT instead. I’m writing this post because I just can’t seem != to work as part of my predicate. I was struggling to find a way to make not equal to work. I looked it up in the documentations. Even though != is in there, I could not make it to work. However, the = sign worked. Weird. And so, I did something like this.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/blog/assets/images/1_DqzHUZj6HcmIBK9I2aOVww.png" /></entry><entry><title type="html">Eureka LocationRow</title><link href="http://localhost:4000/blog/eureka-locationrow/" rel="alternate" type="text/html" title="Eureka LocationRow" /><published>2019-09-29T00:00:00+08:00</published><updated>2019-09-29T00:00:00+08:00</updated><id>http://localhost:4000/blog/eureka-locationrow</id><content type="html" xml:base="http://localhost:4000/blog/eureka-locationrow/">&lt;p&gt;If you’re a newbie on this, you might not actually figure this out quick. Apparently, it’s only a quick tour to the example project in Eureka. Particularly in &lt;a href=&quot;https://github.com/xmartlabs/Eureka/blob/master/Example/Example/CustomCells.swift&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CustomCells.swift&lt;/code&gt;&lt;/a&gt;. Just create a file and copy the last code below or from the link if the repository gets updated.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;&amp;lt;&amp;lt; LocationRow(){
                $0.title = &quot;Location&quot;
                $0.value = CLLocation(latitude: latitude, longitude: longitude)
                $0.tag = &quot;location&quot;
                $0.validationOptions = .validatesOnChange //2
                $0.cellUpdate { (cell, row) in //3
                    if !row.isValid {
                        cell.textLabel?.textColor = .red
                    } else {
                        let lastLocation = row.value
                        let geocoder = CLGeocoder()
                        geocoder.reverseGeocodeLocation(lastLocation!,
                            completionHandler: { (placemarks, error) in
                                if error == nil {
                                    let place = placemarks![0]
                                    var adressString : String = &quot;&quot;
                                    if place.thoroughfare != nil {
                                        adressString = adressString + place.thoroughfare! + &quot;, &quot;
                                    }
                                    if place.subThoroughfare != nil {
                                        adressString = adressString + place.subThoroughfare! + &quot; &quot;
                                    }
                                    if place.locality != nil {
                                        adressString = adressString + place.locality! + &quot; - &quot;
                                    }
                                    if place.postalCode != nil {
                                        adressString = adressString + place.postalCode! + &quot; &quot;
                                    }
                                    if place.subAdministrativeArea != nil {
                                        adressString = adressString + place.subAdministrativeArea! + &quot; - &quot;
                                    }
                                    if place.country != nil {
                                        adressString = adressString + place.country!
                                    }
                                    
                                    self.address = adressString.trimmingCharacters(in: .whitespacesAndNewlines)
                                }
                        })
                    }
                }
            }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The code above is how I implemented LocationRow in my form. You’ll see from here that I used a&lt;code class=&quot;highlighter-rouge&quot;&gt; Geocoder&lt;/code&gt; in order to formulate an address string from the coordinates selected to a variable in the ViewController called &lt;code class=&quot;highlighter-rouge&quot;&gt;address&lt;/code&gt;.  If you don’t need this feature, just get rid of what’s after &lt;code class=&quot;highlighter-rouge&quot;&gt;else&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import Foundation
import UIKit
import MapKit
import Eureka

//MARK: LocationRow
public final class LocationRow: OptionsRow&amp;lt;PushSelectorCell&amp;lt;CLLocation&amp;gt;&amp;gt;, PresenterRowType, RowType {
    
    public typealias PresenterRow = MapViewController
    
    /// Defines how the view controller will be presented, pushed, etc.
    public var presentationMode: PresentationMode&amp;lt;PresenterRow&amp;gt;?
    
    /// Will be called before the presentation occurs.
    public var onPresentCallback: ((FormViewController, PresenterRow) -&amp;gt; Void)?
    
    public required init(tag: String?) {
        super.init(tag: tag)
        presentationMode = .show(controllerProvider: ControllerProvider.callback { return MapViewController(){ _ in } }, onDismiss: { vc in _ = vc.navigationController?.popViewController(animated: true) })
        
        displayValueFor = {
            guard let location = $0 else { return &quot;&quot; }
            let fmt = NumberFormatter()
            fmt.maximumFractionDigits = 4
            fmt.minimumFractionDigits = 4
            let latitude = fmt.string(from: NSNumber(value: location.coordinate.latitude))!
            let longitude = fmt.string(from: NSNumber(value: location.coordinate.longitude))!
            return  &quot;\(latitude), \(longitude)&quot;
        }
    }
    
    /**
     Extends `didSelect` method
     */
    public override func customDidSelect() {
        super.customDidSelect()
        guard let presentationMode = presentationMode, !isDisabled else { return }
        if let controller = presentationMode.makeController() {
            controller.row = self
            controller.title = selectorTitle ?? controller.title
            onPresentCallback?(cell.formViewController()!, controller)
            presentationMode.present(controller, row: self, presentingController: self.cell.formViewController()!)
        } else {
            presentationMode.present(nil, row: self, presentingController: self.cell.formViewController()!)
        }
    }
    
    /**
     Prepares the pushed row setting its title and completion callback.
     */
    public override func prepare(for segue: UIStoryboardSegue) {
        super.prepare(for: segue)
        guard let rowVC = segue.destination as? PresenterRow else { return }
        rowVC.title = selectorTitle ?? rowVC.title
        rowVC.onDismissCallback = presentationMode?.onDismissCallback ?? rowVC.onDismissCallback
        onPresentCallback?(cell.formViewController()!, rowVC)
        rowVC.row = self
    }
}

public class MapViewController : UIViewController, TypedRowControllerType, MKMapViewDelegate {
    
    public var row: RowOf&amp;lt;CLLocation&amp;gt;!
    public var onDismissCallback: ((UIViewController) -&amp;gt; ())?
    
    lazy var mapView : MKMapView = { [unowned self] in
        let v = MKMapView(frame: self.view.bounds)
        v.autoresizingMask = [.flexibleWidth, .flexibleHeight]
        return v
        }()
    
    lazy var pinView: UIImageView = { [unowned self] in
        let v = UIImageView(frame: CGRect(x: 0, y: 0, width: 50, height: 50))
        v.image = UIImage(named: &quot;map_pin&quot;, in: Bundle(for: MapViewController.self), compatibleWith: nil)
        v.image = v.image?.withRenderingMode(.alwaysTemplate)
        v.tintColor = self.view.tintColor
        v.backgroundColor = .clear
        v.clipsToBounds = true
        v.contentMode = .scaleAspectFit
        v.isUserInteractionEnabled = false
        return v
        }()
    
    let width: CGFloat = 10.0
    let height: CGFloat = 5.0
    
    lazy var ellipse: UIBezierPath = { [unowned self] in
        let ellipse = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: self.width, height: self.height))
        return ellipse
        }()
    
    
    lazy var ellipsisLayer: CAShapeLayer = { [unowned self] in
        let layer = CAShapeLayer()
        layer.bounds = CGRect(x: 0, y: 0, width: self.width, height: self.height)
        layer.path = self.ellipse.cgPath
        layer.fillColor = UIColor.gray.cgColor
        layer.fillRule = .nonZero
        layer.lineCap = .butt
        layer.lineDashPattern = nil
        layer.lineDashPhase = 0.0
        layer.lineJoin = .miter
        layer.lineWidth = 1.0
        layer.miterLimit = 10.0
        layer.strokeColor = UIColor.gray.cgColor
        return layer
        }()
    
    
    required public init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
    }
    
    public override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nil, bundle: nil)
    }
    
    convenience public init(_ callback: ((UIViewController) -&amp;gt; ())?){
        self.init(nibName: nil, bundle: nil)
        onDismissCallback = callback
    }
    
    public override func viewDidLoad() {
        super.viewDidLoad()
        view.addSubview(mapView)
        
        mapView.delegate = self
        mapView.addSubview(pinView)
        mapView.layer.insertSublayer(ellipsisLayer, below: pinView.layer)
        
        let button = UIBarButtonItem(barButtonSystemItem: .done, target: self, action: #selector(MapViewController.tappedDone(_:)))
        button.title = &quot;Done&quot;
        navigationItem.rightBarButtonItem = button
        
        if let value = row.value {
            let region = MKCoordinateRegion(center: value.coordinate, latitudinalMeters: 400, longitudinalMeters: 400)
            mapView.setRegion(region, animated: true)
        }
        else{
            mapView.showsUserLocation = true
        }
        updateTitle()
        
    }
    
    public override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        
        let center = mapView.convert(mapView.centerCoordinate, toPointTo: pinView)
        pinView.center = CGPoint(x: center.x, y: center.y - (pinView.bounds.height/2))
        ellipsisLayer.position = center
    }
    
    
    @objc func tappedDone(_ sender: UIBarButtonItem){
        let target = mapView.convert(ellipsisLayer.position, toCoordinateFrom: mapView)
        row.value = CLLocation(latitude: target.latitude, longitude: target.longitude)
        onDismissCallback?(self)
    }
    
    func updateTitle(){
        let fmt = NumberFormatter()
        fmt.maximumFractionDigits = 4
        fmt.minimumFractionDigits = 4
        let latitude = fmt.string(from: NSNumber(value: mapView.centerCoordinate.latitude))!
        let longitude = fmt.string(from: NSNumber(value: mapView.centerCoordinate.longitude))!
        title = &quot;\(latitude), \(longitude)&quot;
    }
    
    public func mapView(_ mapView: MKMapView, regionWillChangeAnimated animated: Bool) {
        ellipsisLayer.transform = CATransform3DMakeScale(0.5, 0.5, 1)
        UIView.animate(withDuration: 0.2, animations: { [weak self] in
            self?.pinView.center = CGPoint(x: self!.pinView.center.x, y: self!.pinView.center.y - 10)
        })
    }
    
    public func mapView(_ mapView: MKMapView, regionDidChangeAnimated animated: Bool) {
        ellipsisLayer.transform = CATransform3DIdentity
        UIView.animate(withDuration: 0.2, animations: { [weak self] in
            self?.pinView.center = CGPoint(x: self!.pinView.center.x, y: self!.pinView.center.y + 10)
        })
        updateTitle()
    }
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>jules</name></author><category term="featured" /><category term="eureka" /><category term="row" /><category term="location" /><category term="custom" /><category term="cell" /><category term="swift" /><category term="mapkit" /><category term="cllocation" /><summary type="html">If you’re a newbie on this, you might not actually figure this out quick. Apparently, it’s only a quick tour to the example project in Eureka. Particularly in CustomCells.swift. Just create a file and copy the last code below or from the link if the repository gets updated.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/blog/assets/images/EurekaLocationRow.gif" /></entry><entry><title type="html">Custom Table Cell With SwiftUI</title><link href="http://localhost:4000/blog/custom-table-cell-with-swiftui/" rel="alternate" type="text/html" title="Custom Table Cell With SwiftUI" /><published>2019-09-28T00:00:00+08:00</published><updated>2019-09-28T00:00:00+08:00</updated><id>http://localhost:4000/blog/custom-table-cell-with-swiftui</id><content type="html" xml:base="http://localhost:4000/blog/custom-table-cell-with-swiftui/">&lt;p&gt;First of all, thanks to Scott Smith for helping me understand this. I know it can be another learning curve to start learning SwiftUI if you’ve only begun diving into becoming an iOS developer. It’s daunting at first, but I hope it can be simple too for many newbies. Now, I haven’t gotten my hands on Mac OS Catalina yet, so I can’t actually demonstrate my own version of this tutorial properly if I can’t show you the canvas, which isn’t available in Mojave yet, myself.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/7sxdhunvSCg&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;To make a table, add the &lt;code class=&quot;highlighter-rouge&quot;&gt;List()&lt;/code&gt;  in your ContentView&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;struct ContentView : View {

	@State var data = [&quot;Stevens&quot;, &quot;Chloe&quot;, &quot;Frank&quot;]
	
	var body: some View {
		List(data, id: \.self) { item in
			CustomRow(name: item)
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The id here is what confused me as a beginner. How Scott wrote and explained it is that &lt;code class=&quot;highlighter-rouge&quot;&gt;\.self&lt;/code&gt; is meant to give identification automatically to each string from &lt;code class=&quot;highlighter-rouge&quot;&gt;data&lt;/code&gt; itself. If you created a more comlex data structure, then you’ll probably just have to specify the &lt;code class=&quot;highlighter-rouge&quot;&gt;id&lt;/code&gt; in that structure and assign it a value of &lt;code class=&quot;highlighter-rouge&quot;&gt;UUID()&lt;/code&gt;, which returns  unique id number.  &lt;code class=&quot;highlighter-rouge&quot;&gt;@State&lt;/code&gt; on the other hand is something that will notify if there are any changes in the &lt;code class=&quot;highlighter-rouge&quot;&gt;data&lt;/code&gt; array and update whichever component is using that variable. The &lt;code class=&quot;highlighter-rouge&quot;&gt;item&lt;/code&gt; represents each item in the &lt;code class=&quot;highlighter-rouge&quot;&gt;data&lt;/code&gt; array and it is being passed as an argument to another struct, &lt;code class=&quot;highlighter-rouge&quot;&gt;CustomRow&lt;/code&gt;. It’s pretty self explainable what can be done next to create the table cell here. We only have to put in the components we need to complete a single cell in this struct.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;struct CustomRow : View {
	var name: String
	
	var body: some View {
		Text(name)
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If we didn’t need to create a custom table cell, we need not create the &lt;code class=&quot;highlighter-rouge&quot;&gt;CustomRow&lt;/code&gt; struct and just use &lt;code class=&quot;highlighter-rouge&quot;&gt;Text(item)&lt;/code&gt; instead. In the body of our &lt;code class=&quot;highlighter-rouge&quot;&gt;CustomRow&lt;/code&gt; is where you can throw in all the components you’re going to need.&lt;/p&gt;

&lt;p&gt;So, I thought to myself. That wasn’t daunting at all. You no longer have to specify how many sections and rows, no need to get the cell identifier off from the storyboard, which reduces a hell lot of code to write. It’s just that all UI designs you might have in mind will now have to be written in code which sucks.&lt;/p&gt;

&lt;p&gt;If you went on with the video tutorial, you might want some answers regarding @ObjectBinding and how it works. Here’s my &lt;a href=&quot;/blog/state-to-objectbinding-modifier/&quot;&gt;explanation&lt;/a&gt;.&lt;/p&gt;</content><author><name>jules</name></author><category term="Tutorial" /><category term="" /><category term="custom" /><category term="table" /><category term="swiftui" /><category term="cell" /><category term="scott" /><category term="smith" /><category term="ios" /><category term="row" /><summary type="html">First of all, thanks to Scott Smith for helping me understand this. I know it can be another learning curve to start learning SwiftUI if you’ve only begun diving into becoming an iOS developer. It’s daunting at first, but I hope it can be simple too for many newbies. Now, I haven’t gotten my hands on Mac OS Catalina yet, so I can’t actually demonstrate my own version of this tutorial properly if I can’t show you the canvas, which isn’t available in Mojave yet, myself.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/blog/assets/images/Screen%20Shot%202019-09-28%20at%2010.32.57%20PM.png" /></entry><entry><title type="html">Issues With My First App Store Connect Submission</title><link href="http://localhost:4000/blog/issues-with-my-first-app-store-connect-submission/" rel="alternate" type="text/html" title="Issues With My First App Store Connect Submission" /><published>2019-09-27T00:00:00+08:00</published><updated>2019-09-27T00:00:00+08:00</updated><id>http://localhost:4000/blog/issues-with-my-first-app-store-connect-submission</id><content type="html" xml:base="http://localhost:4000/blog/issues-with-my-first-app-store-connect-submission/">&lt;p&gt;It was my first app submission to the app store. I mean, well, I hadn’t submitted it for review yet, but it already detected a couple of issues that needs dealing with. I uploaded it to app connect for 6 times until I got it right.&lt;/p&gt;

&lt;p&gt;The first issue I had to deal with only needed a little bit of tweaking in my project’s &lt;code class=&quot;highlighter-rouge&quot;&gt;Signing and Capabilities&lt;/code&gt;. From there, I added a Capability known as ‘Push Notifications’.&lt;/p&gt;

&lt;p&gt;The second one is because of a deprecated API. I tried updating a cocoapod library “Firebase/Auth” after finding out that this utilizes UIWebView. For some reason, I can’t get update working on a single pod. Prior to this, I thought Facebook Core and Facebook Login were the culprits, knowing those would open a UIWebView for me to sign into Facebook. I guess I found a fix on Github issues, which helped other developers with what might have been a similar problem.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pod 'FacebookCore', '~&amp;gt; 0.9.0'
pod 'FacebookLogin', '~&amp;gt; 0.9.0'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After trying this out, it didn’t actually help with the second issue. Until, I finally decided to  update all the pods with just a simple&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pod update
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I didn’t know most of my pods were actually not up-to-date until I did that. Voila, I didn’t get another warning after uploading my project to App Connect.&lt;/p&gt;

&lt;p&gt;There were just a few more things that needed filling up. Below are things that needed to be filled:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Support URL&lt;/p&gt;

    &lt;p&gt;It would come as a surprise to you that you actually might need something like this. I mean, it surprised me too. I didn’t fully grasp what it meant even after  hovering on the question mark to reveal insights of what this might be. From what I’ve gathered in teamtreehouse.com, “its purpose is to allow users to get in contact with you if they experience problems, desire new features or want to ask questions about your app.” Hence, I just used my portfolio as the link.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Build&lt;/p&gt;

    &lt;p&gt;This is an obvious requirement. And just to bring more light into it, because I didn’t know how it worked at first. Every time you make changes in the code or anywhere in your project, you need to change the build number. So, after having dealt with those warning issues above, I had to increase the build number in project settings, otherwise I couldn’t upload a project with an already existing build number in the app connect.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Rating&lt;/p&gt;

    &lt;p&gt;This I had no idea too. I initially thought &lt;code class=&quot;highlighter-rouge&quot;&gt;why would I be rating stars of my own app?&lt;/code&gt; Stupid, right? Well, just click the edit button beside it and you’ll have a change of perspective.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

 	&lt;img src=&quot;/blog/assets/images/Screen%20Shot%202019-09-27%20at%204.09.36%20PM.png&quot; alt=&quot;ratings&quot; /&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Copyright&lt;/p&gt;

    &lt;p&gt;I’m not running a company, so I also googled what I could possibly put here. I was wondering if I could actually use &lt;code class=&quot;highlighter-rouge&quot;&gt;2019 iOS Junkie&lt;/code&gt;, but maybe not. So, I just used my name instead.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;General App Information and Contact Information&lt;/p&gt;

    &lt;p&gt;I had to fill out all details with fields referring to name, address, contact number, and email address. Otherwise, it will turn red and not submit for review when you have to.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;post-submission&quot;&gt;Post submission&lt;/h2&gt;

&lt;p&gt;I encountered a rejection. Yes, you can’t have all the fun yet. They sent me this email&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/Screen%20Shot%202019-09-27%20at%2010.45.05%20AM.png&quot; alt=&quot;location&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Below it was a screenshot of where in my app particularly went wrong. I changed my Information Property List with just one line of sentence that has to do with my location privacy usage to &lt;code class=&quot;highlighter-rouge&quot;&gt;Laundry City would like to use your current location to display it on the app, also for directions and estimations of distance. It is secure and private.&lt;/code&gt; It’s much longer and I hope it’s worth it.&lt;/p&gt;</content><author><name>jules</name></author><category term="featured" /><category term="app" /><category term="connect" /><category term="itunes" /><category term="store" /><category term="submission" /><category term="capabilities" /><category term="uiwebview" /><category term="deprecated" /><category term="api" /><category term="support" /><category term="url" /><category term="FacebookCore" /><category term="notifications" /><summary type="html">It was my first app submission to the app store. I mean, well, I hadn’t submitted it for review yet, but it already detected a couple of issues that needs dealing with. I uploaded it to app connect for 6 times until I got it right.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/blog/assets/images/Screen%20Shot%202019-09-25%20at%208.43.21%20PM.png" /></entry></feed>