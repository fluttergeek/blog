<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://iosjunkie.com/blog/feed.xml" rel="self" type="application/atom+xml" /><link href="http://iosjunkie.com/blog/" rel="alternate" type="text/html" /><updated>2019-10-22T12:32:30+08:00</updated><id>http://iosjunkie.com/blog/feed.xml</id><title type="html">iOS Junkie</title><subtitle>Demystifying complex instructions, tutorials, and a little bit more geared toward the iOS development or Swift stuff. Technical yet simple tips on how iOS components work.</subtitle><entry><title type="html">Sharing UserDefault Between Apps</title><link href="http://iosjunkie.com/blog/sharing-userdefault-between-apps/" rel="alternate" type="text/html" title="Sharing UserDefault Between Apps" /><published>2019-10-22T00:00:00+08:00</published><updated>2019-10-22T00:00:00+08:00</updated><id>http://iosjunkie.com/blog/sharing-userdefault-between-apps</id><content type="html" xml:base="http://iosjunkie.com/blog/sharing-userdefault-between-apps/">&lt;p&gt;I just discovered a way for two apps to communicate with each other with the use of UserDefaults. I thought that UserDefault is only available locally in the app. Sandboxed in its own environment.&lt;/p&gt;

&lt;p&gt;The two apps should add &lt;code class=&quot;highlighter-rouge&quot;&gt;Groups&lt;/code&gt; capability each.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/R7HLz.png&quot; alt=&quot;group&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The group container string should start with &lt;code class=&quot;highlighter-rouge&quot;&gt;group&lt;/code&gt;. For example, &lt;code class=&quot;highlighter-rouge&quot;&gt;group.theCommonContainer&lt;/code&gt;. It’s just like a url which apps with the groups capability can access, provided that their container must have &lt;code class=&quot;highlighter-rouge&quot;&gt;group.theCommonContainer&lt;/code&gt;. But of course, it could be named anything else other than &lt;code class=&quot;highlighter-rouge&quot;&gt;theCommonContainer&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;access&quot;&gt;Access&lt;/h2&gt;

&lt;p&gt;In order to access the UserDefault that is being shared by the apps, access UserDefaults this way:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let groupDefaults = UserDefaults(suiteName: &quot;group.theCommonContainer&quot;)

// reading something from key
let username = groupDefaults?.string(forKey: &quot;something&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>jules</name></author><category term="" /><category term="userdefaults" /><category term="swift" /><category term="xcode" /><category term="apps" /><category term="ios" /><summary type="html">I just discovered a way for two apps to communicate with each other with the use of UserDefaults. I thought that UserDefault is only available locally in the app. Sandboxed in its own environment.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://miro.medium.com/max/6000/1*7Zy2OC1nxK-BqmDbGxtPDg.png" /></entry><entry><title type="html">Fake Airpods i500 TWS Review</title><link href="http://iosjunkie.com/blog/fake-airpods-i500-tws-review/" rel="alternate" type="text/html" title="Fake Airpods i500 TWS Review" /><published>2019-10-21T00:00:00+08:00</published><updated>2019-10-21T00:00:00+08:00</updated><id>http://iosjunkie.com/blog/fake-airpods-i500-tws-review</id><content type="html" xml:base="http://iosjunkie.com/blog/fake-airpods-i500-tws-review/">&lt;p&gt;I bought a pair of Apple Fake Airpods on &lt;a href=&quot;https://shopee.ph/product/164746332/2622313935&quot;&gt;Shopee&lt;/a&gt; for Php 1060 including shipping. Yes, that’s right! I bought it cheap. It’s around $20 and it’s worthy, I might add.&lt;/p&gt;

&lt;p&gt;I have looked into this for quite some time. I never knew I wanted them so much until I found myself trying to look for a fake one. The original one is just too much for its price. I’ve read a lot of bad reviews on lower models of TWS until I caught myself reading the reviews of an i500 TWS. There weren’t any bad reviews, but I was still skeptic because many TWS do have a defect or two. Some have only one side working, some only work for a week, and some are louder on one side only.&lt;/p&gt;

&lt;p&gt;It took risk to buy a fake product not knowing what condition it is in. The product I received had free silicone casing for the shell and a silicone string that holds the pair of airpods together like that of old people eye-glasses. Yeah that thing if you can imagine it.&lt;/p&gt;

&lt;p&gt;The sound is great. It fits perfectly. I can’t tell it apart from an original one because I never had one. If the music is loud, it is enough to cancel the noise outside.&lt;/p&gt;

&lt;p&gt;The only downside is that I can’t max it out. The sound distorts when the bass is very heavy. Like I have this surround sound effect on my phone. When turned on, it looks like my airpods can’t handle that bass. Its not to say it isn’t capable of bass. It is capable and sounds magnificent when the surround sound effect is turned off. I can still play some party music and the music would be crisp still. It just can’t handle the very loud bass ones. Another downside would be the latency. It lags when I play a video on streaming websites or even downloaded video.&lt;/p&gt;

&lt;p&gt;I have tried it both on my iPad and Vivo V9. Recording with airpods on my iPad gave me some shit quality, while in my android phone, it is actually crisp. However, the volume is low. I might have just spoken too softly.&lt;/p&gt;

&lt;p&gt;Overall, I love my fake airpods. I use it all the time. The use of bluetooth connectivity is as convenient as from using bluetooth headset’s.&lt;/p&gt;</content><author><name>jules</name></author><category term="" /><category term="airpods" /><category term="apple" /><category term="i500" /><category term="tws" /><summary type="html">I bought a pair of Apple Fake Airpods on Shopee for Php 1060 including shipping. Yes, that’s right! I bought it cheap. It’s around $20 and it’s worthy, I might add.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://iosjunkie.com/blog/assets/images/41qIPi7taiL._SX385_.jpg" /></entry><entry><title type="html">Using Vertical Mouse: My Take</title><link href="http://iosjunkie.com/blog/using-vertical-mouse-my-take/" rel="alternate" type="text/html" title="Using Vertical Mouse: My Take" /><published>2019-10-15T00:00:00+08:00</published><updated>2019-10-15T00:00:00+08:00</updated><id>http://iosjunkie.com/blog/using-vertical-mouse-my-take</id><content type="html" xml:base="http://iosjunkie.com/blog/using-vertical-mouse-my-take/">&lt;p&gt;I bought the &lt;code class=&quot;highlighter-rouge&quot;&gt;Wireless Vertical Mouse Game 800/1600/2400DPI Mice 2-Button&lt;/code&gt; a couple of weeks ago and it just a arrived a week ago. I bought mine in &lt;a href=&quot;https://shopee.ph/product/76803954/1920543944&quot;&gt;Shopee&lt;/a&gt;. It’s a marketplace here in the Philippines. I bought it for only Php 445 including freight. That’s like almost USD 10. This is brandless and it charges like how you charge with your phone. I guess its battery lasts for a week, or maybe it just turned off. It says in Shopee that it should last more than a month. So, I just recharged mine again today.&lt;/p&gt;

&lt;p&gt;Does it fix the arm strain problem?&lt;/p&gt;

&lt;p&gt;I think it does. As a programmer, I thought I was having carpal tunnel syndrome. This happened to me during 2016 after graduating from college. My hands would become painful and even more painful each day. Until I stopped programming. It took me many months of pregabalin/gabapentin and Vitamin B complex to heal from it. It wasn’t fully gone but I was more relieved. I went to med school after that, and I haven’t encountered the pain again. We don’t use keyboards and mouse that much in med school. Then after 2 years, I decided it’s not for me at all.&lt;/p&gt;

&lt;p&gt;The past few months I’ve been trying to get back to programming. The pain starts coming back, so I minimized my computer usage to keep the pain away the day after. I realized that putting my keyboard closer to my lap did the trick. It removed most of the pain. I got more into coding and there is pain when I’m holding the mouse for so long. I guess I shouldn’t have rested my palms on top of the mouse if I wasn’t really using it. But that just doesn’t solve the problem because I will be programming for long hours.&lt;/p&gt;

&lt;p&gt;After trying the vertical mouse, things starts to change pretty quickly. I no longer feel the strain in my hands and arms. It reduced the pain to like 90%. The other 10% is when I use the vertical mouse for much longer hours but it’s not all that painful and it subsides easily. All these years I thought I had carpal tunnel syndrome. I was misdiagnosed by a Rheumatologist here in Zamboanga. You know why? I told him I have this pain and it includes my pinky and my finger joints as well. He refuses to diagnose it with anything else but &lt;code class=&quot;highlighter-rouge&quot;&gt;CTS&lt;/code&gt;. I know it wasn’t CTS because my pinky is included which shouldn’t be the case if it really was CTS.&lt;/p&gt;

&lt;p&gt;As for this vertical mouse model, well, it is brandless and you get what you pay for. I’m not sure why it hangs a bit when I load up a lot of windows or when I’m running out of RAM. It’s not that much of a problem though. Most of the time it doesn’t hang. But when it does, the left click button kind of acts like a right click and then it feels laggy and not to mention, the scrolling too. For the most part, I’m satisfied with my mouse. It is a wireless mouse, but like most wireless mouse, you need that tiny usb thingy plugged in your computer that allows it to be wireless. Not bluetooth.&lt;/p&gt;</content><author><name>jules</name></author><category term="" /><category term="vertical" /><category term="mouse" /><category term="review" /><category term="carpal" /><category term="tunnel" /><category term="syndrome" /><summary type="html">I bought the Wireless Vertical Mouse Game 800/1600/2400DPI Mice 2-Button a couple of weeks ago and it just a arrived a week ago. I bought mine in Shopee. It’s a marketplace here in the Philippines. I bought it for only Php 445 including freight. That’s like almost USD 10. This is brandless and it charges like how you charge with your phone. I guess its battery lasts for a week, or maybe it just turned off. It says in Shopee that it should last more than a month. So, I just recharged mine again today.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://iosjunkie.com/blog/assets/images/919bb5baa29ab582de3bbd77e65b319c.jpg" /></entry><entry><title type="html">Context Menu in SwiftUI</title><link href="http://iosjunkie.com/blog/context-menu-in-swiftui/" rel="alternate" type="text/html" title="Context Menu in SwiftUI" /><published>2019-10-15T00:00:00+08:00</published><updated>2019-10-15T00:00:00+08:00</updated><id>http://iosjunkie.com/blog/context-menu-in-swiftui</id><content type="html" xml:base="http://iosjunkie.com/blog/context-menu-in-swiftui/">&lt;p&gt;This is one of the coolest things you’d see in an iOS app. Context Menus, like the one showed in the picture, was something that I thought could only happen with App Icons. It turns out they work within the app too.&lt;/p&gt;

&lt;p&gt;It simply works like alertsheet. Like alertsheet, it is a collection of buttons but now with images attached to them too. The action is also encapsulated within the button. The best part is you no longer have to use a nasty looking closure to make that happen.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import SwiftUI

struct ContentView: View {
    var body: some View {
        Image(&quot;pic&quot;).resizable().frame(height: 300)
            .cornerRadius(20).padding()
            .contextMenu {
                VStack {
                    Button(action: {
                        print(&quot;save&quot;)
                    }) {
                        HStack {
                            Image(systemName: &quot;folder.fill&quot;)
                            Text(&quot;Save To Gallery&quot;)
                        }
                    }
                    Button(action: {
                        print(&quot;send&quot;)
                    }) {
                        HStack {
                            Image(systemName: &quot;paperplane.fill&quot;)
                            Text(&quot;Send&quot;)
                        }
                    }
                }
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You could not only use it in images, but also with labels among other things. These things are probably not solid yet, so they might crash your app.&lt;/p&gt;

&lt;p&gt;Now everything looks cleaner than building one on UIKit. It’s just that these brackets kind of make me dizzy. But don’t fret, you can compartmentalize these things with your programming prowess.&lt;/p&gt;

&lt;p&gt;Example was taken from &lt;code class=&quot;highlighter-rouge&quot;&gt;KAVSOFT&lt;/code&gt;:&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/NgXHemwSFIQ&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;</content><author><name>jules</name></author><category term="" /><category term="context" /><category term="menu" /><category term="swiftui" /><summary type="html">This is one of the coolest things you’d see in an iOS app. Context Menus, like the one showed in the picture, was something that I thought could only happen with App Icons. It turns out they work within the app too.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://iosjunkie.com/blog/assets/images/Screen%20Shot%202019-10-15%20at%209.16.42%20AM.png" /></entry><entry><title type="html">Weak Self vs Unowned Self</title><link href="http://iosjunkie.com/blog/weak-self-vs-unowned-self/" rel="alternate" type="text/html" title="Weak Self vs Unowned Self" /><published>2019-10-15T00:00:00+08:00</published><updated>2019-10-15T00:00:00+08:00</updated><id>http://iosjunkie.com/blog/weak-self-vs-unowned-self</id><content type="html" xml:base="http://iosjunkie.com/blog/weak-self-vs-unowned-self/">&lt;p&gt;Most articles regarding this are overwhelming and I’m about to make it easier. This is based on Brian Voong’s tutorial. I urge you to watch the video too because, essentially, that is what I’m basing this article on.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/q0-DIJszYRo&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;In his tutorial, there are two views. One trying to present the other, the other view has a button to go back to the first view.&lt;/p&gt;

&lt;p&gt;His objective in this tutorial was to simply demonstrate how the presented view is removed from memory when popping back to the previous view by the use of &lt;code class=&quot;highlighter-rouge&quot;&gt;[weak self]&lt;/code&gt; or by &lt;code class=&quot;highlighter-rouge&quot;&gt;[unowned self]&lt;/code&gt;. His closures are a bit too advanced to understand, so let’s make it more conceptual than actual.&lt;/p&gt;

&lt;p&gt;Say this is the presented view.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class 2ndView: View {
	deinit {
		print(&quot;The memory used by this view is being released&quot;)
	}
	
	self.viewDidLoad (){
		closure {() in
			self.alert()
		}
	}
	
	func alert() {...}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;By doing it like this, the &lt;code class=&quot;highlighter-rouge&quot;&gt;self&lt;/code&gt; in the closure, by default, holds a strong reference to itself, being the 2ndView. And when it does that, it simply makes it difficult to relase the 2ndView from the memory when going back to the 1stView. And by &lt;code class=&quot;highlighter-rouge&quot;&gt;strong&lt;/code&gt;, it means the &lt;code class=&quot;highlighter-rouge&quot;&gt;deinit&lt;/code&gt; won’t be working here.&lt;/p&gt;

&lt;p&gt;In order to make the reference to 2ndView less strong, we use weak by replacing our closure to this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;closure { [weak self] () in
	self?.alert()
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Notice that we made the &lt;code class=&quot;highlighter-rouge&quot;&gt;self&lt;/code&gt; an optional. By using weak, we can’t guarantee that &lt;code class=&quot;highlighter-rouge&quot;&gt;self&lt;/code&gt; always has a value. If we are certain that &lt;code class=&quot;highlighter-rouge&quot;&gt;self&lt;/code&gt; always returns a value, then we can use &lt;code class=&quot;highlighter-rouge&quot;&gt;unowned&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;closure { [unowned self] () in
	self.alert()
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Both solves the same memory problem and will print out &lt;code class=&quot;highlighter-rouge&quot;&gt;The memory used by this view is being released&lt;/code&gt; every time the 2ndView is unloaded.&lt;/p&gt;

&lt;p&gt;This can also be done for variables pointing to classes. Let’s have an example of the 1stView:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class 1stView: View {
	weak var 2ndView: View?
	
	self.viewDidLoad() {
		navigationController?.pushViewController(2ndView(), animated: true)
	}
}

1stView = nil
// The memory used by this view is being released
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After unloading the 1stView, our 2ndView is also unloaded ang gives us the printed message from its &lt;code class=&quot;highlighter-rouge&quot;&gt;deinit&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here’s a &lt;a href=&quot;https://www.avanderlee.com/swift/weak-self/&quot;&gt;post by Antoine v.d. SwiftLee 🚀&lt;/a&gt; which explains what ARC does behind the curtains.&lt;/p&gt;</content><author><name>jules</name></author><category term="" /><category term="swift" /><category term="tutorial" /><category term="unowned" /><category term="weak" /><category term="self" /><category term="memory" /><category term="leak" /><category term="deinit" /><summary type="html">Most articles regarding this are overwhelming and I’m about to make it easier. This is based on Brian Voong’s tutorial. I urge you to watch the video too because, essentially, that is what I’m basing this article on.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://i.ytimg.com/vi/q0-DIJszYRo/maxresdefault.jpg" /></entry><entry><title type="html">Let’s Start Using Swift Package Manager</title><link href="http://iosjunkie.com/blog/lets-start-using-swift-package-manager/" rel="alternate" type="text/html" title="Let's Start Using Swift Package Manager" /><published>2019-10-14T00:00:00+08:00</published><updated>2019-10-14T00:00:00+08:00</updated><id>http://iosjunkie.com/blog/lets-start-using-swift-package-manager</id><content type="html" xml:base="http://iosjunkie.com/blog/lets-start-using-swift-package-manager/">&lt;p&gt;The first time I encountered the word &lt;code class=&quot;highlighter-rouge&quot;&gt;Swift Package Manager&lt;/code&gt; was just a few days ago while searching for alternative ways to install the &lt;code class=&quot;highlighter-rouge&quot;&gt;Firebase&lt;/code&gt; framework in my project. I thought &lt;code class=&quot;highlighter-rouge&quot;&gt;Carthage&lt;/code&gt; was a holy grail. Boy, am I wrong now that I’ve seen how to install frameworks with Swift Package Manager. Unfortunately, Firebase doesn’t have a swift package yet. Not officially, anyway. They have started trying to make the support since months ago, but no prorgress has been done months after. Crazy! I know.&lt;/p&gt;

&lt;p&gt;The process of adding a framework to your project with SwiftPM is pretty straightforward. Note that I use &lt;code class=&quot;highlighter-rouge&quot;&gt;framework&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;package&lt;/code&gt; interchangeably. Get the git url from the framework’s github that is SwiftPM supported. Then in your Xcode, go to &lt;code class=&quot;highlighter-rouge&quot;&gt;File » Swift Packages » Add Package Dependency&lt;/code&gt;. Enter the git url and click &lt;code class=&quot;highlighter-rouge&quot;&gt;next&lt;/code&gt;. You will be given an option to choose the latest version or from another branch, typical &lt;code class=&quot;highlighter-rouge&quot;&gt;Github&lt;/code&gt; jargon really.&lt;/p&gt;

&lt;p&gt;That wasn’t so hard was it? No more typing on that freaking terminal or creating a &lt;code class=&quot;highlighter-rouge&quot;&gt;Podfile&lt;/code&gt; or a &lt;code class=&quot;highlighter-rouge&quot;&gt;Cartfile&lt;/code&gt;. Everything is handed to you by Xcode now. And like, basically, everyone can easily create their own packages and push them to github. I never really had any idea how those pods came to be published or approved after being made by their creators, but this time everyone gets to be creator &amp;gt;:)&lt;/p&gt;

&lt;p&gt;And while there’s a &lt;code class=&quot;highlighter-rouge&quot;&gt;cocoapods.org&lt;/code&gt;, there’s also &lt;a href=&quot;https://swiftpack.co/&quot;&gt;swiftpack.co&lt;/a&gt; to look for existing packages. Alamofire and SwiftyJSON are some of the familiar packages listed in that repository. However, there are still plenty of packages that you might need that are not yet supporting SPM. I have this project with more than 10 dependencies, but only one of them supports SPM and that is &lt;code class=&quot;highlighter-rouge&quot;&gt;Cosmos&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;There’s a ridiculously simple explanation on how to create a &lt;code class=&quot;highlighter-rouge&quot;&gt;Swift Package&lt;/code&gt;:&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/xu9oeCAS8aA&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;</content><author><name>jules</name></author><category term="" /><category term="tutorial" /><category term="swift" /><category term="package" /><category term="manager" /><category term="review" /><summary type="html">The first time I encountered the word Swift Package Manager was just a few days ago while searching for alternative ways to install the Firebase framework in my project. I thought Carthage was a holy grail. Boy, am I wrong now that I’ve seen how to install frameworks with Swift Package Manager. Unfortunately, Firebase doesn’t have a swift package yet. Not officially, anyway. They have started trying to make the support since months ago, but no prorgress has been done months after. Crazy! I know.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://miro.medium.com/max/1200/1*ooI0KwILz0Yo2cXUaW9gog.png" /></entry><entry><title type="html">Enums For Beginners</title><link href="http://iosjunkie.com/blog/enums/" rel="alternate" type="text/html" title="Enums For Beginners" /><published>2019-10-13T00:00:00+08:00</published><updated>2019-10-13T00:00:00+08:00</updated><id>http://iosjunkie.com/blog/enums</id><content type="html" xml:base="http://iosjunkie.com/blog/enums/">&lt;p&gt;Enums can be confusing for everybody, especially the newbies. I mean, why use those when you can just create variables and constructs. It does the same right? Some claim that they use enum to make their code type-safe, error free and easy to use. I guess that would be true if an app is becoming perplexingly complex.&lt;/p&gt;

&lt;p&gt;In basic form, it can look like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;enum Directions {
    case north
    case south
    case east
    case west
}
 
 
// Defining multiple cases on a single line
 
enum Directions { 
    case north, south, east, west 
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cool, so what then? How and why would you want to use those? After calling forth &lt;code class=&quot;highlighter-rouge&quot;&gt;Directions.north&lt;/code&gt; with a &lt;code class=&quot;highlighter-rouge&quot;&gt;print&lt;/code&gt;, you’ll just see this in the console &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;north\n&quot;&lt;/code&gt;. You might wonder why is this even useful? It’s like calling a variable inside of a struct type.&lt;/p&gt;

&lt;p&gt;Let’s move on to Raw Values. We now know that cases will return a string. Aside from it, it can also return a &lt;code class=&quot;highlighter-rouge&quot;&gt;rawValue&lt;/code&gt;. Just how do we do that? It’s easy, just inherit from a type by doing something like this: &lt;code class=&quot;highlighter-rouge&quot;&gt;enum Directions: Int&lt;/code&gt;. Now when you print(&lt;code class=&quot;highlighter-rouge&quot;&gt;Directions.north.rawValue&lt;/code&gt;), you’ll get &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;. It’s just like Directions became some sort of array and north is indexed at &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;.  Here’s another example for that:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;enum AnimationCurve: Int {
    case easeInOut, easeIn, easeOut, linear
}

print(AnimationCurve.easeIn.rawValue)
// &quot;1\n&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The next example will not be able to inherit from types to call &lt;code class=&quot;highlighter-rouge&quot;&gt;rawValues&lt;/code&gt; from cases.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;enum Directions {
    case north(String)
    case south(latitude: Double, longitude: Double)
    case east(String)
    case west(String)
}
 
var digitalCompass = Directions.south(latitude: -120.83, longitude: 37.0)
print(digitalCompass)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When printed, this will give a value of &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;south(latitude: -120.83, longitude: 37.0)\n&quot;&lt;/code&gt;. Neat huh? So, basically it’s a string. Cases are a f***ing string with like no spaces because they are also variable names at the same time! Genius!&lt;/p&gt;

&lt;p&gt;How do we get the values inside of the parenthesis? Is there some kind of rawValue mechanism we can use for this? As a matter of fact, there is! We can print a form of string from the values inside of these parentheses. If you trust me on this, we can print out &lt;code class=&quot;highlighter-rouge&quot;&gt;Latitude is 0.5, while longitude is 0.6&lt;/code&gt; just by printing &lt;code class=&quot;highlighter-rouge&quot;&gt;print(Directions.south(latitude: 0.5, longitude: 0.6).description)&lt;/code&gt;. We just have to extend this enum like it’s some kind of construct and create a computed property, we chose to use the word &lt;code class=&quot;highlighter-rouge&quot;&gt;description&lt;/code&gt; as you can see. It can be anything actually.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;extension Directions {
    var description: String {
        switch self {
        case .sorth(let direction):
            return direction
        case .south(let latitude, let longitude):
            return &quot;Latitude is \(latitude), while longitude is \(longitude)&quot;
        case .east(let isItReally):
            return &quot;The direction is \(isItReally)&quot;
        case .west(let westeros):
            return &quot;King's landing is in \(westeros)&quot;
        }
    }
}

print(Directions.south(latitude: 0.5, longitude: 0.6).description)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There’s another way to simply do this without having to call the computed property &lt;code class=&quot;highlighter-rouge&quot;&gt;description&lt;/code&gt; directly. We can inherit this extension from CustomStringConvertible, like this:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;extension Directions: CustomStringConvertible {
    var description: String {
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;, but the computed property should be &lt;code class=&quot;highlighter-rouge&quot;&gt;description&lt;/code&gt;. If you use another variable name instead of it, then you will not be able to use &lt;code class=&quot;highlighter-rouge&quot;&gt;CustomStringConvertible&lt;/code&gt;’s feature.&lt;/p&gt;

&lt;p&gt;Now all you have to do to get the same result is print out &lt;code class=&quot;highlighter-rouge&quot;&gt;Directions.south(latitude: 0.5, longitude: 0.6)&lt;/code&gt; without the &lt;code class=&quot;highlighter-rouge&quot;&gt;description&lt;/code&gt; after it.&lt;/p&gt;

&lt;p&gt;That’s the idea of how to return strings out of enums with parentheses. The &lt;code class=&quot;highlighter-rouge&quot;&gt;let latitude, let longitude&lt;/code&gt; are just parameter names. If you’ve noticed, it can actually be named anything too.&lt;/p&gt;

&lt;p&gt;Now that we know how to work with enums. There are other things you can do with it too, like comparing complex enum’s value to a similar type of enum. This is a tutorial by &lt;code class=&quot;highlighter-rouge&quot;&gt;Károly Nyisztor&lt;/code&gt; and it teaches just that.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/XsXE3SlzpM4&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;Thanks to &lt;a href=&quot;https://becodable.com/swift-enum/&quot;&gt;BeCodable&lt;/a&gt;, &lt;a href=&quot;https://www.youtube.com/watch?v=XsXE3SlzpM4&quot;&gt;Károly Nyisztor&lt;/a&gt; and &lt;a href=&quot;https://www.avanderlee.com/swift/enumerations/&quot;&gt;Antoine v.d. SwiftLee 🚀&lt;/a&gt;. The examples come from their posts. Take your enums knowledge to the next level by clicking on their names, it links to their post about enums. Since my intention about this post is to just bridge the gap between beginners to learning the essence of enums, these guys will do you better with more examples and applications on how it really works.&lt;/p&gt;</content><author><name>jules</name></author><category term="" /><category term="enums" /><category term="swift" /><category term="tutorial" /><summary type="html">Enums can be confusing for everybody, especially the newbies. I mean, why use those when you can just create variables and constructs. It does the same right? Some claim that they use enum to make their code type-safe, error free and easy to use. I guess that would be true if an app is becoming perplexingly complex.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://becodable.com/wp-content/uploads/2018/09/Swift-Enum.jpg" /></entry><entry><title type="html">Sign In With Apple Swift 5 Tutorial</title><link href="http://iosjunkie.com/blog/sign-in-with-apple-swift-5/" rel="alternate" type="text/html" title="Sign In With Apple Swift 5 Tutorial" /><published>2019-10-12T00:00:00+08:00</published><updated>2019-10-12T00:00:00+08:00</updated><id>http://iosjunkie.com/blog/sign-in-with-apple-swift-5</id><content type="html" xml:base="http://iosjunkie.com/blog/sign-in-with-apple-swift-5/">&lt;p&gt;First of all, a big thanks to Kilo Loco’s &lt;a href=&quot;https://www.youtube.com/watch?v=vuygdr0EcGM&quot;&gt;tutorial&lt;/a&gt;. Check it out. Not only is this feature available for iOS 13 up, it’s also available for Mac OS 10.15.&lt;/p&gt;

&lt;p&gt;This is my favorite feature in iOS 13. Being able to sign in with the option of privacy. Why is that? Well if you use this feature in your app, your user will be able to use a dummy name and a garbage email address. The garbage email address generated by Apple will forward emails to the email associated with the user’s Apple ID. It’s not necessarily the user’s @icloud.com email. It could be his gmail. And of course, the user doesn’t have to change his name to something else and he can opt to use the Apple associated email. As of now, the only information this feature can use are full name and email.&lt;/p&gt;

&lt;p&gt;All the user really has to do, if privacy isn’t the top concern, is click continue with password and then enter the password for your Apple ID. Once the user is done, click &lt;code class=&quot;highlighter-rouge&quot;&gt;continue&lt;/code&gt; and voila!&lt;/p&gt;

&lt;p&gt;So here’s how to do that with UIKit in Swift:&lt;/p&gt;

&lt;p&gt;Go to signing and capabilities -&amp;gt; add Capability -&amp;gt; Sign In with Apple&lt;/p&gt;

&lt;p&gt;import AuthenticationServices in two files, in the model and view controller.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// User.swift // Model
struct User {
    let id: String
    let firstName: String
    let lastName: String
    let email: String

    init(credentials: ASAuthorizationAppleIDCredential) {
        self.id = credentials.user
        self.firstName = credentials.fullName?.givenName ?? &quot;&quot;
        self.lastName = credentials.fullName?.familyName ?? &quot;&quot;
        self.email = credentials.email ?? &quot;&quot;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Notice that only credentials.user is non-optional, and that’s because it is the only guaranteed thing to come out of this. At this point, we don’t know yet what is defined in the scope of what we want to get from our User.&lt;/p&gt;

&lt;p&gt;Now let’s add the sign in button, though Apple has already got us covered on this. It already has its own height. You can’t manually add this on your storyboard, so you’ll have to programmatically code it and programmatically key in the constraints as well. But basically, this is what you’ll need to create the sign in button:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let appleButton = ASAuthorizationAppleIDButton()
appleButton.translatesAutoresizingMaskingIntoConstraints = false
appleButton.addTarget(self, action: #selector(didTapAppleButton), for: .touchUpInside)
view.addSubview(appleButton)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That’s basically what you’ll need to make the button appear. Now let’s make it functional&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@objc func didTapAppleButton() {
    let provider = ASAuthorizationAppleIDProvider()
    let request = provider.createRequest()
    request.requestScopes = [.fulName, .email]
		
    let controller = ASAuthorizationController(authorizationRequests: [request])
    controller.delegate = self
    controller.presentationContextProvider = self
    controller.performRequest()
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The next thing to do is to extend from two delegates: &lt;code class=&quot;highlighter-rouge&quot;&gt;ASAuthorizationControllerDelegate&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ASAuthorizationControllerPresentationContextProviding&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;extension ViewController: ASAuthorizationControllerPresentationContextProviding {
    func presentationAnchor(for controller: ASAuthorizationController) -&amp;gt; ASPresentationAnchor {
        return view.window!
    }
}

extension ViewController: ASAuthorizationControllerDelegate, didCompleteWithAuthorization authorization: ASAuthorization) {
    switch authorization.credential {
    case let credentials as ASAuthorizationAppleIDCredential:
        let user = User(credentials: credentials)
        performSegue(withIdentifier: &quot;goToHome&quot;, sender: user)
    default: break
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That’s pretty much all you have to do to get &lt;code class=&quot;highlighter-rouge&quot;&gt;Sign In with Apple&lt;/code&gt; working, basically.&lt;/p&gt;

&lt;p&gt;Now, you may have heard, if you watched Kilo Loco’s tutorial, about an autologin which I haven’t seen him done a tutorial on it. It would be just like checking if the credential exists or not. I looked it up and here it goes:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let appleIDProvider = ASAuthorizationAppleIDProvider()
appleIDProvider.getCredentialState(forUserID: userIdentifier) { (credentialState, error) in
    switch credentialState {
    case .authorized:
        // The Apple ID credential is valid. Show Home UI Here
        break
    case .revoked:
        // The Apple ID credential is revoked. Show SignIn UI Here.
        break
    case .notFound:
        // No credential was found. Show SignIn UI Here.
        break
    default:
        break
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you want to go over sending your users some email, then you’ll have to configure it further inside your &lt;a href=&quot;https://developer.apple.com/account/resources/services/configure&quot;&gt;Apple Developer Account&lt;/a&gt;.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/vuygdr0EcGM&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;</content><author><name>jules</name></author><category term="" /><category term="sign" /><category term="in" /><category term="login" /><category term="apple" /><category term="swift" /><category term="uikit" /><summary type="html">First of all, a big thanks to Kilo Loco’s tutorial. Check it out. Not only is this feature available for iOS 13 up, it’s also available for Mac OS 10.15.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://iosjunkie.com/blog/assets/images/Screen%20Shot%202019-10-12%20at%201.09.03%20PM.png" /></entry><entry><title type="html">Experience With Carthage As Opposed To Cocoapods</title><link href="http://iosjunkie.com/blog/experience-with-carthage/" rel="alternate" type="text/html" title="Experience With Carthage As Opposed To Cocoapods" /><published>2019-10-11T00:00:00+08:00</published><updated>2019-10-11T00:00:00+08:00</updated><id>http://iosjunkie.com/blog/experience-with-carthage</id><content type="html" xml:base="http://iosjunkie.com/blog/experience-with-carthage/">&lt;p&gt;Cocoapods makes your build times slower and that’s why I’ve taken the liberty of trying Carthage. Well, from the instructions I’ve read in bigger frameworks like &lt;code class=&quot;highlighter-rouge&quot;&gt;Realm&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;FacebookCore/FacebookLogin&lt;/code&gt;, it is a daunting process. Which is why it took me this long to want to even bother with it. But for some smaller frameworks, it is almost similar to Cocoapod’s process, which I like better. Unfortunately, this arduous shift took painfully long to install the frameworks. Every time I add a new framework to my &lt;code class=&quot;highlighter-rouge&quot;&gt;Cartfile&lt;/code&gt; and update carthage, it downloads everything and builds everything over again. My gahd!&lt;/p&gt;

&lt;p&gt;Apart from that, I didn’t know that I had to take this extra step for each of the framework I’m using.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/Screen%20Shot%202019-10-11%20at%2012.38.52%20AM.png&quot; alt=&quot;IMPORTING&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If I didn’t import all of them there, I’d get this error.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/Screen%20Shot%202019-10-11%20at%2012.30.16%20AM.png&quot; alt=&quot;error&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There’s also another step you have to do:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Go to Build Phases&lt;/li&gt;
  &lt;li&gt;Click &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; and add New Run Script Phase&lt;/li&gt;
  &lt;li&gt;Type &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/local/bin/carthage copy-frameworks&lt;/code&gt; in the ginormous textarea under &lt;code class=&quot;highlighter-rouge&quot;&gt;Shell /bin/sh&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We’re not done yet. Phew! For every framework you add, you also need to add their location in the &lt;code class=&quot;highlighter-rouge&quot;&gt;input files&lt;/code&gt;. For this, I used &lt;code class=&quot;highlighter-rouge&quot;&gt;Carting&lt;/code&gt;. It creates a &lt;code class=&quot;highlighter-rouge&quot;&gt;xcfilelist&lt;/code&gt; for input files and output files for all of it. &lt;a href=&quot;https://github.com/artemnovichkov/Carting&quot;&gt;Check it out&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There were a few frameworks that just doesn’t work with Carthage, those being:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;GMStepper - No carthage available&lt;/li&gt;
  &lt;li&gt;BetterSegmentedControl - Error during Carthage installation&lt;/li&gt;
  &lt;li&gt;Firebase - They will not be maintaining their Carthage archives anymore. They’d rather invest it on &lt;code class=&quot;highlighter-rouge&quot;&gt;Swift Package Manager&lt;/code&gt;, though I’d still have to look it up one day.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For these three, I maintained the use of Cocoapods. It can works hand in hand with Carthage.&lt;/p&gt;

&lt;p&gt;I’m not sure I’ve noticed any changes, because Firebase is the heaviest framework I have and it is installed with Cocoapods, thereby still making my build time really slow. Apart from that, I don’t really see the rest of the frameworks build anymore. I guess that’s an improvement.&lt;/p&gt;</content><author><name>jules</name></author><category term="" /><category term="carthage" /><category term="swift" /><category term="cocoapods" /><category term="cocoapod" /><category term="pod" /><category term="import" /><category term="libraries" /><category term="framework" /><category term="bettersegmentedcontrol" /><category term="gmstepper" /><summary type="html">Cocoapods makes your build times slower and that’s why I’ve taken the liberty of trying Carthage. Well, from the instructions I’ve read in bigger frameworks like Realm and FacebookCore/FacebookLogin, it is a daunting process. Which is why it took me this long to want to even bother with it. But for some smaller frameworks, it is almost similar to Cocoapod’s process, which I like better. Unfortunately, this arduous shift took painfully long to install the frameworks. Every time I add a new framework to my Cartfile and update carthage, it downloads everything and builds everything over again. My gahd!</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://koenig-media.raywenderlich.com/uploads/2017/08/Carthage-feature-2.png" /></entry><entry><title type="html">Can You Design iOS Apps If You’re Not A Designer?</title><link href="http://iosjunkie.com/blog/can-you-design-ios-apps-if-youre-not-a-designer/" rel="alternate" type="text/html" title="Can You Design iOS Apps If You're Not A Designer?" /><published>2019-10-11T00:00:00+08:00</published><updated>2019-10-11T00:00:00+08:00</updated><id>http://iosjunkie.com/blog/can-you-design-ios-apps-if-youre-not-a-designer</id><content type="html" xml:base="http://iosjunkie.com/blog/can-you-design-ios-apps-if-youre-not-a-designer/">&lt;p&gt;I’m in no position to give any advise on creating designs because I’ve never been a designer. I only code my way through Xcode and I’ve only begun trying to deploy an app on the App Store. I have been, for months, trying to design my app inside the storyboard. It’s pretty difficult, considering that I frequently need to launch the simulator to see the full splendor of my design. It takes painfully long to build, really, but I don’t regret having been able to experience it. I learned so much about how constraints work on the storyboard. But not designing, no. My designing skills did not improve at all.&lt;/p&gt;

&lt;p&gt;I was really skeptic about wireframing and prototyping. Just now, I think I’m doing what designers call prototyping. I’m starting to do it because I’m tired of clicking my way through the storyboard and it lags sometimes.&lt;/p&gt;

&lt;p&gt;Now, I’m exploring the possibility of designing some aspects of my app in &lt;code class=&quot;highlighter-rouge&quot;&gt;Sketch&lt;/code&gt;. It feels lightweight to use, loads up pretty fast and nothing lags. Cool, right? I just create an artboard that would match the screen size of, say, an iPhone SE. The font size I’m using in Xcode is exactly the font size I’m able to use in &lt;code class=&quot;highlighter-rouge&quot;&gt;Sketch&lt;/code&gt;. All the shapes and sizes are portable by setting the artboard’s screen size to an iPhone-like screen. Feels great to be able to explore colors and shapes much faster.&lt;/p&gt;

&lt;p&gt;Since I’m not really a designer, I take most of my design insights from &lt;code class=&quot;highlighter-rouge&quot;&gt;Dribbble&lt;/code&gt;. I don’t copy the exact designs. However, it’s nice to know which colors complement each other and how shapes will mix and match the other shapes around it. That’s what I’ve been up to in &lt;code class=&quot;highlighter-rouge&quot;&gt;Dribbble&lt;/code&gt;. More often than not, I improvise my own design and it turns up like shit. Now that I’m trying it with &lt;code class=&quot;highlighter-rouge&quot;&gt;Sketch&lt;/code&gt;, it seems to be more plausible to make descent outcome out of my improvisations. I can see the results so fast, I don’t need a simulator for it.&lt;/p&gt;

&lt;p&gt;For icons, I prefer using &lt;a href=&quot;https://apps.apple.com/us/app/icons8-lite/id786188363?mt=12&quot;&gt;Icons8&lt;/a&gt;. It’s an app that allows me to easily drag icons directly from the app to my Assets.xcassets or to &lt;code class=&quot;highlighter-rouge&quot;&gt;Sketch&lt;/code&gt;.&lt;/p&gt;</content><author><name>jules</name></author><category term="" /><category term="design" /><category term="ios" /><category term="swift" /><category term="apps" /><category term="app" /><category term="sketch" /><summary type="html">I’m in no position to give any advise on creating designs because I’ve never been a designer. I only code my way through Xcode and I’ve only begun trying to deploy an app on the App Store. I have been, for months, trying to design my app inside the storyboard. It’s pretty difficult, considering that I frequently need to launch the simulator to see the full splendor of my design. It takes painfully long to build, really, but I don’t regret having been able to experience it. I learned so much about how constraints work on the storyboard. But not designing, no. My designing skills did not improve at all.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://iosjunkie.com/blog/assets/images/Screen%20Shot%202019-10-11%20at%202.44.27%20PM.png" /></entry></feed>